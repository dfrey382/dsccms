diff --git a/_ide_helper.php b/_ide_helper.php
index 9a3bc91..e29078a 100644
--- a/_ide_helper.php
+++ b/_ide_helper.php
@@ -3,7 +3,7 @@
 
 /**
  * A helper file for Laravel 5, to provide autocomplete information to your IDE
- * Generated for Laravel 5.7.9 on 2018-10-16 13:30:37.
+ * Generated for Laravel 5.8.8 on 2019-03-28 11:05:00.
  *
  * This file should not be included in your code, only analyzed by your IDE!
  *
@@ -16,18 +16,7 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static string version()
-     * @method static string basePath()
-     * @method static string environment()
-     * @method static bool isDownForMaintenance()
-     * @method static void registerConfiguredProviders()
-     * @method static \Illuminate\Support\ServiceProvider register(\Illuminate\Support\ServiceProvider|string $provider, array $options = [], bool $force = false)
-     * @method static void registerDeferredProvider(string $provider, string $service = null)
-     * @method static void boot()
-     * @method static void booting(mixed $callback)
-     * @method static void booted(mixed $callback)
-     * @method static string getCachedServicesPath()
-     * @see \Illuminate\Foundation\Application
+     * @see \Illuminate\Contracts\Foundation\Application
      */ 
     class App {
         
@@ -39,19 +28,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function version()
         {
-            return \Illuminate\Foundation\Application::version();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->version();
         }
         
         /**
          * Run the given array of bootstrap classes.
          *
-         * @param array $bootstrappers
+         * @param string[] $bootstrappers
          * @return void 
          * @static 
          */ 
         public static function bootstrapWith($bootstrappers)
         {
-            \Illuminate\Foundation\Application::bootstrapWith($bootstrappers);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->bootstrapWith($bootstrappers);
         }
         
         /**
@@ -63,7 +54,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function afterLoadingEnvironment($callback)
         {
-            \Illuminate\Foundation\Application::afterLoadingEnvironment($callback);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->afterLoadingEnvironment($callback);
         }
         
         /**
@@ -76,7 +68,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function beforeBootstrapping($bootstrapper, $callback)
         {
-            \Illuminate\Foundation\Application::beforeBootstrapping($bootstrapper, $callback);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->beforeBootstrapping($bootstrapper, $callback);
         }
         
         /**
@@ -89,7 +82,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function afterBootstrapping($bootstrapper, $callback)
         {
-            \Illuminate\Foundation\Application::afterBootstrapping($bootstrapper, $callback);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->afterBootstrapping($bootstrapper, $callback);
         }
         
         /**
@@ -100,31 +94,47 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasBeenBootstrapped()
         {
-            return \Illuminate\Foundation\Application::hasBeenBootstrapped();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->hasBeenBootstrapped();
         }
         
         /**
          * Set the base path for the application.
          *
          * @param string $basePath
-         * @return $this 
+         * @return \Illuminate\Foundation\Application 
          * @static 
          */ 
         public static function setBasePath($basePath)
         {
-            return \Illuminate\Foundation\Application::setBasePath($basePath);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->setBasePath($basePath);
         }
         
         /**
          * Get the path to the application "app" directory.
          *
-         * @param string $path Optionally, a path to append to the app path
+         * @param string $path
          * @return string 
          * @static 
          */ 
         public static function path($path = '')
         {
-            return \Illuminate\Foundation\Application::path($path);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->path($path);
+        }
+        
+        /**
+         * Set the application directory.
+         *
+         * @param string $path
+         * @return \Illuminate\Foundation\Application 
+         * @static 
+         */ 
+        public static function useAppPath($path)
+        {
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->useAppPath($path);
         }
         
         /**
@@ -136,7 +146,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function basePath($path = '')
         {
-            return \Illuminate\Foundation\Application::basePath($path);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->basePath($path);
         }
         
         /**
@@ -148,7 +159,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function bootstrapPath($path = '')
         {
-            return \Illuminate\Foundation\Application::bootstrapPath($path);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->bootstrapPath($path);
         }
         
         /**
@@ -160,7 +172,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function configPath($path = '')
         {
-            return \Illuminate\Foundation\Application::configPath($path);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->configPath($path);
         }
         
         /**
@@ -172,19 +185,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function databasePath($path = '')
         {
-            return \Illuminate\Foundation\Application::databasePath($path);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->databasePath($path);
         }
         
         /**
          * Set the database directory.
          *
          * @param string $path
-         * @return $this 
+         * @return \Illuminate\Foundation\Application 
          * @static 
          */ 
         public static function useDatabasePath($path)
         {
-            return \Illuminate\Foundation\Application::useDatabasePath($path);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->useDatabasePath($path);
         }
         
         /**
@@ -195,7 +210,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function langPath()
         {
-            return \Illuminate\Foundation\Application::langPath();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->langPath();
         }
         
         /**
@@ -206,7 +222,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function publicPath()
         {
-            return \Illuminate\Foundation\Application::publicPath();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->publicPath();
         }
         
         /**
@@ -217,19 +234,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function storagePath()
         {
-            return \Illuminate\Foundation\Application::storagePath();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->storagePath();
         }
         
         /**
          * Set the storage directory.
          *
          * @param string $path
-         * @return $this 
+         * @return \Illuminate\Foundation\Application 
          * @static 
          */ 
         public static function useStoragePath($path)
         {
-            return \Illuminate\Foundation\Application::useStoragePath($path);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->useStoragePath($path);
         }
         
         /**
@@ -241,7 +260,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function resourcePath($path = '')
         {
-            return \Illuminate\Foundation\Application::resourcePath($path);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->resourcePath($path);
         }
         
         /**
@@ -252,31 +272,34 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function environmentPath()
         {
-            return \Illuminate\Foundation\Application::environmentPath();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->environmentPath();
         }
         
         /**
          * Set the directory for the environment file.
          *
          * @param string $path
-         * @return $this 
+         * @return \Illuminate\Foundation\Application 
          * @static 
          */ 
         public static function useEnvironmentPath($path)
         {
-            return \Illuminate\Foundation\Application::useEnvironmentPath($path);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->useEnvironmentPath($path);
         }
         
         /**
          * Set the environment file to be loaded during bootstrapping.
          *
          * @param string $file
-         * @return $this 
+         * @return \Illuminate\Foundation\Application 
          * @static 
          */ 
         public static function loadEnvironmentFrom($file)
         {
-            return \Illuminate\Foundation\Application::loadEnvironmentFrom($file);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->loadEnvironmentFrom($file);
         }
         
         /**
@@ -287,7 +310,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function environmentFile()
         {
-            return \Illuminate\Foundation\Application::environmentFile();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->environmentFile();
         }
         
         /**
@@ -298,18 +322,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function environmentFilePath()
         {
-            return \Illuminate\Foundation\Application::environmentFilePath();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->environmentFilePath();
         }
         
         /**
          * Get or check the current application environment.
          *
+         * @param string|array $environments
          * @return string|bool 
          * @static 
          */ 
-        public static function environment()
+        public static function environment($environments = null)
         {
-            return \Illuminate\Foundation\Application::environment();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->environment($environments);
         }
         
         /**
@@ -320,7 +347,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function isLocal()
         {
-            return \Illuminate\Foundation\Application::isLocal();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->isLocal();
         }
         
         /**
@@ -332,7 +360,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function detectEnvironment($callback)
         {
-            return \Illuminate\Foundation\Application::detectEnvironment($callback);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->detectEnvironment($callback);
         }
         
         /**
@@ -343,7 +372,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function runningInConsole()
         {
-            return \Illuminate\Foundation\Application::runningInConsole();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->runningInConsole();
         }
         
         /**
@@ -354,7 +384,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function runningUnitTests()
         {
-            return \Illuminate\Foundation\Application::runningUnitTests();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->runningUnitTests();
         }
         
         /**
@@ -365,7 +396,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function registerConfiguredProviders()
         {
-            \Illuminate\Foundation\Application::registerConfiguredProviders();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->registerConfiguredProviders();
         }
         
         /**
@@ -378,7 +410,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function register($provider, $force = false)
         {
-            return \Illuminate\Foundation\Application::register($provider, $force);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->register($provider, $force);
         }
         
         /**
@@ -390,7 +423,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getProvider($provider)
         {
-            return \Illuminate\Foundation\Application::getProvider($provider);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getProvider($provider);
         }
         
         /**
@@ -402,7 +436,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getProviders($provider)
         {
-            return \Illuminate\Foundation\Application::getProviders($provider);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getProviders($provider);
         }
         
         /**
@@ -414,7 +449,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function resolveProvider($provider)
         {
-            return \Illuminate\Foundation\Application::resolveProvider($provider);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->resolveProvider($provider);
         }
         
         /**
@@ -425,7 +461,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function loadDeferredProviders()
         {
-            \Illuminate\Foundation\Application::loadDeferredProviders();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->loadDeferredProviders();
         }
         
         /**
@@ -437,7 +474,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function loadDeferredProvider($service)
         {
-            \Illuminate\Foundation\Application::loadDeferredProvider($service);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->loadDeferredProvider($service);
         }
         
         /**
@@ -450,7 +488,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function registerDeferredProvider($provider, $service = null)
         {
-            \Illuminate\Foundation\Application::registerDeferredProvider($provider, $service);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->registerDeferredProvider($provider, $service);
         }
         
         /**
@@ -465,7 +504,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function make($abstract, $parameters = array())
         {
-            return \Illuminate\Foundation\Application::make($abstract, $parameters);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->make($abstract, $parameters);
         }
         
         /**
@@ -479,7 +519,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function bound($abstract)
         {
-            return \Illuminate\Foundation\Application::bound($abstract);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->bound($abstract);
         }
         
         /**
@@ -490,7 +531,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function isBooted()
         {
-            return \Illuminate\Foundation\Application::isBooted();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->isBooted();
         }
         
         /**
@@ -501,31 +543,34 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function boot()
         {
-            \Illuminate\Foundation\Application::boot();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->boot();
         }
         
         /**
          * Register a new boot listener.
          *
-         * @param mixed $callback
+         * @param callable $callback
          * @return void 
          * @static 
          */ 
         public static function booting($callback)
         {
-            \Illuminate\Foundation\Application::booting($callback);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->booting($callback);
         }
         
         /**
          * Register a new "booted" listener.
          *
-         * @param mixed $callback
+         * @param callable $callback
          * @return void 
          * @static 
          */ 
         public static function booted($callback)
         {
-            \Illuminate\Foundation\Application::booted($callback);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->booted($callback);
         }
         
         /**
@@ -535,7 +580,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function handle($request, $type = 1, $catch = true)
         {
-            return \Illuminate\Foundation\Application::handle($request, $type, $catch);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->handle($request, $type, $catch);
         }
         
         /**
@@ -546,7 +592,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function shouldSkipMiddleware()
         {
-            return \Illuminate\Foundation\Application::shouldSkipMiddleware();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->shouldSkipMiddleware();
         }
         
         /**
@@ -557,7 +604,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getCachedServicesPath()
         {
-            return \Illuminate\Foundation\Application::getCachedServicesPath();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getCachedServicesPath();
         }
         
         /**
@@ -568,7 +616,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getCachedPackagesPath()
         {
-            return \Illuminate\Foundation\Application::getCachedPackagesPath();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getCachedPackagesPath();
         }
         
         /**
@@ -579,7 +628,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function configurationIsCached()
         {
-            return \Illuminate\Foundation\Application::configurationIsCached();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->configurationIsCached();
         }
         
         /**
@@ -590,7 +640,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getCachedConfigPath()
         {
-            return \Illuminate\Foundation\Application::getCachedConfigPath();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getCachedConfigPath();
         }
         
         /**
@@ -601,7 +652,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function routesAreCached()
         {
-            return \Illuminate\Foundation\Application::routesAreCached();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->routesAreCached();
         }
         
         /**
@@ -612,7 +664,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getCachedRoutesPath()
         {
-            return \Illuminate\Foundation\Application::getCachedRoutesPath();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getCachedRoutesPath();
         }
         
         /**
@@ -623,7 +676,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function isDownForMaintenance()
         {
-            return \Illuminate\Foundation\Application::isDownForMaintenance();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->isDownForMaintenance();
         }
         
         /**
@@ -638,19 +692,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function abort($code, $message = '', $headers = array())
         {
-            \Illuminate\Foundation\Application::abort($code, $message, $headers);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->abort($code, $message, $headers);
         }
         
         /**
          * Register a terminating callback with the application.
          *
-         * @param \Closure $callback
-         * @return $this 
+         * @param callable|string $callback
+         * @return \Illuminate\Foundation\Application 
          * @static 
          */ 
         public static function terminating($callback)
         {
-            return \Illuminate\Foundation\Application::terminating($callback);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->terminating($callback);
         }
         
         /**
@@ -661,7 +717,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function terminate()
         {
-            \Illuminate\Foundation\Application::terminate();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->terminate();
         }
         
         /**
@@ -672,7 +729,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getLoadedProviders()
         {
-            return \Illuminate\Foundation\Application::getLoadedProviders();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getLoadedProviders();
         }
         
         /**
@@ -683,7 +741,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDeferredServices()
         {
-            return \Illuminate\Foundation\Application::getDeferredServices();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getDeferredServices();
         }
         
         /**
@@ -695,7 +754,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setDeferredServices($services)
         {
-            \Illuminate\Foundation\Application::setDeferredServices($services);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->setDeferredServices($services);
         }
         
         /**
@@ -707,7 +767,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function addDeferredServices($services)
         {
-            \Illuminate\Foundation\Application::addDeferredServices($services);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->addDeferredServices($services);
         }
         
         /**
@@ -719,7 +780,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function isDeferredService($service)
         {
-            return \Illuminate\Foundation\Application::isDeferredService($service);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->isDeferredService($service);
         }
         
         /**
@@ -731,7 +793,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function provideFacades($namespace)
         {
-            \Illuminate\Foundation\Application::provideFacades($namespace);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->provideFacades($namespace);
         }
         
         /**
@@ -742,7 +805,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getLocale()
         {
-            return \Illuminate\Foundation\Application::getLocale();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getLocale();
         }
         
         /**
@@ -754,7 +818,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setLocale($locale)
         {
-            \Illuminate\Foundation\Application::setLocale($locale);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->setLocale($locale);
         }
         
         /**
@@ -766,7 +831,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function isLocale($locale)
         {
-            return \Illuminate\Foundation\Application::isLocale($locale);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->isLocale($locale);
         }
         
         /**
@@ -777,7 +843,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function registerCoreContainerAliases()
         {
-            \Illuminate\Foundation\Application::registerCoreContainerAliases();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->registerCoreContainerAliases();
         }
         
         /**
@@ -788,7 +855,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flush()
         {
-            \Illuminate\Foundation\Application::flush();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->flush();
         }
         
         /**
@@ -800,7 +868,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getNamespace()
         {
-            return \Illuminate\Foundation\Application::getNamespace();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getNamespace();
         }
         
         /**
@@ -813,7 +882,8 @@ namespace Illuminate\Support\Facades {
         public static function when($concrete)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::when($concrete);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->when($concrete);
         }
         
         /**
@@ -831,7 +901,8 @@ namespace Illuminate\Support\Facades {
         public static function has($id)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::has($id);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->has($id);
         }
         
         /**
@@ -844,7 +915,8 @@ namespace Illuminate\Support\Facades {
         public static function resolved($abstract)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::resolved($abstract);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->resolved($abstract);
         }
         
         /**
@@ -857,7 +929,8 @@ namespace Illuminate\Support\Facades {
         public static function isShared($abstract)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::isShared($abstract);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->isShared($abstract);
         }
         
         /**
@@ -870,7 +943,8 @@ namespace Illuminate\Support\Facades {
         public static function isAlias($name)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::isAlias($name);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->isAlias($name);
         }
         
         /**
@@ -885,7 +959,8 @@ namespace Illuminate\Support\Facades {
         public static function bind($abstract, $concrete = null, $shared = false)
         {
             //Method inherited from \Illuminate\Container\Container            
-            \Illuminate\Foundation\Application::bind($abstract, $concrete, $shared);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->bind($abstract, $concrete, $shared);
         }
         
         /**
@@ -898,7 +973,8 @@ namespace Illuminate\Support\Facades {
         public static function hasMethodBinding($method)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::hasMethodBinding($method);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->hasMethodBinding($method);
         }
         
         /**
@@ -912,7 +988,8 @@ namespace Illuminate\Support\Facades {
         public static function bindMethod($method, $callback)
         {
             //Method inherited from \Illuminate\Container\Container            
-            \Illuminate\Foundation\Application::bindMethod($method, $callback);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->bindMethod($method, $callback);
         }
         
         /**
@@ -926,7 +1003,8 @@ namespace Illuminate\Support\Facades {
         public static function callMethodBinding($method, $instance)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::callMethodBinding($method, $instance);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->callMethodBinding($method, $instance);
         }
         
         /**
@@ -941,7 +1019,8 @@ namespace Illuminate\Support\Facades {
         public static function addContextualBinding($concrete, $abstract, $implementation)
         {
             //Method inherited from \Illuminate\Container\Container            
-            \Illuminate\Foundation\Application::addContextualBinding($concrete, $abstract, $implementation);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->addContextualBinding($concrete, $abstract, $implementation);
         }
         
         /**
@@ -956,7 +1035,8 @@ namespace Illuminate\Support\Facades {
         public static function bindIf($abstract, $concrete = null, $shared = false)
         {
             //Method inherited from \Illuminate\Container\Container            
-            \Illuminate\Foundation\Application::bindIf($abstract, $concrete, $shared);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->bindIf($abstract, $concrete, $shared);
         }
         
         /**
@@ -970,7 +1050,8 @@ namespace Illuminate\Support\Facades {
         public static function singleton($abstract, $concrete = null)
         {
             //Method inherited from \Illuminate\Container\Container            
-            \Illuminate\Foundation\Application::singleton($abstract, $concrete);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->singleton($abstract, $concrete);
         }
         
         /**
@@ -985,7 +1066,8 @@ namespace Illuminate\Support\Facades {
         public static function extend($abstract, $closure)
         {
             //Method inherited from \Illuminate\Container\Container            
-            \Illuminate\Foundation\Application::extend($abstract, $closure);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->extend($abstract, $closure);
         }
         
         /**
@@ -999,7 +1081,8 @@ namespace Illuminate\Support\Facades {
         public static function instance($abstract, $instance)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::instance($abstract, $instance);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->instance($abstract, $instance);
         }
         
         /**
@@ -1013,20 +1096,22 @@ namespace Illuminate\Support\Facades {
         public static function tag($abstracts, $tags)
         {
             //Method inherited from \Illuminate\Container\Container            
-            \Illuminate\Foundation\Application::tag($abstracts, $tags);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->tag($abstracts, $tags);
         }
         
         /**
          * Resolve all of the bindings for a given tag.
          *
          * @param string $tag
-         * @return array 
+         * @return \Illuminate\Container\iterable 
          * @static 
          */ 
         public static function tagged($tag)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::tagged($tag);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->tagged($tag);
         }
         
         /**
@@ -1035,12 +1120,14 @@ namespace Illuminate\Support\Facades {
          * @param string $abstract
          * @param string $alias
          * @return void 
+         * @throws \LogicException
          * @static 
          */ 
         public static function alias($abstract, $alias)
         {
             //Method inherited from \Illuminate\Container\Container            
-            \Illuminate\Foundation\Application::alias($abstract, $alias);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->alias($abstract, $alias);
         }
         
         /**
@@ -1054,7 +1141,8 @@ namespace Illuminate\Support\Facades {
         public static function rebinding($abstract, $callback)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::rebinding($abstract, $callback);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->rebinding($abstract, $callback);
         }
         
         /**
@@ -1069,7 +1157,8 @@ namespace Illuminate\Support\Facades {
         public static function refresh($abstract, $target, $method)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::refresh($abstract, $target, $method);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->refresh($abstract, $target, $method);
         }
         
         /**
@@ -1083,7 +1172,8 @@ namespace Illuminate\Support\Facades {
         public static function wrap($callback, $parameters = array())
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::wrap($callback, $parameters);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->wrap($callback, $parameters);
         }
         
         /**
@@ -1098,7 +1188,8 @@ namespace Illuminate\Support\Facades {
         public static function call($callback, $parameters = array(), $defaultMethod = null)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::call($callback, $parameters, $defaultMethod);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->call($callback, $parameters, $defaultMethod);
         }
         
         /**
@@ -1111,7 +1202,8 @@ namespace Illuminate\Support\Facades {
         public static function factory($abstract)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::factory($abstract);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->factory($abstract);
         }
         
         /**
@@ -1125,7 +1217,8 @@ namespace Illuminate\Support\Facades {
         public static function makeWith($abstract, $parameters = array())
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::makeWith($abstract, $parameters);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->makeWith($abstract, $parameters);
         }
         
         /**
@@ -1140,7 +1233,8 @@ namespace Illuminate\Support\Facades {
         public static function get($id)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::get($id);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->get($id);
         }
         
         /**
@@ -1154,7 +1248,8 @@ namespace Illuminate\Support\Facades {
         public static function build($concrete)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::build($concrete);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->build($concrete);
         }
         
         /**
@@ -1168,7 +1263,8 @@ namespace Illuminate\Support\Facades {
         public static function resolving($abstract, $callback = null)
         {
             //Method inherited from \Illuminate\Container\Container            
-            \Illuminate\Foundation\Application::resolving($abstract, $callback);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->resolving($abstract, $callback);
         }
         
         /**
@@ -1182,7 +1278,8 @@ namespace Illuminate\Support\Facades {
         public static function afterResolving($abstract, $callback = null)
         {
             //Method inherited from \Illuminate\Container\Container            
-            \Illuminate\Foundation\Application::afterResolving($abstract, $callback);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->afterResolving($abstract, $callback);
         }
         
         /**
@@ -1194,7 +1291,8 @@ namespace Illuminate\Support\Facades {
         public static function getBindings()
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::getBindings();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getBindings();
         }
         
         /**
@@ -1202,13 +1300,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $abstract
          * @return string 
-         * @throws \LogicException
          * @static 
          */ 
         public static function getAlias($abstract)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::getAlias($abstract);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->getAlias($abstract);
         }
         
         /**
@@ -1221,7 +1319,8 @@ namespace Illuminate\Support\Facades {
         public static function forgetExtenders($abstract)
         {
             //Method inherited from \Illuminate\Container\Container            
-            \Illuminate\Foundation\Application::forgetExtenders($abstract);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->forgetExtenders($abstract);
         }
         
         /**
@@ -1234,7 +1333,8 @@ namespace Illuminate\Support\Facades {
         public static function forgetInstance($abstract)
         {
             //Method inherited from \Illuminate\Container\Container            
-            \Illuminate\Foundation\Application::forgetInstance($abstract);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->forgetInstance($abstract);
         }
         
         /**
@@ -1246,7 +1346,8 @@ namespace Illuminate\Support\Facades {
         public static function forgetInstances()
         {
             //Method inherited from \Illuminate\Container\Container            
-            \Illuminate\Foundation\Application::forgetInstances();
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->forgetInstances();
         }
         
         /**
@@ -1258,7 +1359,7 @@ namespace Illuminate\Support\Facades {
         public static function getInstance()
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::getInstance();
+                        return \Illuminate\Foundation\Application::getInstance();
         }
         
         /**
@@ -1271,7 +1372,7 @@ namespace Illuminate\Support\Facades {
         public static function setInstance($container = null)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::setInstance($container);
+                        return \Illuminate\Foundation\Application::setInstance($container);
         }
         
         /**
@@ -1284,7 +1385,8 @@ namespace Illuminate\Support\Facades {
         public static function offsetExists($key)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::offsetExists($key);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->offsetExists($key);
         }
         
         /**
@@ -1297,7 +1399,8 @@ namespace Illuminate\Support\Facades {
         public static function offsetGet($key)
         {
             //Method inherited from \Illuminate\Container\Container            
-            return \Illuminate\Foundation\Application::offsetGet($key);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        return $instance->offsetGet($key);
         }
         
         /**
@@ -1311,7 +1414,8 @@ namespace Illuminate\Support\Facades {
         public static function offsetSet($key, $value)
         {
             //Method inherited from \Illuminate\Container\Container            
-            \Illuminate\Foundation\Application::offsetSet($key, $value);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->offsetSet($key, $value);
         }
         
         /**
@@ -1324,7 +1428,8 @@ namespace Illuminate\Support\Facades {
         public static function offsetUnset($key)
         {
             //Method inherited from \Illuminate\Container\Container            
-            \Illuminate\Foundation\Application::offsetUnset($key);
+                        /** @var \Illuminate\Foundation\Application $instance */
+                        $instance->offsetUnset($key);
         }
          
     }
@@ -1332,11 +1437,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static int handle(\Symfony\Component\Console\Input\InputInterface $input, \Symfony\Component\Console\Output\OutputInterface $output = null)
-     * @method static int call(string $command, array $parameters = [], $outputBuffer = null)
-     * @method static int queue(string $command, array $parameters = [])
-     * @method static array all()
-     * @method static string output()
      * @see \Illuminate\Contracts\Console\Kernel
      */ 
     class Artisan {
@@ -1352,7 +1452,8 @@ namespace Illuminate\Support\Facades {
         public static function handle($input, $output = null)
         {
             //Method inherited from \Illuminate\Foundation\Console\Kernel            
-            return \Vanguard\Console\Kernel::handle($input, $output);
+                        /** @var \Vanguard\Console\Kernel $instance */
+                        return $instance->handle($input, $output);
         }
         
         /**
@@ -1366,7 +1467,8 @@ namespace Illuminate\Support\Facades {
         public static function terminate($input, $status)
         {
             //Method inherited from \Illuminate\Foundation\Console\Kernel            
-            \Vanguard\Console\Kernel::terminate($input, $status);
+                        /** @var \Vanguard\Console\Kernel $instance */
+                        $instance->terminate($input, $status);
         }
         
         /**
@@ -1380,7 +1482,8 @@ namespace Illuminate\Support\Facades {
         public static function command($signature, $callback)
         {
             //Method inherited from \Illuminate\Foundation\Console\Kernel            
-            return \Vanguard\Console\Kernel::command($signature, $callback);
+                        /** @var \Vanguard\Console\Kernel $instance */
+                        return $instance->command($signature, $callback);
         }
         
         /**
@@ -1393,7 +1496,8 @@ namespace Illuminate\Support\Facades {
         public static function registerCommand($command)
         {
             //Method inherited from \Illuminate\Foundation\Console\Kernel            
-            \Vanguard\Console\Kernel::registerCommand($command);
+                        /** @var \Vanguard\Console\Kernel $instance */
+                        $instance->registerCommand($command);
         }
         
         /**
@@ -1403,12 +1507,14 @@ namespace Illuminate\Support\Facades {
          * @param array $parameters
          * @param \Symfony\Component\Console\Output\OutputInterface $outputBuffer
          * @return int 
+         * @throws \Symfony\Component\Console\Exception\CommandNotFoundException
          * @static 
          */ 
         public static function call($command, $parameters = array(), $outputBuffer = null)
         {
             //Method inherited from \Illuminate\Foundation\Console\Kernel            
-            return \Vanguard\Console\Kernel::call($command, $parameters, $outputBuffer);
+                        /** @var \Vanguard\Console\Kernel $instance */
+                        return $instance->call($command, $parameters, $outputBuffer);
         }
         
         /**
@@ -1422,7 +1528,8 @@ namespace Illuminate\Support\Facades {
         public static function queue($command, $parameters = array())
         {
             //Method inherited from \Illuminate\Foundation\Console\Kernel            
-            return \Vanguard\Console\Kernel::queue($command, $parameters);
+                        /** @var \Vanguard\Console\Kernel $instance */
+                        return $instance->queue($command, $parameters);
         }
         
         /**
@@ -1434,7 +1541,8 @@ namespace Illuminate\Support\Facades {
         public static function all()
         {
             //Method inherited from \Illuminate\Foundation\Console\Kernel            
-            return \Vanguard\Console\Kernel::all();
+                        /** @var \Vanguard\Console\Kernel $instance */
+                        return $instance->all();
         }
         
         /**
@@ -1446,7 +1554,8 @@ namespace Illuminate\Support\Facades {
         public static function output()
         {
             //Method inherited from \Illuminate\Foundation\Console\Kernel            
-            return \Vanguard\Console\Kernel::output();
+                        /** @var \Vanguard\Console\Kernel $instance */
+                        return $instance->output();
         }
         
         /**
@@ -1458,7 +1567,8 @@ namespace Illuminate\Support\Facades {
         public static function bootstrap()
         {
             //Method inherited from \Illuminate\Foundation\Console\Kernel            
-            \Vanguard\Console\Kernel::bootstrap();
+                        /** @var \Vanguard\Console\Kernel $instance */
+                        $instance->bootstrap();
         }
         
         /**
@@ -1471,7 +1581,8 @@ namespace Illuminate\Support\Facades {
         public static function setArtisan($artisan)
         {
             //Method inherited from \Illuminate\Foundation\Console\Kernel            
-            \Vanguard\Console\Kernel::setArtisan($artisan);
+                        /** @var \Vanguard\Console\Kernel $instance */
+                        $instance->setArtisan($artisan);
         }
          
     }
@@ -1479,26 +1590,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static mixed guard(string|null $name = null)
-     * @method static void shouldUse(string $name);
-     * @method static bool check()
-     * @method static bool guest()
-     * @method static \Illuminate\Contracts\Auth\Authenticatable|null user()
-     * @method static int|null id()
-     * @method static bool validate(array $credentials = [])
-     * @method static void setUser(\Illuminate\Contracts\Auth\Authenticatable $user)
-     * @method static bool attempt(array $credentials = [], bool $remember = false)
-     * @method static bool once(array $credentials = [])
-     * @method static void login(\Illuminate\Contracts\Auth\Authenticatable $user, bool $remember = false)
-     * @method static \Illuminate\Contracts\Auth\Authenticatable loginUsingId(mixed $id, bool $remember = false)
-     * @method static bool onceUsingId(mixed $id)
-     * @method static bool viaRemember()
-     * @method static void logout()
-     * @method static \Symfony\Component\HttpFoundation\Response|null onceBasic(string $field = 'email',array $extraConditions = [])
-     * @method static null|bool logoutOtherDevices(string $password, string $attribute = 'password')
-     * @method static \Illuminate\Contracts\Auth\UserProvider|null createUserProvider(string $provider = null)
-     * @method static \Illuminate\Auth\AuthManager extend(string $driver, \Closure $callback)
-     * @method static \Illuminate\Auth\AuthManager provider(string $name, \Closure $callback)
      * @see \Illuminate\Auth\AuthManager
      * @see \Illuminate\Contracts\Auth\Factory
      * @see \Illuminate\Contracts\Auth\Guard
@@ -1515,7 +1606,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function guard($name = null)
         {
-            return \Illuminate\Auth\AuthManager::guard($name);
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->guard($name);
         }
         
         /**
@@ -1528,7 +1620,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function createSessionDriver($name, $config)
         {
-            return \Illuminate\Auth\AuthManager::createSessionDriver($name, $config);
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->createSessionDriver($name, $config);
         }
         
         /**
@@ -1541,7 +1634,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function createTokenDriver($name, $config)
         {
-            return \Illuminate\Auth\AuthManager::createTokenDriver($name, $config);
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->createTokenDriver($name, $config);
         }
         
         /**
@@ -1552,7 +1646,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDefaultDriver()
         {
-            return \Illuminate\Auth\AuthManager::getDefaultDriver();
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->getDefaultDriver();
         }
         
         /**
@@ -1564,7 +1659,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function shouldUse($name)
         {
-            \Illuminate\Auth\AuthManager::shouldUse($name);
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        $instance->shouldUse($name);
         }
         
         /**
@@ -1576,7 +1672,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setDefaultDriver($name)
         {
-            \Illuminate\Auth\AuthManager::setDefaultDriver($name);
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        $instance->setDefaultDriver($name);
         }
         
         /**
@@ -1584,12 +1681,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $driver
          * @param callable $callback
-         * @return $this 
+         * @return \Illuminate\Auth\AuthManager 
          * @static 
          */ 
         public static function viaRequest($driver, $callback)
         {
-            return \Illuminate\Auth\AuthManager::viaRequest($driver, $callback);
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->viaRequest($driver, $callback);
         }
         
         /**
@@ -1600,19 +1698,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function userResolver()
         {
-            return \Illuminate\Auth\AuthManager::userResolver();
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->userResolver();
         }
         
         /**
          * Set the callback to be used to resolve users.
          *
          * @param \Closure $userResolver
-         * @return $this 
+         * @return \Illuminate\Auth\AuthManager 
          * @static 
          */ 
         public static function resolveUsersUsing($userResolver)
         {
-            return \Illuminate\Auth\AuthManager::resolveUsersUsing($userResolver);
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->resolveUsersUsing($userResolver);
         }
         
         /**
@@ -1620,12 +1720,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return $this 
+         * @return \Illuminate\Auth\AuthManager 
          * @static 
          */ 
         public static function extend($driver, $callback)
         {
-            return \Illuminate\Auth\AuthManager::extend($driver, $callback);
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->extend($driver, $callback);
         }
         
         /**
@@ -1633,12 +1734,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $name
          * @param \Closure $callback
-         * @return $this 
+         * @return \Illuminate\Auth\AuthManager 
          * @static 
          */ 
         public static function provider($name, $callback)
         {
-            return \Illuminate\Auth\AuthManager::provider($name, $callback);
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->provider($name, $callback);
         }
         
         /**
@@ -1651,7 +1753,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function createUserProvider($provider = null)
         {
-            return \Illuminate\Auth\AuthManager::createUserProvider($provider);
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->createUserProvider($provider);
         }
         
         /**
@@ -1662,7 +1765,35 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDefaultUserProvider()
         {
-            return \Illuminate\Auth\AuthManager::getDefaultUserProvider();
+                        /** @var \Illuminate\Auth\AuthManager $instance */
+                        return $instance->getDefaultUserProvider();
+        }
+        
+        /**
+         * Log a user into the application without firing the Login event.
+         *
+         * @param \Illuminate\Contracts\Auth\Authenticatable $user
+         * @return void 
+         * @static 
+         */ 
+        public static function quietLogin($user)
+        {
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        $instance->quietLogin($user);
+        }
+        
+        /**
+         * Logout the user without updating remember_token
+         * and without firing the Logout event.
+         *
+         * @param void
+         * @return void 
+         * @static 
+         */ 
+        public static function quietLogout()
+        {
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        $instance->quietLogout();
         }
         
         /**
@@ -1673,7 +1804,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function user()
         {
-            return \Illuminate\Auth\SessionGuard::user();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->user();
         }
         
         /**
@@ -1684,7 +1817,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function id()
         {
-            return \Illuminate\Auth\SessionGuard::id();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->id();
         }
         
         /**
@@ -1696,7 +1831,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function once($credentials = array())
         {
-            return \Illuminate\Auth\SessionGuard::once($credentials);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->once($credentials);
         }
         
         /**
@@ -1708,7 +1845,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function onceUsingId($id)
         {
-            return \Illuminate\Auth\SessionGuard::onceUsingId($id);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->onceUsingId($id);
         }
         
         /**
@@ -1720,7 +1859,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function validate($credentials = array())
         {
-            return \Illuminate\Auth\SessionGuard::validate($credentials);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->validate($credentials);
         }
         
         /**
@@ -1733,7 +1874,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function basic($field = 'email', $extraConditions = array())
         {
-            return \Illuminate\Auth\SessionGuard::basic($field, $extraConditions);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->basic($field, $extraConditions);
         }
         
         /**
@@ -1746,7 +1889,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function onceBasic($field = 'email', $extraConditions = array())
         {
-            return \Illuminate\Auth\SessionGuard::onceBasic($field, $extraConditions);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->onceBasic($field, $extraConditions);
         }
         
         /**
@@ -1759,7 +1904,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function attempt($credentials = array(), $remember = false)
         {
-            return \Illuminate\Auth\SessionGuard::attempt($credentials, $remember);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->attempt($credentials, $remember);
         }
         
         /**
@@ -1772,7 +1919,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function loginUsingId($id, $remember = false)
         {
-            return \Illuminate\Auth\SessionGuard::loginUsingId($id, $remember);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->loginUsingId($id, $remember);
         }
         
         /**
@@ -1785,7 +1934,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function login($user, $remember = false)
         {
-            \Illuminate\Auth\SessionGuard::login($user, $remember);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        $instance->login($user, $remember);
         }
         
         /**
@@ -1796,7 +1947,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function logout()
         {
-            \Illuminate\Auth\SessionGuard::logout();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        $instance->logout();
         }
         
         /**
@@ -1811,7 +1964,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function logoutOtherDevices($password, $attribute = 'password')
         {
-            return \Illuminate\Auth\SessionGuard::logoutOtherDevices($password, $attribute);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->logoutOtherDevices($password, $attribute);
         }
         
         /**
@@ -1823,7 +1978,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function attempting($callback)
         {
-            \Illuminate\Auth\SessionGuard::attempting($callback);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        $instance->attempting($callback);
         }
         
         /**
@@ -1834,7 +1991,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getLastAttempted()
         {
-            return \Illuminate\Auth\SessionGuard::getLastAttempted();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->getLastAttempted();
         }
         
         /**
@@ -1845,7 +2004,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getName()
         {
-            return \Illuminate\Auth\SessionGuard::getName();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->getName();
         }
         
         /**
@@ -1856,7 +2017,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getRecallerName()
         {
-            return \Illuminate\Auth\SessionGuard::getRecallerName();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->getRecallerName();
         }
         
         /**
@@ -1867,7 +2030,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function viaRemember()
         {
-            return \Illuminate\Auth\SessionGuard::viaRemember();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->viaRemember();
         }
         
         /**
@@ -1879,7 +2044,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getCookieJar()
         {
-            return \Illuminate\Auth\SessionGuard::getCookieJar();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->getCookieJar();
         }
         
         /**
@@ -1891,7 +2058,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setCookieJar($cookie)
         {
-            \Illuminate\Auth\SessionGuard::setCookieJar($cookie);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        $instance->setCookieJar($cookie);
         }
         
         /**
@@ -1902,7 +2071,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDispatcher()
         {
-            return \Illuminate\Auth\SessionGuard::getDispatcher();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->getDispatcher();
         }
         
         /**
@@ -1914,7 +2085,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setDispatcher($events)
         {
-            \Illuminate\Auth\SessionGuard::setDispatcher($events);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        $instance->setDispatcher($events);
         }
         
         /**
@@ -1925,7 +2098,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getSession()
         {
-            return \Illuminate\Auth\SessionGuard::getSession();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->getSession();
         }
         
         /**
@@ -1936,19 +2111,23 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getUser()
         {
-            return \Illuminate\Auth\SessionGuard::getUser();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->getUser();
         }
         
         /**
          * Set the current user.
          *
          * @param \Illuminate\Contracts\Auth\Authenticatable $user
-         * @return $this 
+         * @return \Lab404\Impersonate\Guard\SessionGuard 
          * @static 
          */ 
         public static function setUser($user)
         {
-            return \Illuminate\Auth\SessionGuard::setUser($user);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->setUser($user);
         }
         
         /**
@@ -1959,19 +2138,23 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getRequest()
         {
-            return \Illuminate\Auth\SessionGuard::getRequest();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->getRequest();
         }
         
         /**
          * Set the current request instance.
          *
          * @param \Symfony\Component\HttpFoundation\Request $request
-         * @return $this 
+         * @return \Lab404\Impersonate\Guard\SessionGuard 
          * @static 
          */ 
         public static function setRequest($request)
         {
-            return \Illuminate\Auth\SessionGuard::setRequest($request);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->setRequest($request);
         }
         
         /**
@@ -1983,7 +2166,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function authenticate()
         {
-            return \Illuminate\Auth\SessionGuard::authenticate();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->authenticate();
         }
         
         /**
@@ -1994,7 +2179,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasUser()
         {
-            return \Illuminate\Auth\SessionGuard::hasUser();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->hasUser();
         }
         
         /**
@@ -2005,7 +2192,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function check()
         {
-            return \Illuminate\Auth\SessionGuard::check();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->check();
         }
         
         /**
@@ -2016,7 +2205,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function guest()
         {
-            return \Illuminate\Auth\SessionGuard::guest();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->guest();
         }
         
         /**
@@ -2027,7 +2218,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getProvider()
         {
-            return \Illuminate\Auth\SessionGuard::getProvider();
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        return $instance->getProvider();
         }
         
         /**
@@ -2039,7 +2232,9 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setProvider($provider)
         {
-            \Illuminate\Auth\SessionGuard::setProvider($provider);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        /** @var \Lab404\Impersonate\Guard\SessionGuard $instance */
+                        $instance->setProvider($provider);
         }
         
         /**
@@ -2052,20 +2247,23 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function macro($name, $macro)
         {
-            \Illuminate\Auth\SessionGuard::macro($name, $macro);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        \Lab404\Impersonate\Guard\SessionGuard::macro($name, $macro);
         }
         
         /**
          * Mix another object into the class.
          *
          * @param object $mixin
+         * @param bool $replace
          * @return void 
          * @throws \ReflectionException
          * @static 
          */ 
-        public static function mixin($mixin)
+        public static function mixin($mixin, $replace = true)
         {
-            \Illuminate\Auth\SessionGuard::mixin($mixin);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        \Lab404\Impersonate\Guard\SessionGuard::mixin($mixin, $replace);
         }
         
         /**
@@ -2077,7 +2275,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasMacro($name)
         {
-            return \Illuminate\Auth\SessionGuard::hasMacro($name);
+            //Method inherited from \Illuminate\Auth\SessionGuard            
+                        return \Lab404\Impersonate\Guard\SessionGuard::hasMacro($name);
         }
          
     }
@@ -2085,22 +2284,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static void compile($path = null)
-     * @method static string getPath()
-     * @method static void setPath($path)
-     * @method static string compileString($value)
-     * @method static string stripParentheses($expression)
-     * @method static void extend(callable $compiler)
-     * @method static array getExtensions()
-     * @method static void if($name, callable $callback)
-     * @method static bool check($name, ...$parameters)
-     * @method static void component($path, $alias = null)
-     * @method static void include($path, $alias = null)
-     * @method static void directive($name, callable $handler)
-     * @method static array getCustomDirectives()
-     * @method static void setEchoFormat($format)
-     * @method static void withDoubleEncoding()
-     * @method static void withoutDoubleEncoding()
      * @see \Illuminate\View\Compilers\BladeCompiler
      */ 
     class Blade {
@@ -2114,7 +2297,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function compile($path = null)
         {
-            \Illuminate\View\Compilers\BladeCompiler::compile($path);
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->compile($path);
         }
         
         /**
@@ -2125,7 +2309,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getPath()
         {
-            return \Illuminate\View\Compilers\BladeCompiler::getPath();
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        return $instance->getPath();
         }
         
         /**
@@ -2137,7 +2322,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setPath($path)
         {
-            \Illuminate\View\Compilers\BladeCompiler::setPath($path);
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->setPath($path);
         }
         
         /**
@@ -2149,7 +2335,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function compileString($value)
         {
-            return \Illuminate\View\Compilers\BladeCompiler::compileString($value);
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        return $instance->compileString($value);
         }
         
         /**
@@ -2161,7 +2348,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function stripParentheses($expression)
         {
-            return \Illuminate\View\Compilers\BladeCompiler::stripParentheses($expression);
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        return $instance->stripParentheses($expression);
         }
         
         /**
@@ -2173,7 +2361,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function extend($compiler)
         {
-            \Illuminate\View\Compilers\BladeCompiler::extend($compiler);
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->extend($compiler);
         }
         
         /**
@@ -2184,7 +2373,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getExtensions()
         {
-            return \Illuminate\View\Compilers\BladeCompiler::getExtensions();
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        return $instance->getExtensions();
         }
         
         /**
@@ -2197,7 +2387,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function if($name, $callback)
         {
-            \Illuminate\View\Compilers\BladeCompiler::if($name, $callback);
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->if($name, $callback);
         }
         
         /**
@@ -2210,7 +2401,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function check($name, $parameters = null)
         {
-            return \Illuminate\View\Compilers\BladeCompiler::check($name, $parameters);
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        return $instance->check($name, $parameters);
         }
         
         /**
@@ -2223,7 +2415,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function component($path, $alias = null)
         {
-            \Illuminate\View\Compilers\BladeCompiler::component($path, $alias);
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->component($path, $alias);
         }
         
         /**
@@ -2236,7 +2429,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function include($path, $alias = null)
         {
-            \Illuminate\View\Compilers\BladeCompiler::include($path, $alias);
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->include($path, $alias);
         }
         
         /**
@@ -2249,7 +2443,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function directive($name, $handler)
         {
-            \Illuminate\View\Compilers\BladeCompiler::directive($name, $handler);
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->directive($name, $handler);
         }
         
         /**
@@ -2260,7 +2455,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getCustomDirectives()
         {
-            return \Illuminate\View\Compilers\BladeCompiler::getCustomDirectives();
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        return $instance->getCustomDirectives();
         }
         
         /**
@@ -2272,7 +2468,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setEchoFormat($format)
         {
-            \Illuminate\View\Compilers\BladeCompiler::setEchoFormat($format);
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->setEchoFormat($format);
         }
         
         /**
@@ -2283,7 +2480,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function withDoubleEncoding()
         {
-            \Illuminate\View\Compilers\BladeCompiler::withDoubleEncoding();
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->withDoubleEncoding();
         }
         
         /**
@@ -2294,7 +2492,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function withoutDoubleEncoding()
         {
-            \Illuminate\View\Compilers\BladeCompiler::withoutDoubleEncoding();
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        $instance->withoutDoubleEncoding();
         }
         
         /**
@@ -2307,7 +2506,8 @@ namespace Illuminate\Support\Facades {
         public static function getCompiledPath($path)
         {
             //Method inherited from \Illuminate\View\Compilers\Compiler            
-            return \Illuminate\View\Compilers\BladeCompiler::getCompiledPath($path);
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        return $instance->getCompiledPath($path);
         }
         
         /**
@@ -2320,7 +2520,8 @@ namespace Illuminate\Support\Facades {
         public static function isExpired($path)
         {
             //Method inherited from \Illuminate\View\Compilers\Compiler            
-            return \Illuminate\View\Compilers\BladeCompiler::isExpired($path);
+                        /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
+                        return $instance->isExpired($path);
         }
          
     }
@@ -2328,7 +2529,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static void connection($name = null);
      * @method static \Illuminate\Broadcasting\Broadcasters\Broadcaster channel(string $channel, callable|string  $callback)
      * @method static mixed auth(\Illuminate\Http\Request $request)
      * @see \Illuminate\Contracts\Broadcasting\Factory
@@ -2344,7 +2544,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function routes($attributes = null)
         {
-            \Illuminate\Broadcasting\BroadcastManager::routes($attributes);
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        $instance->routes($attributes);
         }
         
         /**
@@ -2356,7 +2557,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function socket($request = null)
         {
-            return \Illuminate\Broadcasting\BroadcastManager::socket($request);
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        return $instance->socket($request);
         }
         
         /**
@@ -2368,7 +2570,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function event($event = null)
         {
-            return \Illuminate\Broadcasting\BroadcastManager::event($event);
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        return $instance->event($event);
         }
         
         /**
@@ -2380,7 +2583,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function queue($event)
         {
-            \Illuminate\Broadcasting\BroadcastManager::queue($event);
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        $instance->queue($event);
         }
         
         /**
@@ -2392,7 +2596,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function connection($driver = null)
         {
-            return \Illuminate\Broadcasting\BroadcastManager::connection($driver);
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        return $instance->connection($driver);
         }
         
         /**
@@ -2404,7 +2609,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function driver($name = null)
         {
-            return \Illuminate\Broadcasting\BroadcastManager::driver($name);
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        return $instance->driver($name);
         }
         
         /**
@@ -2415,7 +2621,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDefaultDriver()
         {
-            return \Illuminate\Broadcasting\BroadcastManager::getDefaultDriver();
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        return $instance->getDefaultDriver();
         }
         
         /**
@@ -2427,7 +2634,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setDefaultDriver($name)
         {
-            \Illuminate\Broadcasting\BroadcastManager::setDefaultDriver($name);
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        $instance->setDefaultDriver($name);
         }
         
         /**
@@ -2435,12 +2643,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return $this 
+         * @return \Illuminate\Broadcasting\BroadcastManager 
          * @static 
          */ 
         public static function extend($driver, $callback)
         {
-            return \Illuminate\Broadcasting\BroadcastManager::extend($driver, $callback);
+                        /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
+                        return $instance->extend($driver, $callback);
         }
          
     }
@@ -2448,12 +2657,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static mixed dispatch($command)
-     * @method static mixed dispatchNow($command, $handler = null)
-     * @method static bool hasCommandHandler($command)
-     * @method static bool|mixed getCommandHandler($command)
-     * @method static \Illuminate\Contracts\Bus\Dispatcher pipeThrough(array $pipes)
-     * @method static \Illuminate\Contracts\Bus\Dispatcher map(array $map)
      * @see \Illuminate\Contracts\Bus\Dispatcher
      */ 
     class Bus {
@@ -2467,7 +2670,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function dispatch($command)
         {
-            return \Illuminate\Bus\Dispatcher::dispatch($command);
+                        /** @var \Illuminate\Bus\Dispatcher $instance */
+                        return $instance->dispatch($command);
         }
         
         /**
@@ -2480,7 +2684,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function dispatchNow($command, $handler = null)
         {
-            return \Illuminate\Bus\Dispatcher::dispatchNow($command, $handler);
+                        /** @var \Illuminate\Bus\Dispatcher $instance */
+                        return $instance->dispatchNow($command, $handler);
         }
         
         /**
@@ -2492,7 +2697,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasCommandHandler($command)
         {
-            return \Illuminate\Bus\Dispatcher::hasCommandHandler($command);
+                        /** @var \Illuminate\Bus\Dispatcher $instance */
+                        return $instance->hasCommandHandler($command);
         }
         
         /**
@@ -2504,7 +2710,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getCommandHandler($command)
         {
-            return \Illuminate\Bus\Dispatcher::getCommandHandler($command);
+                        /** @var \Illuminate\Bus\Dispatcher $instance */
+                        return $instance->getCommandHandler($command);
         }
         
         /**
@@ -2517,31 +2724,34 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function dispatchToQueue($command)
         {
-            return \Illuminate\Bus\Dispatcher::dispatchToQueue($command);
+                        /** @var \Illuminate\Bus\Dispatcher $instance */
+                        return $instance->dispatchToQueue($command);
         }
         
         /**
          * Set the pipes through which commands should be piped before dispatching.
          *
          * @param array $pipes
-         * @return $this 
+         * @return \Illuminate\Bus\Dispatcher 
          * @static 
          */ 
         public static function pipeThrough($pipes)
         {
-            return \Illuminate\Bus\Dispatcher::pipeThrough($pipes);
+                        /** @var \Illuminate\Bus\Dispatcher $instance */
+                        return $instance->pipeThrough($pipes);
         }
         
         /**
          * Map a command to a handler.
          *
          * @param array $map
-         * @return $this 
+         * @return \Illuminate\Bus\Dispatcher 
          * @static 
          */ 
         public static function map($map)
         {
-            return \Illuminate\Bus\Dispatcher::map($map);
+                        /** @var \Illuminate\Bus\Dispatcher $instance */
+                        return $instance->map($map);
         }
         
         /**
@@ -2554,7 +2764,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertDispatched($command, $callback = null)
         {
-            \Illuminate\Support\Testing\Fakes\BusFake::assertDispatched($command, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
+                        $instance->assertDispatched($command, $callback);
         }
         
         /**
@@ -2567,7 +2778,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertNotDispatched($command, $callback = null)
         {
-            \Illuminate\Support\Testing\Fakes\BusFake::assertNotDispatched($command, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
+                        $instance->assertNotDispatched($command, $callback);
         }
         
         /**
@@ -2580,7 +2792,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function dispatched($command, $callback = null)
         {
-            return \Illuminate\Support\Testing\Fakes\BusFake::dispatched($command, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
+                        return $instance->dispatched($command, $callback);
         }
         
         /**
@@ -2592,7 +2805,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasDispatched($command)
         {
-            return \Illuminate\Support\Testing\Fakes\BusFake::hasDispatched($command);
+                        /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
+                        return $instance->hasDispatched($command);
         }
          
     }
@@ -2600,27 +2814,13 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static \Illuminate\Contracts\Cache\Repository  store(string|null $name = null)
-     * @method static bool has(string $key)
-     * @method static mixed get(string $key, mixed $default = null)
-     * @method static mixed pull(string $key, mixed $default = null)
-     * @method static void put(string $key, $value, \DateTimeInterface|\DateInterval|float|int $minutes)
-     * @method static bool add(string $key, $value, \DateTimeInterface|\DateInterval|float|int $minutes)
-     * @method static int|bool increment(string $key, $value = 1)
-     * @method static int|bool decrement(string $key, $value = 1)
-     * @method static void forever(string $key, $value)
-     * @method static mixed remember(string $key, \DateTimeInterface|\DateInterval|float|int $minutes, \Closure $callback)
-     * @method static mixed sear(string $key, \Closure $callback)
-     * @method static mixed rememberForever(string $key, \Closure $callback)
-     * @method static bool forget(string $key)
-     * @method static \Illuminate\Contracts\Cache\Store getStore()
      * @see \Illuminate\Cache\CacheManager
      * @see \Illuminate\Cache\Repository
      */ 
     class Cache {
         
         /**
-         * Get a cache store instance by name.
+         * Get a cache store instance by name, wrapped in a repository.
          *
          * @param string|null $name
          * @return \Illuminate\Contracts\Cache\Repository 
@@ -2628,19 +2828,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function store($name = null)
         {
-            return \Illuminate\Cache\CacheManager::store($name);
+                        /** @var \Illuminate\Cache\CacheManager $instance */
+                        return $instance->store($name);
         }
         
         /**
          * Get a cache driver instance.
          *
          * @param string|null $driver
-         * @return mixed 
+         * @return \Illuminate\Contracts\Cache\Repository 
          * @static 
          */ 
         public static function driver($driver = null)
         {
-            return \Illuminate\Cache\CacheManager::driver($driver);
+                        /** @var \Illuminate\Cache\CacheManager $instance */
+                        return $instance->driver($driver);
         }
         
         /**
@@ -2652,7 +2854,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function repository($store)
         {
-            return \Illuminate\Cache\CacheManager::repository($store);
+                        /** @var \Illuminate\Cache\CacheManager $instance */
+                        return $instance->repository($store);
         }
         
         /**
@@ -2663,7 +2866,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDefaultDriver()
         {
-            return \Illuminate\Cache\CacheManager::getDefaultDriver();
+                        /** @var \Illuminate\Cache\CacheManager $instance */
+                        return $instance->getDefaultDriver();
         }
         
         /**
@@ -2675,7 +2879,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setDefaultDriver($name)
         {
-            \Illuminate\Cache\CacheManager::setDefaultDriver($name);
+                        /** @var \Illuminate\Cache\CacheManager $instance */
+                        $instance->setDefaultDriver($name);
+        }
+        
+        /**
+         * Unset the given driver instances.
+         *
+         * @param array|string|null $name
+         * @return \Illuminate\Cache\CacheManager 
+         * @static 
+         */ 
+        public static function forgetDriver($name = null)
+        {
+                        /** @var \Illuminate\Cache\CacheManager $instance */
+                        return $instance->forgetDriver($name);
         }
         
         /**
@@ -2683,12 +2901,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return $this 
+         * @return \Illuminate\Cache\CacheManager 
          * @static 
          */ 
         public static function extend($driver, $callback)
         {
-            return \Illuminate\Cache\CacheManager::extend($driver, $callback);
+                        /** @var \Illuminate\Cache\CacheManager $instance */
+                        return $instance->extend($driver, $callback);
         }
         
         /**
@@ -2700,7 +2919,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function has($key)
         {
-            return \Illuminate\Cache\Repository::has($key);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->has($key);
+        }
+        
+        /**
+         * Determine if an item doesn't exist in the cache.
+         *
+         * @param string $key
+         * @return bool 
+         * @static 
+         */ 
+        public static function missing($key)
+        {
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->missing($key);
         }
         
         /**
@@ -2713,7 +2946,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function get($key, $default = null)
         {
-            return \Illuminate\Cache\Repository::get($key, $default);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->get($key, $default);
         }
         
         /**
@@ -2727,7 +2961,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function many($keys)
         {
-            return \Illuminate\Cache\Repository::many($keys);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->many($keys);
         }
         
         /**
@@ -2743,7 +2978,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getMultiple($keys, $default = null)
         {
-            return \Illuminate\Cache\Repository::getMultiple($keys, $default);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->getMultiple($keys, $default);
         }
         
         /**
@@ -2756,7 +2992,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function pull($key, $default = null)
         {
-            return \Illuminate\Cache\Repository::pull($key, $default);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->pull($key, $default);
         }
         
         /**
@@ -2764,13 +3001,14 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $key
          * @param mixed $value
-         * @param \DateTimeInterface|\DateInterval|float|int|null $minutes
-         * @return void 
+         * @param \DateTimeInterface|\DateInterval|int|null $ttl
+         * @return bool 
          * @static 
          */ 
-        public static function put($key, $value, $minutes = null)
+        public static function put($key, $value, $ttl = null)
         {
-            \Illuminate\Cache\Repository::put($key, $value, $minutes);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->put($key, $value, $ttl);
         }
         
         /**
@@ -2788,20 +3026,22 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function set($key, $value, $ttl = null)
         {
-            return \Illuminate\Cache\Repository::set($key, $value, $ttl);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->set($key, $value, $ttl);
         }
         
         /**
-         * Store multiple items in the cache for a given number of minutes.
+         * Store multiple items in the cache for a given number of seconds.
          *
          * @param array $values
-         * @param \DateTimeInterface|\DateInterval|float|int $minutes
-         * @return void 
+         * @param \DateTimeInterface|\DateInterval|int|null $ttl
+         * @return bool 
          * @static 
          */ 
-        public static function putMany($values, $minutes)
+        public static function putMany($values, $ttl = null)
         {
-            \Illuminate\Cache\Repository::putMany($values, $minutes);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->putMany($values, $ttl);
         }
         
         /**
@@ -2819,7 +3059,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setMultiple($values, $ttl = null)
         {
-            return \Illuminate\Cache\Repository::setMultiple($values, $ttl);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->setMultiple($values, $ttl);
         }
         
         /**
@@ -2827,13 +3068,14 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $key
          * @param mixed $value
-         * @param \DateTimeInterface|\DateInterval|float|int $minutes
+         * @param \DateTimeInterface|\DateInterval|int|null $ttl
          * @return bool 
          * @static 
          */ 
-        public static function add($key, $value, $minutes)
+        public static function add($key, $value, $ttl = null)
         {
-            return \Illuminate\Cache\Repository::add($key, $value, $minutes);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->add($key, $value, $ttl);
         }
         
         /**
@@ -2846,7 +3088,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function increment($key, $value = 1)
         {
-            return \Illuminate\Cache\Repository::increment($key, $value);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->increment($key, $value);
         }
         
         /**
@@ -2859,7 +3102,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function decrement($key, $value = 1)
         {
-            return \Illuminate\Cache\Repository::decrement($key, $value);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->decrement($key, $value);
         }
         
         /**
@@ -2867,30 +3111,32 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $key
          * @param mixed $value
-         * @return void 
+         * @return bool 
          * @static 
          */ 
         public static function forever($key, $value)
         {
-            \Illuminate\Cache\Repository::forever($key, $value);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->forever($key, $value);
         }
         
         /**
-         * Get an item from the cache, or store the default value.
+         * Get an item from the cache, or execute the given Closure and store the result.
          *
          * @param string $key
-         * @param \DateTimeInterface|\DateInterval|float|int $minutes
+         * @param \DateTimeInterface|\DateInterval|int|null $ttl
          * @param \Closure $callback
          * @return mixed 
          * @static 
          */ 
-        public static function remember($key, $minutes, $callback)
+        public static function remember($key, $ttl, $callback)
         {
-            return \Illuminate\Cache\Repository::remember($key, $minutes, $callback);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->remember($key, $ttl, $callback);
         }
         
         /**
-         * Get an item from the cache, or store the default value forever.
+         * Get an item from the cache, or execute the given Closure and store the result forever.
          *
          * @param string $key
          * @param \Closure $callback
@@ -2899,11 +3145,12 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function sear($key, $callback)
         {
-            return \Illuminate\Cache\Repository::sear($key, $callback);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->sear($key, $callback);
         }
         
         /**
-         * Get an item from the cache, or store the default value forever.
+         * Get an item from the cache, or execute the given Closure and store the result forever.
          *
          * @param string $key
          * @param \Closure $callback
@@ -2912,7 +3159,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function rememberForever($key, $callback)
         {
-            return \Illuminate\Cache\Repository::rememberForever($key, $callback);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->rememberForever($key, $callback);
         }
         
         /**
@@ -2924,7 +3172,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function forget($key)
         {
-            return \Illuminate\Cache\Repository::forget($key);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->forget($key);
         }
         
         /**
@@ -2938,7 +3187,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function delete($key)
         {
-            return \Illuminate\Cache\Repository::delete($key);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->delete($key);
         }
         
         /**
@@ -2953,7 +3203,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function deleteMultiple($keys)
         {
-            return \Illuminate\Cache\Repository::deleteMultiple($keys);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->deleteMultiple($keys);
         }
         
         /**
@@ -2964,7 +3215,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function clear()
         {
-            return \Illuminate\Cache\Repository::clear();
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->clear();
         }
         
         /**
@@ -2977,30 +3229,33 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function tags($names)
         {
-            return \Illuminate\Cache\Repository::tags($names);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->tags($names);
         }
         
         /**
          * Get the default cache time.
          *
-         * @return float|int 
+         * @return int 
          * @static 
          */ 
         public static function getDefaultCacheTime()
         {
-            return \Illuminate\Cache\Repository::getDefaultCacheTime();
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->getDefaultCacheTime();
         }
         
         /**
-         * Set the default cache time in minutes.
+         * Set the default cache time in seconds.
          *
-         * @param float|int $minutes
-         * @return $this 
+         * @param int|null $seconds
+         * @return \Illuminate\Cache\Repository 
          * @static 
          */ 
-        public static function setDefaultCacheTime($minutes)
+        public static function setDefaultCacheTime($seconds)
         {
-            return \Illuminate\Cache\Repository::setDefaultCacheTime($minutes);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->setDefaultCacheTime($seconds);
         }
         
         /**
@@ -3011,7 +3266,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getStore()
         {
-            return \Illuminate\Cache\Repository::getStore();
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->getStore();
         }
         
         /**
@@ -3023,7 +3279,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setEventDispatcher($events)
         {
-            \Illuminate\Cache\Repository::setEventDispatcher($events);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        $instance->setEventDispatcher($events);
         }
         
         /**
@@ -3035,7 +3292,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function offsetExists($key)
         {
-            return \Illuminate\Cache\Repository::offsetExists($key);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->offsetExists($key);
         }
         
         /**
@@ -3047,7 +3305,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function offsetGet($key)
         {
-            return \Illuminate\Cache\Repository::offsetGet($key);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->offsetGet($key);
         }
         
         /**
@@ -3060,7 +3319,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function offsetSet($key, $value)
         {
-            \Illuminate\Cache\Repository::offsetSet($key, $value);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        $instance->offsetSet($key, $value);
         }
         
         /**
@@ -3072,7 +3332,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function offsetUnset($key)
         {
-            \Illuminate\Cache\Repository::offsetUnset($key);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        $instance->offsetUnset($key);
         }
         
         /**
@@ -3085,20 +3346,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function macro($name, $macro)
         {
-            \Illuminate\Cache\Repository::macro($name, $macro);
+                        \Illuminate\Cache\Repository::macro($name, $macro);
         }
         
         /**
          * Mix another object into the class.
          *
          * @param object $mixin
+         * @param bool $replace
          * @return void 
          * @throws \ReflectionException
          * @static 
          */ 
-        public static function mixin($mixin)
+        public static function mixin($mixin, $replace = true)
         {
-            \Illuminate\Cache\Repository::mixin($mixin);
+                        \Illuminate\Cache\Repository::mixin($mixin, $replace);
         }
         
         /**
@@ -3110,7 +3372,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasMacro($name)
         {
-            return \Illuminate\Cache\Repository::hasMacro($name);
+                        return \Illuminate\Cache\Repository::hasMacro($name);
         }
         
         /**
@@ -3124,7 +3386,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function macroCall($method, $parameters)
         {
-            return \Illuminate\Cache\Repository::macroCall($method, $parameters);
+                        /** @var \Illuminate\Cache\Repository $instance */
+                        return $instance->macroCall($method, $parameters);
         }
         
         /**
@@ -3135,7 +3398,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flush()
         {
-            return \Illuminate\Cache\FileStore::flush();
+                        /** @var \Illuminate\Cache\FileStore $instance */
+                        return $instance->flush();
         }
         
         /**
@@ -3146,7 +3410,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getFilesystem()
         {
-            return \Illuminate\Cache\FileStore::getFilesystem();
+                        /** @var \Illuminate\Cache\FileStore $instance */
+                        return $instance->getFilesystem();
         }
         
         /**
@@ -3157,7 +3422,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDirectory()
         {
-            return \Illuminate\Cache\FileStore::getDirectory();
+                        /** @var \Illuminate\Cache\FileStore $instance */
+                        return $instance->getDirectory();
         }
         
         /**
@@ -3168,7 +3434,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getPrefix()
         {
-            return \Illuminate\Cache\FileStore::getPrefix();
+                        /** @var \Illuminate\Cache\FileStore $instance */
+                        return $instance->getPrefix();
         }
          
     }
@@ -3176,12 +3443,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static bool has($key)
-     * @method static mixed get($key, $default = null)
-     * @method static array all()
-     * @method static void set($key, $value = null)
-     * @method static void prepend($key, $value)
-     * @method static void push($key, $value)
      * @see \Illuminate\Config\Repository
      */ 
     class Config {
@@ -3195,7 +3456,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function has($key)
         {
-            return \Illuminate\Config\Repository::has($key);
+                        /** @var \Illuminate\Config\Repository $instance */
+                        return $instance->has($key);
         }
         
         /**
@@ -3208,7 +3470,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function get($key, $default = null)
         {
-            return \Illuminate\Config\Repository::get($key, $default);
+                        /** @var \Illuminate\Config\Repository $instance */
+                        return $instance->get($key, $default);
         }
         
         /**
@@ -3220,7 +3483,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getMany($keys)
         {
-            return \Illuminate\Config\Repository::getMany($keys);
+                        /** @var \Illuminate\Config\Repository $instance */
+                        return $instance->getMany($keys);
         }
         
         /**
@@ -3233,7 +3497,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function set($key, $value = null)
         {
-            \Illuminate\Config\Repository::set($key, $value);
+                        /** @var \Illuminate\Config\Repository $instance */
+                        $instance->set($key, $value);
         }
         
         /**
@@ -3246,7 +3511,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function prepend($key, $value)
         {
-            \Illuminate\Config\Repository::prepend($key, $value);
+                        /** @var \Illuminate\Config\Repository $instance */
+                        $instance->prepend($key, $value);
         }
         
         /**
@@ -3259,7 +3525,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function push($key, $value)
         {
-            \Illuminate\Config\Repository::push($key, $value);
+                        /** @var \Illuminate\Config\Repository $instance */
+                        $instance->push($key, $value);
         }
         
         /**
@@ -3270,7 +3537,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function all()
         {
-            return \Illuminate\Config\Repository::all();
+                        /** @var \Illuminate\Config\Repository $instance */
+                        return $instance->all();
         }
         
         /**
@@ -3282,7 +3550,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function offsetExists($key)
         {
-            return \Illuminate\Config\Repository::offsetExists($key);
+                        /** @var \Illuminate\Config\Repository $instance */
+                        return $instance->offsetExists($key);
         }
         
         /**
@@ -3294,7 +3563,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function offsetGet($key)
         {
-            return \Illuminate\Config\Repository::offsetGet($key);
+                        /** @var \Illuminate\Config\Repository $instance */
+                        return $instance->offsetGet($key);
         }
         
         /**
@@ -3307,7 +3577,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function offsetSet($key, $value)
         {
-            \Illuminate\Config\Repository::offsetSet($key, $value);
+                        /** @var \Illuminate\Config\Repository $instance */
+                        $instance->offsetSet($key, $value);
         }
         
         /**
@@ -3319,7 +3590,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function offsetUnset($key)
         {
-            \Illuminate\Config\Repository::offsetUnset($key);
+                        /** @var \Illuminate\Config\Repository $instance */
+                        $instance->offsetUnset($key);
         }
          
     }
@@ -3327,9 +3599,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static void queue(...$parameters)
-     * @method static unqueue($name)
-     * @method static array getQueuedCookies()
      * @see \Illuminate\Cookie\CookieJar
      */ 
     class Cookie {
@@ -3351,7 +3620,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function make($name, $value, $minutes = 0, $path = null, $domain = null, $secure = null, $httpOnly = true, $raw = false, $sameSite = null)
         {
-            return \Illuminate\Cookie\CookieJar::make($name, $value, $minutes, $path, $domain, $secure, $httpOnly, $raw, $sameSite);
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        return $instance->make($name, $value, $minutes, $path, $domain, $secure, $httpOnly, $raw, $sameSite);
         }
         
         /**
@@ -3370,7 +3640,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function forever($name, $value, $path = null, $domain = null, $secure = null, $httpOnly = true, $raw = false, $sameSite = null)
         {
-            return \Illuminate\Cookie\CookieJar::forever($name, $value, $path, $domain, $secure, $httpOnly, $raw, $sameSite);
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        return $instance->forever($name, $value, $path, $domain, $secure, $httpOnly, $raw, $sameSite);
         }
         
         /**
@@ -3384,7 +3655,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function forget($name, $path = null, $domain = null)
         {
-            return \Illuminate\Cookie\CookieJar::forget($name, $path, $domain);
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        return $instance->forget($name, $path, $domain);
         }
         
         /**
@@ -3396,7 +3668,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasQueued($key)
         {
-            return \Illuminate\Cookie\CookieJar::hasQueued($key);
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        return $instance->hasQueued($key);
         }
         
         /**
@@ -3409,7 +3682,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function queued($key, $default = null)
         {
-            return \Illuminate\Cookie\CookieJar::queued($key, $default);
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        return $instance->queued($key, $default);
         }
         
         /**
@@ -3421,7 +3695,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function queue($parameters = null)
         {
-            \Illuminate\Cookie\CookieJar::queue($parameters);
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        $instance->queue($parameters);
         }
         
         /**
@@ -3433,7 +3708,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function unqueue($name)
         {
-            \Illuminate\Cookie\CookieJar::unqueue($name);
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        $instance->unqueue($name);
         }
         
         /**
@@ -3443,12 +3719,13 @@ namespace Illuminate\Support\Facades {
          * @param string $domain
          * @param bool $secure
          * @param string $sameSite
-         * @return $this 
+         * @return \Illuminate\Cookie\CookieJar 
          * @static 
          */ 
         public static function setDefaultPathAndDomain($path, $domain, $secure = false, $sameSite = null)
         {
-            return \Illuminate\Cookie\CookieJar::setDefaultPathAndDomain($path, $domain, $secure, $sameSite);
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        return $instance->setDefaultPathAndDomain($path, $domain, $secure, $sameSite);
         }
         
         /**
@@ -3459,7 +3736,47 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getQueuedCookies()
         {
-            return \Illuminate\Cookie\CookieJar::getQueuedCookies();
+                        /** @var \Illuminate\Cookie\CookieJar $instance */
+                        return $instance->getQueuedCookies();
+        }
+        
+        /**
+         * Register a custom macro.
+         *
+         * @param string $name
+         * @param object|callable $macro
+         * @return void 
+         * @static 
+         */ 
+        public static function macro($name, $macro)
+        {
+                        \Illuminate\Cookie\CookieJar::macro($name, $macro);
+        }
+        
+        /**
+         * Mix another object into the class.
+         *
+         * @param object $mixin
+         * @param bool $replace
+         * @return void 
+         * @throws \ReflectionException
+         * @static 
+         */ 
+        public static function mixin($mixin, $replace = true)
+        {
+                        \Illuminate\Cookie\CookieJar::mixin($mixin, $replace);
+        }
+        
+        /**
+         * Checks if macro is registered.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMacro($name)
+        {
+                        return \Illuminate\Cookie\CookieJar::hasMacro($name);
         }
          
     }
@@ -3467,8 +3784,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static string encrypt(string $value, bool $serialize = true)
-     * @method static string decrypt(string $payload, bool $unserialize = true)
      * @see \Illuminate\Encryption\Encrypter
      */ 
     class Crypt {
@@ -3483,7 +3798,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function supported($key, $cipher)
         {
-            return \Illuminate\Encryption\Encrypter::supported($key, $cipher);
+                        return \Illuminate\Encryption\Encrypter::supported($key, $cipher);
         }
         
         /**
@@ -3495,7 +3810,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function generateKey($cipher)
         {
-            return \Illuminate\Encryption\Encrypter::generateKey($cipher);
+                        return \Illuminate\Encryption\Encrypter::generateKey($cipher);
         }
         
         /**
@@ -3509,7 +3824,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function encrypt($value, $serialize = true)
         {
-            return \Illuminate\Encryption\Encrypter::encrypt($value, $serialize);
+                        /** @var \Illuminate\Encryption\Encrypter $instance */
+                        return $instance->encrypt($value, $serialize);
         }
         
         /**
@@ -3517,11 +3833,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $value
          * @return string 
+         * @throws \Illuminate\Contracts\Encryption\EncryptException
          * @static 
          */ 
         public static function encryptString($value)
         {
-            return \Illuminate\Encryption\Encrypter::encryptString($value);
+                        /** @var \Illuminate\Encryption\Encrypter $instance */
+                        return $instance->encryptString($value);
         }
         
         /**
@@ -3535,7 +3853,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function decrypt($payload, $unserialize = true)
         {
-            return \Illuminate\Encryption\Encrypter::decrypt($payload, $unserialize);
+                        /** @var \Illuminate\Encryption\Encrypter $instance */
+                        return $instance->decrypt($payload, $unserialize);
         }
         
         /**
@@ -3543,11 +3862,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $payload
          * @return string 
+         * @throws \Illuminate\Contracts\Encryption\DecryptException
          * @static 
          */ 
         public static function decryptString($payload)
         {
-            return \Illuminate\Encryption\Encrypter::decryptString($payload);
+                        /** @var \Illuminate\Encryption\Encrypter $instance */
+                        return $instance->decryptString($payload);
         }
         
         /**
@@ -3558,7 +3879,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getKey()
         {
-            return \Illuminate\Encryption\Encrypter::getKey();
+                        /** @var \Illuminate\Encryption\Encrypter $instance */
+                        return $instance->getKey();
         }
          
     }
@@ -3566,26 +3888,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static \Illuminate\Database\ConnectionInterface connection(string $name = null)
-     * @method static string getDefaultConnection()
-     * @method static void setDefaultConnection(string $name)
-     * @method static \Illuminate\Database\Query\Builder table(string $table)
-     * @method static \Illuminate\Database\Query\Expression raw($value)
-     * @method static mixed selectOne(string $query, array $bindings = [])
-     * @method static array select(string $query, array $bindings = [])
-     * @method static bool insert(string $query, array $bindings = [])
-     * @method static int update(string $query, array $bindings = [])
-     * @method static int delete(string $query, array $bindings = [])
-     * @method static bool statement(string $query, array $bindings = [])
-     * @method static int affectingStatement(string $query, array $bindings = [])
-     * @method static bool unprepared(string $query)
-     * @method static array prepareBindings(array $bindings)
-     * @method static mixed transaction(\Closure $callback, int $attempts = 1)
-     * @method static void beginTransaction()
-     * @method static void commit()
-     * @method static void rollBack()
-     * @method static int transactionLevel()
-     * @method static array pretend(\Closure $callback)
      * @see \Illuminate\Database\DatabaseManager
      * @see \Illuminate\Database\Connection
      */ 
@@ -3600,7 +3902,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function connection($name = null)
         {
-            return \Illuminate\Database\DatabaseManager::connection($name);
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        return $instance->connection($name);
         }
         
         /**
@@ -3612,7 +3915,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function purge($name = null)
         {
-            \Illuminate\Database\DatabaseManager::purge($name);
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        $instance->purge($name);
         }
         
         /**
@@ -3624,7 +3928,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function disconnect($name = null)
         {
-            \Illuminate\Database\DatabaseManager::disconnect($name);
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        $instance->disconnect($name);
         }
         
         /**
@@ -3636,7 +3941,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function reconnect($name = null)
         {
-            return \Illuminate\Database\DatabaseManager::reconnect($name);
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        return $instance->reconnect($name);
         }
         
         /**
@@ -3647,7 +3953,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDefaultConnection()
         {
-            return \Illuminate\Database\DatabaseManager::getDefaultConnection();
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        return $instance->getDefaultConnection();
         }
         
         /**
@@ -3659,7 +3966,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setDefaultConnection($name)
         {
-            \Illuminate\Database\DatabaseManager::setDefaultConnection($name);
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        $instance->setDefaultConnection($name);
         }
         
         /**
@@ -3670,7 +3978,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function supportedDrivers()
         {
-            return \Illuminate\Database\DatabaseManager::supportedDrivers();
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        return $instance->supportedDrivers();
         }
         
         /**
@@ -3681,7 +3990,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function availableDrivers()
         {
-            return \Illuminate\Database\DatabaseManager::availableDrivers();
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        return $instance->availableDrivers();
         }
         
         /**
@@ -3694,7 +4004,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function extend($name, $resolver)
         {
-            \Illuminate\Database\DatabaseManager::extend($name, $resolver);
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        $instance->extend($name, $resolver);
         }
         
         /**
@@ -3705,7 +4016,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getConnections()
         {
-            return \Illuminate\Database\DatabaseManager::getConnections();
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        return $instance->getConnections();
+        }
+        
+        /**
+         * Set the database reconnector callback.
+         *
+         * @param callable $reconnector
+         * @return void 
+         * @static 
+         */ 
+        public static function setReconnector($reconnector)
+        {
+                        /** @var \Illuminate\Database\DatabaseManager $instance */
+                        $instance->setReconnector($reconnector);
         }
         
         /**
@@ -3716,7 +4041,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getSchemaBuilder()
         {
-            return \Illuminate\Database\MySqlConnection::getSchemaBuilder();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getSchemaBuilder();
         }
         
         /**
@@ -3729,7 +4055,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function bindValues($statement, $bindings)
         {
-            \Illuminate\Database\MySqlConnection::bindValues($statement, $bindings);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->bindValues($statement, $bindings);
         }
         
         /**
@@ -3741,7 +4068,8 @@ namespace Illuminate\Support\Facades {
         public static function useDefaultQueryGrammar()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            \Illuminate\Database\MySqlConnection::useDefaultQueryGrammar();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->useDefaultQueryGrammar();
         }
         
         /**
@@ -3753,7 +4081,8 @@ namespace Illuminate\Support\Facades {
         public static function useDefaultSchemaGrammar()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            \Illuminate\Database\MySqlConnection::useDefaultSchemaGrammar();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->useDefaultSchemaGrammar();
         }
         
         /**
@@ -3765,7 +4094,8 @@ namespace Illuminate\Support\Facades {
         public static function useDefaultPostProcessor()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            \Illuminate\Database\MySqlConnection::useDefaultPostProcessor();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->useDefaultPostProcessor();
         }
         
         /**
@@ -3778,7 +4108,8 @@ namespace Illuminate\Support\Facades {
         public static function table($table)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::table($table);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->table($table);
         }
         
         /**
@@ -3790,7 +4121,8 @@ namespace Illuminate\Support\Facades {
         public static function query()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::query();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->query();
         }
         
         /**
@@ -3805,7 +4137,8 @@ namespace Illuminate\Support\Facades {
         public static function selectOne($query, $bindings = array(), $useReadPdo = true)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::selectOne($query, $bindings, $useReadPdo);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->selectOne($query, $bindings, $useReadPdo);
         }
         
         /**
@@ -3819,7 +4152,8 @@ namespace Illuminate\Support\Facades {
         public static function selectFromWriteConnection($query, $bindings = array())
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::selectFromWriteConnection($query, $bindings);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->selectFromWriteConnection($query, $bindings);
         }
         
         /**
@@ -3834,7 +4168,8 @@ namespace Illuminate\Support\Facades {
         public static function select($query, $bindings = array(), $useReadPdo = true)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::select($query, $bindings, $useReadPdo);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->select($query, $bindings, $useReadPdo);
         }
         
         /**
@@ -3849,7 +4184,8 @@ namespace Illuminate\Support\Facades {
         public static function cursor($query, $bindings = array(), $useReadPdo = true)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::cursor($query, $bindings, $useReadPdo);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->cursor($query, $bindings, $useReadPdo);
         }
         
         /**
@@ -3863,7 +4199,8 @@ namespace Illuminate\Support\Facades {
         public static function insert($query, $bindings = array())
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::insert($query, $bindings);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->insert($query, $bindings);
         }
         
         /**
@@ -3877,7 +4214,8 @@ namespace Illuminate\Support\Facades {
         public static function update($query, $bindings = array())
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::update($query, $bindings);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->update($query, $bindings);
         }
         
         /**
@@ -3891,7 +4229,8 @@ namespace Illuminate\Support\Facades {
         public static function delete($query, $bindings = array())
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::delete($query, $bindings);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->delete($query, $bindings);
         }
         
         /**
@@ -3905,7 +4244,8 @@ namespace Illuminate\Support\Facades {
         public static function statement($query, $bindings = array())
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::statement($query, $bindings);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->statement($query, $bindings);
         }
         
         /**
@@ -3919,7 +4259,8 @@ namespace Illuminate\Support\Facades {
         public static function affectingStatement($query, $bindings = array())
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::affectingStatement($query, $bindings);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->affectingStatement($query, $bindings);
         }
         
         /**
@@ -3932,7 +4273,8 @@ namespace Illuminate\Support\Facades {
         public static function unprepared($query)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::unprepared($query);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->unprepared($query);
         }
         
         /**
@@ -3945,7 +4287,8 @@ namespace Illuminate\Support\Facades {
         public static function pretend($callback)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::pretend($callback);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->pretend($callback);
         }
         
         /**
@@ -3958,7 +4301,8 @@ namespace Illuminate\Support\Facades {
         public static function prepareBindings($bindings)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::prepareBindings($bindings);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->prepareBindings($bindings);
         }
         
         /**
@@ -3973,7 +4317,8 @@ namespace Illuminate\Support\Facades {
         public static function logQuery($query, $bindings, $time = null)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            \Illuminate\Database\MySqlConnection::logQuery($query, $bindings, $time);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->logQuery($query, $bindings, $time);
         }
         
         /**
@@ -3986,7 +4331,8 @@ namespace Illuminate\Support\Facades {
         public static function listen($callback)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            \Illuminate\Database\MySqlConnection::listen($callback);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->listen($callback);
         }
         
         /**
@@ -3999,7 +4345,8 @@ namespace Illuminate\Support\Facades {
         public static function raw($value)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::raw($value);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->raw($value);
         }
         
         /**
@@ -4012,7 +4359,8 @@ namespace Illuminate\Support\Facades {
         public static function recordsHaveBeenModified($value = true)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            \Illuminate\Database\MySqlConnection::recordsHaveBeenModified($value);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->recordsHaveBeenModified($value);
         }
         
         /**
@@ -4024,7 +4372,8 @@ namespace Illuminate\Support\Facades {
         public static function isDoctrineAvailable()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::isDoctrineAvailable();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->isDoctrineAvailable();
         }
         
         /**
@@ -4038,7 +4387,8 @@ namespace Illuminate\Support\Facades {
         public static function getDoctrineColumn($table, $column)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::getDoctrineColumn($table, $column);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getDoctrineColumn($table, $column);
         }
         
         /**
@@ -4050,7 +4400,8 @@ namespace Illuminate\Support\Facades {
         public static function getDoctrineSchemaManager()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::getDoctrineSchemaManager();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getDoctrineSchemaManager();
         }
         
         /**
@@ -4062,7 +4413,8 @@ namespace Illuminate\Support\Facades {
         public static function getDoctrineConnection()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::getDoctrineConnection();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getDoctrineConnection();
         }
         
         /**
@@ -4074,7 +4426,8 @@ namespace Illuminate\Support\Facades {
         public static function getPdo()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::getPdo();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getPdo();
         }
         
         /**
@@ -4086,46 +4439,36 @@ namespace Illuminate\Support\Facades {
         public static function getReadPdo()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::getReadPdo();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getReadPdo();
         }
         
         /**
          * Set the PDO connection.
          *
          * @param \PDO|\Closure|null $pdo
-         * @return $this 
+         * @return \Illuminate\Database\MySqlConnection 
          * @static 
          */ 
         public static function setPdo($pdo)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::setPdo($pdo);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->setPdo($pdo);
         }
         
         /**
          * Set the PDO connection used for reading.
          *
          * @param \PDO|\Closure|null $pdo
-         * @return $this 
+         * @return \Illuminate\Database\MySqlConnection 
          * @static 
          */ 
         public static function setReadPdo($pdo)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::setReadPdo($pdo);
-        }
-        
-        /**
-         * Set the reconnect instance on the connection.
-         *
-         * @param callable $reconnector
-         * @return $this 
-         * @static 
-         */ 
-        public static function setReconnector($reconnector)
-        {
-            //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::setReconnector($reconnector);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->setReadPdo($pdo);
         }
         
         /**
@@ -4137,7 +4480,8 @@ namespace Illuminate\Support\Facades {
         public static function getName()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::getName();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getName();
         }
         
         /**
@@ -4150,7 +4494,8 @@ namespace Illuminate\Support\Facades {
         public static function getConfig($option = null)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::getConfig($option);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getConfig($option);
         }
         
         /**
@@ -4162,7 +4507,8 @@ namespace Illuminate\Support\Facades {
         public static function getDriverName()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::getDriverName();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getDriverName();
         }
         
         /**
@@ -4174,20 +4520,22 @@ namespace Illuminate\Support\Facades {
         public static function getQueryGrammar()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::getQueryGrammar();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getQueryGrammar();
         }
         
         /**
          * Set the query grammar used by the connection.
          *
          * @param \Illuminate\Database\Query\Grammars\Grammar $grammar
-         * @return $this 
+         * @return \Illuminate\Database\MySqlConnection 
          * @static 
          */ 
         public static function setQueryGrammar($grammar)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::setQueryGrammar($grammar);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->setQueryGrammar($grammar);
         }
         
         /**
@@ -4199,20 +4547,22 @@ namespace Illuminate\Support\Facades {
         public static function getSchemaGrammar()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::getSchemaGrammar();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getSchemaGrammar();
         }
         
         /**
          * Set the schema grammar used by the connection.
          *
          * @param \Illuminate\Database\Schema\Grammars\Grammar $grammar
-         * @return $this 
+         * @return \Illuminate\Database\MySqlConnection 
          * @static 
          */ 
         public static function setSchemaGrammar($grammar)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::setSchemaGrammar($grammar);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->setSchemaGrammar($grammar);
         }
         
         /**
@@ -4224,20 +4574,22 @@ namespace Illuminate\Support\Facades {
         public static function getPostProcessor()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::getPostProcessor();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getPostProcessor();
         }
         
         /**
          * Set the query post processor used by the connection.
          *
          * @param \Illuminate\Database\Query\Processors\Processor $processor
-         * @return $this 
+         * @return \Illuminate\Database\MySqlConnection 
          * @static 
          */ 
         public static function setPostProcessor($processor)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::setPostProcessor($processor);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->setPostProcessor($processor);
         }
         
         /**
@@ -4249,20 +4601,22 @@ namespace Illuminate\Support\Facades {
         public static function getEventDispatcher()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::getEventDispatcher();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getEventDispatcher();
         }
         
         /**
          * Set the event dispatcher instance on the connection.
          *
          * @param \Illuminate\Contracts\Events\Dispatcher $events
-         * @return $this 
+         * @return \Illuminate\Database\MySqlConnection 
          * @static 
          */ 
         public static function setEventDispatcher($events)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::setEventDispatcher($events);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->setEventDispatcher($events);
         }
         
         /**
@@ -4274,7 +4628,8 @@ namespace Illuminate\Support\Facades {
         public static function unsetEventDispatcher()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            \Illuminate\Database\MySqlConnection::unsetEventDispatcher();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->unsetEventDispatcher();
         }
         
         /**
@@ -4286,7 +4641,8 @@ namespace Illuminate\Support\Facades {
         public static function pretending()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::pretending();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->pretending();
         }
         
         /**
@@ -4298,7 +4654,8 @@ namespace Illuminate\Support\Facades {
         public static function getQueryLog()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::getQueryLog();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getQueryLog();
         }
         
         /**
@@ -4310,7 +4667,8 @@ namespace Illuminate\Support\Facades {
         public static function flushQueryLog()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            \Illuminate\Database\MySqlConnection::flushQueryLog();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->flushQueryLog();
         }
         
         /**
@@ -4322,7 +4680,8 @@ namespace Illuminate\Support\Facades {
         public static function enableQueryLog()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            \Illuminate\Database\MySqlConnection::enableQueryLog();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->enableQueryLog();
         }
         
         /**
@@ -4334,7 +4693,8 @@ namespace Illuminate\Support\Facades {
         public static function disableQueryLog()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            \Illuminate\Database\MySqlConnection::disableQueryLog();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->disableQueryLog();
         }
         
         /**
@@ -4346,7 +4706,8 @@ namespace Illuminate\Support\Facades {
         public static function logging()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::logging();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->logging();
         }
         
         /**
@@ -4358,20 +4719,22 @@ namespace Illuminate\Support\Facades {
         public static function getDatabaseName()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::getDatabaseName();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getDatabaseName();
         }
         
         /**
          * Set the name of the connected database.
          *
          * @param string $database
-         * @return $this 
+         * @return \Illuminate\Database\MySqlConnection 
          * @static 
          */ 
         public static function setDatabaseName($database)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::setDatabaseName($database);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->setDatabaseName($database);
         }
         
         /**
@@ -4383,20 +4746,22 @@ namespace Illuminate\Support\Facades {
         public static function getTablePrefix()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::getTablePrefix();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->getTablePrefix();
         }
         
         /**
          * Set the table prefix in use by the connection.
          *
          * @param string $prefix
-         * @return $this 
+         * @return \Illuminate\Database\MySqlConnection 
          * @static 
          */ 
         public static function setTablePrefix($prefix)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::setTablePrefix($prefix);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->setTablePrefix($prefix);
         }
         
         /**
@@ -4409,7 +4774,8 @@ namespace Illuminate\Support\Facades {
         public static function withTablePrefix($grammar)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::withTablePrefix($grammar);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->withTablePrefix($grammar);
         }
         
         /**
@@ -4423,7 +4789,7 @@ namespace Illuminate\Support\Facades {
         public static function resolverFor($driver, $callback)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            \Illuminate\Database\MySqlConnection::resolverFor($driver, $callback);
+                        \Illuminate\Database\MySqlConnection::resolverFor($driver, $callback);
         }
         
         /**
@@ -4436,7 +4802,7 @@ namespace Illuminate\Support\Facades {
         public static function getResolver($driver)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::getResolver($driver);
+                        return \Illuminate\Database\MySqlConnection::getResolver($driver);
         }
         
         /**
@@ -4451,7 +4817,8 @@ namespace Illuminate\Support\Facades {
         public static function transaction($callback, $attempts = 1)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::transaction($callback, $attempts);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->transaction($callback, $attempts);
         }
         
         /**
@@ -4464,7 +4831,8 @@ namespace Illuminate\Support\Facades {
         public static function beginTransaction()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            \Illuminate\Database\MySqlConnection::beginTransaction();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->beginTransaction();
         }
         
         /**
@@ -4476,7 +4844,8 @@ namespace Illuminate\Support\Facades {
         public static function commit()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            \Illuminate\Database\MySqlConnection::commit();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->commit();
         }
         
         /**
@@ -4490,7 +4859,8 @@ namespace Illuminate\Support\Facades {
         public static function rollBack($toLevel = null)
         {
             //Method inherited from \Illuminate\Database\Connection            
-            \Illuminate\Database\MySqlConnection::rollBack($toLevel);
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        $instance->rollBack($toLevel);
         }
         
         /**
@@ -4502,7 +4872,8 @@ namespace Illuminate\Support\Facades {
         public static function transactionLevel()
         {
             //Method inherited from \Illuminate\Database\Connection            
-            return \Illuminate\Database\MySqlConnection::transactionLevel();
+                        /** @var \Illuminate\Database\MySqlConnection $instance */
+                        return $instance->transactionLevel();
         }
          
     }
@@ -4510,15 +4881,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static void listen(string|array $events, $listener)
-     * @method static bool hasListeners(string $eventName)
-     * @method static void subscribe(object|string $subscriber)
-     * @method static array|null until(string|object $event, $payload = [])
-     * @method static array|null dispatch(string|object $event, $payload = [], bool $halt = false)
-     * @method static void push(string $event, array $payload = [])
-     * @method static void flush(string $event)
-     * @method static void forget(string $event)
-     * @method static void forgetPushed()
      * @see \Illuminate\Events\Dispatcher
      */ 
     class Event {
@@ -4533,7 +4895,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function listen($events, $listener)
         {
-            \Illuminate\Events\Dispatcher::listen($events, $listener);
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        $instance->listen($events, $listener);
         }
         
         /**
@@ -4545,7 +4908,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasListeners($eventName)
         {
-            return \Illuminate\Events\Dispatcher::hasListeners($eventName);
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        return $instance->hasListeners($eventName);
         }
         
         /**
@@ -4558,7 +4922,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function push($event, $payload = array())
         {
-            \Illuminate\Events\Dispatcher::push($event, $payload);
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        $instance->push($event, $payload);
         }
         
         /**
@@ -4570,7 +4935,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flush($event)
         {
-            \Illuminate\Events\Dispatcher::flush($event);
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        $instance->flush($event);
         }
         
         /**
@@ -4582,7 +4948,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function subscribe($subscriber)
         {
-            \Illuminate\Events\Dispatcher::subscribe($subscriber);
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        $instance->subscribe($subscriber);
         }
         
         /**
@@ -4595,21 +4962,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function until($event, $payload = array())
         {
-            return \Illuminate\Events\Dispatcher::until($event, $payload);
-        }
-        
-        /**
-         * Fire an event and call the listeners.
-         *
-         * @param string|object $event
-         * @param mixed $payload
-         * @param bool $halt
-         * @return array|null 
-         * @static 
-         */ 
-        public static function fire($event, $payload = array(), $halt = false)
-        {
-            return \Illuminate\Events\Dispatcher::fire($event, $payload, $halt);
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        return $instance->until($event, $payload);
         }
         
         /**
@@ -4623,7 +4977,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function dispatch($event, $payload = array(), $halt = false)
         {
-            return \Illuminate\Events\Dispatcher::dispatch($event, $payload, $halt);
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        return $instance->dispatch($event, $payload, $halt);
         }
         
         /**
@@ -4635,7 +4990,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getListeners($eventName)
         {
-            return \Illuminate\Events\Dispatcher::getListeners($eventName);
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        return $instance->getListeners($eventName);
         }
         
         /**
@@ -4648,7 +5004,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function makeListener($listener, $wildcard = false)
         {
-            return \Illuminate\Events\Dispatcher::makeListener($listener, $wildcard);
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        return $instance->makeListener($listener, $wildcard);
         }
         
         /**
@@ -4661,7 +5018,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function createClassListener($listener, $wildcard = false)
         {
-            return \Illuminate\Events\Dispatcher::createClassListener($listener, $wildcard);
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        return $instance->createClassListener($listener, $wildcard);
         }
         
         /**
@@ -4673,7 +5031,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function forget($event)
         {
-            \Illuminate\Events\Dispatcher::forget($event);
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        $instance->forget($event);
         }
         
         /**
@@ -4684,19 +5043,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function forgetPushed()
         {
-            \Illuminate\Events\Dispatcher::forgetPushed();
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        $instance->forgetPushed();
         }
         
         /**
          * Set the queue resolver implementation.
          *
          * @param callable $resolver
-         * @return $this 
+         * @return \Illuminate\Events\Dispatcher 
          * @static 
          */ 
         public static function setQueueResolver($resolver)
         {
-            return \Illuminate\Events\Dispatcher::setQueueResolver($resolver);
+                        /** @var \Illuminate\Events\Dispatcher $instance */
+                        return $instance->setQueueResolver($resolver);
         }
         
         /**
@@ -4709,7 +5070,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertDispatched($event, $callback = null)
         {
-            \Illuminate\Support\Testing\Fakes\EventFake::assertDispatched($event, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
+                        $instance->assertDispatched($event, $callback);
         }
         
         /**
@@ -4722,7 +5084,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertDispatchedTimes($event, $times = 1)
         {
-            \Illuminate\Support\Testing\Fakes\EventFake::assertDispatchedTimes($event, $times);
+                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
+                        $instance->assertDispatchedTimes($event, $times);
         }
         
         /**
@@ -4735,7 +5098,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertNotDispatched($event, $callback = null)
         {
-            \Illuminate\Support\Testing\Fakes\EventFake::assertNotDispatched($event, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
+                        $instance->assertNotDispatched($event, $callback);
         }
         
         /**
@@ -4748,7 +5112,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function dispatched($event, $callback = null)
         {
-            return \Illuminate\Support\Testing\Fakes\EventFake::dispatched($event, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
+                        return $instance->dispatched($event, $callback);
         }
         
         /**
@@ -4760,7 +5125,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasDispatched($event)
         {
-            return \Illuminate\Support\Testing\Fakes\EventFake::hasDispatched($event);
+                        /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
+                        return $instance->hasDispatched($event);
         }
          
     }
@@ -4768,41 +5134,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static bool exists(string $path)
-     * @method static string get(string $path, bool $lock = false)
-     * @method static string sharedGet(string $path)
-     * @method static mixed getRequire(string $path)
-     * @method static mixed requireOnce(string $file)
-     * @method static string hash(string $path)
-     * @method static int put(string $path, string $contents, bool $lock = false)
-     * @method static int prepend(string $path, string $data)
-     * @method static int append(string $path, string $data)
-     * @method static mixed chmod(string $path, int $mode = null)
-     * @method static bool delete(string|array $paths)
-     * @method static bool move(string $path, string $target)
-     * @method static bool copy(string $path, string $target)
-     * @method static void link(string $target, string $link)
-     * @method static string name(string $path)
-     * @method static string basename(string $path)
-     * @method static string dirname(string $path)
-     * @method static string extension(string $path)
-     * @method static string type(string $path)
-     * @method static string|false mimeType(string $path)
-     * @method static int size(string $path)
-     * @method static int lastModified(string $path)
-     * @method static bool isDirectory(string $directory)
-     * @method static bool isReadable(string $path)
-     * @method static bool isWritable(string $path)
-     * @method static bool isFile(string $file)
-     * @method static array glob(string $pattern, int $flags = 0)
-     * @method static \Symfony\Component\Finder\SplFileInfo[] files(string $directory, bool $hidden = false)
-     * @method static \Symfony\Component\Finder\SplFileInfo[] allFiles(string $directory, bool $hidden = false)
-     * @method static array directories(string $directory)
-     * @method static bool makeDirectory(string $path, int $mode = 0755,  bool $recursive = false, bool $force = false)
-     * @method static bool moveDirectory(string $from, string $to, bool $overwrite = false)
-     * @method static bool copyDirectory(string $directory, string $destination, int $options = null)
-     * @method static bool deleteDirectory(string $directory, bool $preserve = false)
-     * @method static bool cleanDirectory(string $directory)
      * @see \Illuminate\Filesystem\Filesystem
      */ 
     class File {
@@ -4816,7 +5147,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function exists($path)
         {
-            return \Illuminate\Filesystem\Filesystem::exists($path);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->exists($path);
         }
         
         /**
@@ -4830,7 +5162,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function get($path, $lock = false)
         {
-            return \Illuminate\Filesystem\Filesystem::get($path, $lock);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->get($path, $lock);
         }
         
         /**
@@ -4842,7 +5175,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function sharedGet($path)
         {
-            return \Illuminate\Filesystem\Filesystem::sharedGet($path);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->sharedGet($path);
         }
         
         /**
@@ -4855,7 +5189,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getRequire($path)
         {
-            return \Illuminate\Filesystem\Filesystem::getRequire($path);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->getRequire($path);
         }
         
         /**
@@ -4867,7 +5202,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function requireOnce($file)
         {
-            return \Illuminate\Filesystem\Filesystem::requireOnce($file);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->requireOnce($file);
         }
         
         /**
@@ -4879,7 +5215,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hash($path)
         {
-            return \Illuminate\Filesystem\Filesystem::hash($path);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->hash($path);
         }
         
         /**
@@ -4888,12 +5225,27 @@ namespace Illuminate\Support\Facades {
          * @param string $path
          * @param string $contents
          * @param bool $lock
-         * @return int 
+         * @return int|bool 
          * @static 
          */ 
         public static function put($path, $contents, $lock = false)
         {
-            return \Illuminate\Filesystem\Filesystem::put($path, $contents, $lock);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->put($path, $contents, $lock);
+        }
+        
+        /**
+         * Write the contents of a file, replacing it atomically if it already exists.
+         *
+         * @param string $path
+         * @param string $content
+         * @return void 
+         * @static 
+         */ 
+        public static function replace($path, $content)
+        {
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        $instance->replace($path, $content);
         }
         
         /**
@@ -4906,7 +5258,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function prepend($path, $data)
         {
-            return \Illuminate\Filesystem\Filesystem::prepend($path, $data);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->prepend($path, $data);
         }
         
         /**
@@ -4919,7 +5272,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function append($path, $data)
         {
-            return \Illuminate\Filesystem\Filesystem::append($path, $data);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->append($path, $data);
         }
         
         /**
@@ -4932,7 +5286,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function chmod($path, $mode = null)
         {
-            return \Illuminate\Filesystem\Filesystem::chmod($path, $mode);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->chmod($path, $mode);
         }
         
         /**
@@ -4944,7 +5299,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function delete($paths)
         {
-            return \Illuminate\Filesystem\Filesystem::delete($paths);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->delete($paths);
         }
         
         /**
@@ -4957,7 +5313,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function move($path, $target)
         {
-            return \Illuminate\Filesystem\Filesystem::move($path, $target);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->move($path, $target);
         }
         
         /**
@@ -4970,7 +5327,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function copy($path, $target)
         {
-            return \Illuminate\Filesystem\Filesystem::copy($path, $target);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->copy($path, $target);
         }
         
         /**
@@ -4983,7 +5341,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function link($target, $link)
         {
-            \Illuminate\Filesystem\Filesystem::link($target, $link);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        $instance->link($target, $link);
         }
         
         /**
@@ -4995,7 +5354,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function name($path)
         {
-            return \Illuminate\Filesystem\Filesystem::name($path);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->name($path);
         }
         
         /**
@@ -5007,7 +5367,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function basename($path)
         {
-            return \Illuminate\Filesystem\Filesystem::basename($path);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->basename($path);
         }
         
         /**
@@ -5019,7 +5380,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function dirname($path)
         {
-            return \Illuminate\Filesystem\Filesystem::dirname($path);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->dirname($path);
         }
         
         /**
@@ -5031,7 +5393,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function extension($path)
         {
-            return \Illuminate\Filesystem\Filesystem::extension($path);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->extension($path);
         }
         
         /**
@@ -5043,7 +5406,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function type($path)
         {
-            return \Illuminate\Filesystem\Filesystem::type($path);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->type($path);
         }
         
         /**
@@ -5055,7 +5419,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function mimeType($path)
         {
-            return \Illuminate\Filesystem\Filesystem::mimeType($path);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->mimeType($path);
         }
         
         /**
@@ -5067,7 +5432,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function size($path)
         {
-            return \Illuminate\Filesystem\Filesystem::size($path);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->size($path);
         }
         
         /**
@@ -5079,7 +5445,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function lastModified($path)
         {
-            return \Illuminate\Filesystem\Filesystem::lastModified($path);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->lastModified($path);
         }
         
         /**
@@ -5091,7 +5458,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function isDirectory($directory)
         {
-            return \Illuminate\Filesystem\Filesystem::isDirectory($directory);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->isDirectory($directory);
         }
         
         /**
@@ -5103,7 +5471,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function isReadable($path)
         {
-            return \Illuminate\Filesystem\Filesystem::isReadable($path);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->isReadable($path);
         }
         
         /**
@@ -5115,7 +5484,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function isWritable($path)
         {
-            return \Illuminate\Filesystem\Filesystem::isWritable($path);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->isWritable($path);
         }
         
         /**
@@ -5127,7 +5497,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function isFile($file)
         {
-            return \Illuminate\Filesystem\Filesystem::isFile($file);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->isFile($file);
         }
         
         /**
@@ -5140,7 +5511,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function glob($pattern, $flags = 0)
         {
-            return \Illuminate\Filesystem\Filesystem::glob($pattern, $flags);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->glob($pattern, $flags);
         }
         
         /**
@@ -5153,7 +5525,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function files($directory, $hidden = false)
         {
-            return \Illuminate\Filesystem\Filesystem::files($directory, $hidden);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->files($directory, $hidden);
         }
         
         /**
@@ -5166,7 +5539,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function allFiles($directory, $hidden = false)
         {
-            return \Illuminate\Filesystem\Filesystem::allFiles($directory, $hidden);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->allFiles($directory, $hidden);
         }
         
         /**
@@ -5178,7 +5552,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function directories($directory)
         {
-            return \Illuminate\Filesystem\Filesystem::directories($directory);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->directories($directory);
         }
         
         /**
@@ -5193,7 +5568,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function makeDirectory($path, $mode = 493, $recursive = false, $force = false)
         {
-            return \Illuminate\Filesystem\Filesystem::makeDirectory($path, $mode, $recursive, $force);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->makeDirectory($path, $mode, $recursive, $force);
         }
         
         /**
@@ -5207,7 +5583,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function moveDirectory($from, $to, $overwrite = false)
         {
-            return \Illuminate\Filesystem\Filesystem::moveDirectory($from, $to, $overwrite);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->moveDirectory($from, $to, $overwrite);
         }
         
         /**
@@ -5221,7 +5598,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function copyDirectory($directory, $destination, $options = null)
         {
-            return \Illuminate\Filesystem\Filesystem::copyDirectory($directory, $destination, $options);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->copyDirectory($directory, $destination, $options);
         }
         
         /**
@@ -5236,7 +5614,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function deleteDirectory($directory, $preserve = false)
         {
-            return \Illuminate\Filesystem\Filesystem::deleteDirectory($directory, $preserve);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->deleteDirectory($directory, $preserve);
         }
         
         /**
@@ -5248,7 +5627,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function deleteDirectories($directory)
         {
-            return \Illuminate\Filesystem\Filesystem::deleteDirectories($directory);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->deleteDirectories($directory);
         }
         
         /**
@@ -5260,7 +5640,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function cleanDirectory($directory)
         {
-            return \Illuminate\Filesystem\Filesystem::cleanDirectory($directory);
+                        /** @var \Illuminate\Filesystem\Filesystem $instance */
+                        return $instance->cleanDirectory($directory);
         }
         
         /**
@@ -5273,20 +5654,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function macro($name, $macro)
         {
-            \Illuminate\Filesystem\Filesystem::macro($name, $macro);
+                        \Illuminate\Filesystem\Filesystem::macro($name, $macro);
         }
         
         /**
          * Mix another object into the class.
          *
          * @param object $mixin
+         * @param bool $replace
          * @return void 
          * @throws \ReflectionException
          * @static 
          */ 
-        public static function mixin($mixin)
+        public static function mixin($mixin, $replace = true)
         {
-            \Illuminate\Filesystem\Filesystem::mixin($mixin);
+                        \Illuminate\Filesystem\Filesystem::mixin($mixin, $replace);
         }
         
         /**
@@ -5298,7 +5680,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasMacro($name)
         {
-            return \Illuminate\Filesystem\Filesystem::hasMacro($name);
+                        return \Illuminate\Filesystem\Filesystem::hasMacro($name);
         }
          
     }
@@ -5306,19 +5688,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static bool has(string $ability)
-     * @method static \Illuminate\Contracts\Auth\Access\Gate define(string $ability, callable|string $callback)
-     * @method static \Illuminate\Contracts\Auth\Access\Gate policy(string $class, string $policy)
-     * @method static \Illuminate\Contracts\Auth\Access\Gate before(callable $callback)
-     * @method static \Illuminate\Contracts\Auth\Access\Gate after(callable $callback)
-     * @method static bool allows(string $ability, array|mixed $arguments = [])
-     * @method static bool denies(string $ability, array|mixed $arguments = [])
-     * @method static bool check(iterable|string $abilities, array|mixed $arguments = [])
-     * @method static bool any(iterable|string $abilities, array|mixed $arguments = [])
-     * @method static \Illuminate\Auth\Access\Response authorize(string $ability, array|mixed $arguments = [])
-     * @method static mixed getPolicyFor(object|string $class)
-     * @method static \Illuminate\Contracts\Auth\Access\Gate forUser(\Illuminate\Contracts\Auth\Authenticatable|mixed $user)
-     * @method static array abilities()
      * @see \Illuminate\Contracts\Auth\Access\Gate
      */ 
     class Gate {
@@ -5332,7 +5701,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function has($ability)
         {
-            return \Illuminate\Auth\Access\Gate::has($ability);
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->has($ability);
         }
         
         /**
@@ -5340,13 +5710,14 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $ability
          * @param callable|string $callback
-         * @return $this 
+         * @return \Illuminate\Auth\Access\Gate 
          * @throws \InvalidArgumentException
          * @static 
          */ 
         public static function define($ability, $callback)
         {
-            return \Illuminate\Auth\Access\Gate::define($ability, $callback);
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->define($ability, $callback);
         }
         
         /**
@@ -5355,12 +5726,13 @@ namespace Illuminate\Support\Facades {
          * @param string $name
          * @param string $class
          * @param array|null $abilities
-         * @return $this 
+         * @return \Illuminate\Auth\Access\Gate 
          * @static 
          */ 
         public static function resource($name, $class, $abilities = null)
         {
-            return \Illuminate\Auth\Access\Gate::resource($name, $class, $abilities);
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->resource($name, $class, $abilities);
         }
         
         /**
@@ -5368,36 +5740,39 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $class
          * @param string $policy
-         * @return $this 
+         * @return \Illuminate\Auth\Access\Gate 
          * @static 
          */ 
         public static function policy($class, $policy)
         {
-            return \Illuminate\Auth\Access\Gate::policy($class, $policy);
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->policy($class, $policy);
         }
         
         /**
          * Register a callback to run before all Gate checks.
          *
          * @param callable $callback
-         * @return $this 
+         * @return \Illuminate\Auth\Access\Gate 
          * @static 
          */ 
         public static function before($callback)
         {
-            return \Illuminate\Auth\Access\Gate::before($callback);
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->before($callback);
         }
         
         /**
          * Register a callback to run after all Gate checks.
          *
          * @param callable $callback
-         * @return $this 
+         * @return \Illuminate\Auth\Access\Gate 
          * @static 
          */ 
         public static function after($callback)
         {
-            return \Illuminate\Auth\Access\Gate::after($callback);
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->after($callback);
         }
         
         /**
@@ -5410,7 +5785,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function allows($ability, $arguments = array())
         {
-            return \Illuminate\Auth\Access\Gate::allows($ability, $arguments);
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->allows($ability, $arguments);
         }
         
         /**
@@ -5423,7 +5799,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function denies($ability, $arguments = array())
         {
-            return \Illuminate\Auth\Access\Gate::denies($ability, $arguments);
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->denies($ability, $arguments);
         }
         
         /**
@@ -5436,7 +5813,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function check($abilities, $arguments = array())
         {
-            return \Illuminate\Auth\Access\Gate::check($abilities, $arguments);
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->check($abilities, $arguments);
         }
         
         /**
@@ -5449,7 +5827,22 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function any($abilities, $arguments = array())
         {
-            return \Illuminate\Auth\Access\Gate::any($abilities, $arguments);
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->any($abilities, $arguments);
+        }
+        
+        /**
+         * Determine if all of the given abilities should be denied for the current user.
+         *
+         * @param \Illuminate\Auth\Access\iterable|string $abilities
+         * @param array|mixed $arguments
+         * @return bool 
+         * @static 
+         */ 
+        public static function none($abilities, $arguments = array())
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->none($abilities, $arguments);
         }
         
         /**
@@ -5463,7 +5856,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function authorize($ability, $arguments = array())
         {
-            return \Illuminate\Auth\Access\Gate::authorize($ability, $arguments);
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->authorize($ability, $arguments);
         }
         
         /**
@@ -5476,7 +5870,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function raw($ability, $arguments = array())
         {
-            return \Illuminate\Auth\Access\Gate::raw($ability, $arguments);
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->raw($ability, $arguments);
         }
         
         /**
@@ -5488,7 +5883,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getPolicyFor($class)
         {
-            return \Illuminate\Auth\Access\Gate::getPolicyFor($class);
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->getPolicyFor($class);
+        }
+        
+        /**
+         * Specify a callback to be used to guess policy names.
+         *
+         * @param callable $callback
+         * @return \Illuminate\Auth\Access\Gate 
+         * @static 
+         */ 
+        public static function guessPolicyNamesUsing($callback)
+        {
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->guessPolicyNamesUsing($callback);
         }
         
         /**
@@ -5500,7 +5909,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function resolvePolicy($class)
         {
-            return \Illuminate\Auth\Access\Gate::resolvePolicy($class);
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->resolvePolicy($class);
         }
         
         /**
@@ -5512,7 +5922,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function forUser($user)
         {
-            return \Illuminate\Auth\Access\Gate::forUser($user);
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->forUser($user);
         }
         
         /**
@@ -5523,7 +5934,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function abilities()
         {
-            return \Illuminate\Auth\Access\Gate::abilities();
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->abilities();
         }
         
         /**
@@ -5534,7 +5946,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function policies()
         {
-            return \Illuminate\Auth\Access\Gate::policies();
+                        /** @var \Illuminate\Auth\Access\Gate $instance */
+                        return $instance->policies();
         }
          
     }
@@ -5542,10 +5955,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static array info(string $hashedValue)
-     * @method static string make(string $value, array $options = [])
-     * @method static bool check(string $value, string $hashedValue, array $options = [])
-     * @method static bool needsRehash(string $hashedValue, array $options = [])
      * @see \Illuminate\Hashing\HashManager
      */ 
     class Hash {
@@ -5558,7 +5967,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function createBcryptDriver()
         {
-            return \Illuminate\Hashing\HashManager::createBcryptDriver();
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->createBcryptDriver();
         }
         
         /**
@@ -5569,7 +5979,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function createArgonDriver()
         {
-            return \Illuminate\Hashing\HashManager::createArgonDriver();
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->createArgonDriver();
         }
         
         /**
@@ -5580,7 +5991,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function createArgon2idDriver()
         {
-            return \Illuminate\Hashing\HashManager::createArgon2idDriver();
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->createArgon2idDriver();
         }
         
         /**
@@ -5592,7 +6004,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function info($hashedValue)
         {
-            return \Illuminate\Hashing\HashManager::info($hashedValue);
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->info($hashedValue);
         }
         
         /**
@@ -5605,7 +6018,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function make($value, $options = array())
         {
-            return \Illuminate\Hashing\HashManager::make($value, $options);
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->make($value, $options);
         }
         
         /**
@@ -5619,7 +6033,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function check($value, $hashedValue, $options = array())
         {
-            return \Illuminate\Hashing\HashManager::check($value, $hashedValue, $options);
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->check($value, $hashedValue, $options);
         }
         
         /**
@@ -5632,7 +6047,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function needsRehash($hashedValue, $options = array())
         {
-            return \Illuminate\Hashing\HashManager::needsRehash($hashedValue, $options);
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->needsRehash($hashedValue, $options);
         }
         
         /**
@@ -5643,7 +6059,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDefaultDriver()
         {
-            return \Illuminate\Hashing\HashManager::getDefaultDriver();
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->getDefaultDriver();
         }
         
         /**
@@ -5657,7 +6074,8 @@ namespace Illuminate\Support\Facades {
         public static function driver($driver = null)
         {
             //Method inherited from \Illuminate\Support\Manager            
-            return \Illuminate\Hashing\HashManager::driver($driver);
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->driver($driver);
         }
         
         /**
@@ -5665,13 +6083,14 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return $this 
+         * @return \Illuminate\Hashing\HashManager 
          * @static 
          */ 
         public static function extend($driver, $callback)
         {
             //Method inherited from \Illuminate\Support\Manager            
-            return \Illuminate\Hashing\HashManager::extend($driver, $callback);
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->extend($driver, $callback);
         }
         
         /**
@@ -5683,7 +6102,8 @@ namespace Illuminate\Support\Facades {
         public static function getDrivers()
         {
             //Method inherited from \Illuminate\Support\Manager            
-            return \Illuminate\Hashing\HashManager::getDrivers();
+                        /** @var \Illuminate\Hashing\HashManager $instance */
+                        return $instance->getDrivers();
         }
          
     }
@@ -5691,44 +6111,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static \Illuminate\Http\Request instance()
-     * @method static string method()
-     * @method static string root()
-     * @method static string url()
-     * @method static string fullUrl()
-     * @method static string fullUrlWithQuery(array $query)
-     * @method static string path()
-     * @method static string decodedPath()
-     * @method static string|null segment(int $index, string|null $default = null)
-     * @method static array segments()
-     * @method static bool is(...$patterns)
-     * @method static bool routeIs(...$patterns)
-     * @method static bool fullUrlIs(...$patterns)
-     * @method static bool ajax()
-     * @method static bool pjax()
-     * @method static bool secure()
-     * @method static string ip()
-     * @method static array ips()
-     * @method static string userAgent()
-     * @method static \Illuminate\Http\Request merge(array $input)
-     * @method static \Illuminate\Http\Request replace(array $input)
-     * @method static \Symfony\Component\HttpFoundation\ParameterBag|mixed json(string $key = null, $default = null)
-     * @method static \Illuminate\Session\Store session()
-     * @method static \Illuminate\Session\Store|null getSession()
-     * @method static void setLaravelSession(\Illuminate\Contracts\Session\Session $session)
-     * @method static mixed user(string|null $guard = null)
-     * @method static \Illuminate\Routing\Route|object|string route(string|null $param = null)
-     * @method static string fingerprint()
-     * @method static \Illuminate\Http\Request setJson(\Symfony\Component\HttpFoundation\ParameterBag $json)
-     * @method static \Closure getUserResolver()
-     * @method static \Illuminate\Http\Request setUserResolver(\Closure $callback)
-     * @method static \Closure getRouteResolver()
-     * @method static \Illuminate\Http\Request setRouteResolver(\Closure $callback)
-     * @method static array toArray()
-     * @method static bool offsetExists(string $offset)
-     * @method static mixed offsetGet(string $offset)
-     * @method static void offsetSet(string $offset, $value)
-     * @method static void offsetUnset(string $offset)
      * @see \Illuminate\Http\Request
      */ 
     class Input {
@@ -5741,18 +6123,19 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function capture()
         {
-            return \Illuminate\Http\Request::capture();
+                        return \Illuminate\Http\Request::capture();
         }
         
         /**
          * Return the Request instance.
          *
-         * @return $this 
+         * @return \Illuminate\Http\Request 
          * @static 
          */ 
         public static function instance()
         {
-            return \Illuminate\Http\Request::instance();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->instance();
         }
         
         /**
@@ -5763,7 +6146,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function method()
         {
-            return \Illuminate\Http\Request::method();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->method();
         }
         
         /**
@@ -5774,7 +6158,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function root()
         {
-            return \Illuminate\Http\Request::root();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->root();
         }
         
         /**
@@ -5785,7 +6170,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function url()
         {
-            return \Illuminate\Http\Request::url();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->url();
         }
         
         /**
@@ -5796,7 +6182,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function fullUrl()
         {
-            return \Illuminate\Http\Request::fullUrl();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->fullUrl();
         }
         
         /**
@@ -5808,7 +6195,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function fullUrlWithQuery($query)
         {
-            return \Illuminate\Http\Request::fullUrlWithQuery($query);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->fullUrlWithQuery($query);
         }
         
         /**
@@ -5819,7 +6207,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function path()
         {
-            return \Illuminate\Http\Request::path();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->path();
         }
         
         /**
@@ -5830,7 +6219,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function decodedPath()
         {
-            return \Illuminate\Http\Request::decodedPath();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->decodedPath();
         }
         
         /**
@@ -5843,7 +6233,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function segment($index, $default = null)
         {
-            return \Illuminate\Http\Request::segment($index, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->segment($index, $default);
         }
         
         /**
@@ -5854,7 +6245,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function segments()
         {
-            return \Illuminate\Http\Request::segments();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->segments();
         }
         
         /**
@@ -5866,7 +6258,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function is($patterns = null)
         {
-            return \Illuminate\Http\Request::is($patterns);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->is($patterns);
         }
         
         /**
@@ -5878,7 +6271,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function routeIs($patterns = null)
         {
-            return \Illuminate\Http\Request::routeIs($patterns);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->routeIs($patterns);
         }
         
         /**
@@ -5890,7 +6284,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function fullUrlIs($patterns = null)
         {
-            return \Illuminate\Http\Request::fullUrlIs($patterns);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->fullUrlIs($patterns);
         }
         
         /**
@@ -5901,7 +6296,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function ajax()
         {
-            return \Illuminate\Http\Request::ajax();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->ajax();
         }
         
         /**
@@ -5912,7 +6308,20 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function pjax()
         {
-            return \Illuminate\Http\Request::pjax();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->pjax();
+        }
+        
+        /**
+         * Determine if the request is the result of an prefetch call.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function prefetch()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->prefetch();
         }
         
         /**
@@ -5923,7 +6332,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function secure()
         {
-            return \Illuminate\Http\Request::secure();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->secure();
         }
         
         /**
@@ -5934,7 +6344,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function ip()
         {
-            return \Illuminate\Http\Request::ip();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->ip();
         }
         
         /**
@@ -5945,7 +6356,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function ips()
         {
-            return \Illuminate\Http\Request::ips();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->ips();
         }
         
         /**
@@ -5956,7 +6368,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function userAgent()
         {
-            return \Illuminate\Http\Request::userAgent();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->userAgent();
         }
         
         /**
@@ -5968,7 +6381,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function merge($input)
         {
-            return \Illuminate\Http\Request::merge($input);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->merge($input);
         }
         
         /**
@@ -5980,7 +6394,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function replace($input)
         {
-            return \Illuminate\Http\Request::replace($input);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->replace($input);
         }
         
         /**
@@ -5995,7 +6410,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function get($key, $default = null)
         {
-            return \Illuminate\Http\Request::get($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->get($key, $default);
         }
         
         /**
@@ -6008,7 +6424,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function json($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::json($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->json($key, $default);
         }
         
         /**
@@ -6021,19 +6438,19 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function createFrom($from, $to = null)
         {
-            return \Illuminate\Http\Request::createFrom($from, $to);
+                        return \Illuminate\Http\Request::createFrom($from, $to);
         }
         
         /**
          * Create an Illuminate request from a Symfony instance.
          *
          * @param \Symfony\Component\HttpFoundation\Request $request
-         * @return \Illuminate\Http\Request 
+         * @return static 
          * @static 
          */ 
         public static function createFromBase($request)
         {
-            return \Illuminate\Http\Request::createFromBase($request);
+                        return \Illuminate\Http\Request::createFromBase($request);
         }
         
         /**
@@ -6050,7 +6467,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function duplicate($query = null, $request = null, $attributes = null, $cookies = null, $files = null, $server = null)
         {
-            return \Illuminate\Http\Request::duplicate($query, $request, $attributes, $cookies, $files, $server);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->duplicate($query, $request, $attributes, $cookies, $files, $server);
         }
         
         /**
@@ -6062,7 +6480,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function session()
         {
-            return \Illuminate\Http\Request::session();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->session();
         }
         
         /**
@@ -6073,7 +6492,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getSession()
         {
-            return \Illuminate\Http\Request::getSession();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getSession();
         }
         
         /**
@@ -6085,7 +6505,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setLaravelSession($session)
         {
-            \Illuminate\Http\Request::setLaravelSession($session);
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->setLaravelSession($session);
         }
         
         /**
@@ -6097,7 +6518,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function user($guard = null)
         {
-            return \Illuminate\Http\Request::user($guard);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->user($guard);
         }
         
         /**
@@ -6110,7 +6532,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function route($param = null, $default = null)
         {
-            return \Illuminate\Http\Request::route($param, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->route($param, $default);
         }
         
         /**
@@ -6122,19 +6545,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function fingerprint()
         {
-            return \Illuminate\Http\Request::fingerprint();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->fingerprint();
         }
         
         /**
          * Set the JSON payload for the request.
          *
          * @param \Symfony\Component\HttpFoundation\ParameterBag $json
-         * @return $this 
+         * @return \Illuminate\Http\Request 
          * @static 
          */ 
         public static function setJson($json)
         {
-            return \Illuminate\Http\Request::setJson($json);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setJson($json);
         }
         
         /**
@@ -6145,19 +6570,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getUserResolver()
         {
-            return \Illuminate\Http\Request::getUserResolver();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getUserResolver();
         }
         
         /**
          * Set the user resolver callback.
          *
          * @param \Closure $callback
-         * @return $this 
+         * @return \Illuminate\Http\Request 
          * @static 
          */ 
         public static function setUserResolver($callback)
         {
-            return \Illuminate\Http\Request::setUserResolver($callback);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setUserResolver($callback);
         }
         
         /**
@@ -6168,19 +6595,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getRouteResolver()
         {
-            return \Illuminate\Http\Request::getRouteResolver();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getRouteResolver();
         }
         
         /**
          * Set the route resolver callback.
          *
          * @param \Closure $callback
-         * @return $this 
+         * @return \Illuminate\Http\Request 
          * @static 
          */ 
         public static function setRouteResolver($callback)
         {
-            return \Illuminate\Http\Request::setRouteResolver($callback);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setRouteResolver($callback);
         }
         
         /**
@@ -6191,7 +6620,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function toArray()
         {
-            return \Illuminate\Http\Request::toArray();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->toArray();
         }
         
         /**
@@ -6203,7 +6633,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function offsetExists($offset)
         {
-            return \Illuminate\Http\Request::offsetExists($offset);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->offsetExists($offset);
         }
         
         /**
@@ -6215,7 +6646,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function offsetGet($offset)
         {
-            return \Illuminate\Http\Request::offsetGet($offset);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->offsetGet($offset);
         }
         
         /**
@@ -6228,7 +6660,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function offsetSet($offset, $value)
         {
-            \Illuminate\Http\Request::offsetSet($offset, $value);
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->offsetSet($offset, $value);
         }
         
         /**
@@ -6240,7 +6673,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function offsetUnset($offset)
         {
-            \Illuminate\Http\Request::offsetUnset($offset);
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->offsetUnset($offset);
         }
         
         /**
@@ -6260,7 +6694,8 @@ namespace Illuminate\Support\Facades {
         public static function initialize($query = array(), $request = array(), $attributes = array(), $cookies = array(), $files = array(), $server = array(), $content = null)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::initialize($query, $request, $attributes, $cookies, $files, $server, $content);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->initialize($query, $request, $attributes, $cookies, $files, $server, $content);
         }
         
         /**
@@ -6272,7 +6707,7 @@ namespace Illuminate\Support\Facades {
         public static function createFromGlobals()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::createFromGlobals();
+                        return \Illuminate\Http\Request::createFromGlobals();
         }
         
         /**
@@ -6294,7 +6729,7 @@ namespace Illuminate\Support\Facades {
         public static function create($uri, $method = 'GET', $parameters = array(), $cookies = array(), $files = array(), $server = array(), $content = null)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::create($uri, $method, $parameters, $cookies, $files, $server, $content);
+                        return \Illuminate\Http\Request::create($uri, $method, $parameters, $cookies, $files, $server, $content);
         }
         
         /**
@@ -6310,7 +6745,7 @@ namespace Illuminate\Support\Facades {
         public static function setFactory($callable)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setFactory($callable);
+                        return \Illuminate\Http\Request::setFactory($callable);
         }
         
         /**
@@ -6324,7 +6759,8 @@ namespace Illuminate\Support\Facades {
         public static function overrideGlobals()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::overrideGlobals();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->overrideGlobals();
         }
         
         /**
@@ -6340,7 +6776,7 @@ namespace Illuminate\Support\Facades {
         public static function setTrustedProxies($proxies, $trustedHeaderSet)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setTrustedProxies($proxies, $trustedHeaderSet);
+                        return \Illuminate\Http\Request::setTrustedProxies($proxies, $trustedHeaderSet);
         }
         
         /**
@@ -6352,7 +6788,7 @@ namespace Illuminate\Support\Facades {
         public static function getTrustedProxies()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getTrustedProxies();
+                        return \Illuminate\Http\Request::getTrustedProxies();
         }
         
         /**
@@ -6364,7 +6800,7 @@ namespace Illuminate\Support\Facades {
         public static function getTrustedHeaderSet()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getTrustedHeaderSet();
+                        return \Illuminate\Http\Request::getTrustedHeaderSet();
         }
         
         /**
@@ -6378,7 +6814,7 @@ namespace Illuminate\Support\Facades {
         public static function setTrustedHosts($hostPatterns)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setTrustedHosts($hostPatterns);
+                        return \Illuminate\Http\Request::setTrustedHosts($hostPatterns);
         }
         
         /**
@@ -6390,7 +6826,7 @@ namespace Illuminate\Support\Facades {
         public static function getTrustedHosts()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getTrustedHosts();
+                        return \Illuminate\Http\Request::getTrustedHosts();
         }
         
         /**
@@ -6406,7 +6842,7 @@ namespace Illuminate\Support\Facades {
         public static function normalizeQueryString($qs)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::normalizeQueryString($qs);
+                        return \Illuminate\Http\Request::normalizeQueryString($qs);
         }
         
         /**
@@ -6425,7 +6861,7 @@ namespace Illuminate\Support\Facades {
         public static function enableHttpMethodParameterOverride()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::enableHttpMethodParameterOverride();
+                        return \Illuminate\Http\Request::enableHttpMethodParameterOverride();
         }
         
         /**
@@ -6437,7 +6873,7 @@ namespace Illuminate\Support\Facades {
         public static function getHttpMethodParameterOverride()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getHttpMethodParameterOverride();
+                        return \Illuminate\Http\Request::getHttpMethodParameterOverride();
         }
         
         /**
@@ -6450,7 +6886,8 @@ namespace Illuminate\Support\Facades {
         public static function hasPreviousSession()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::hasPreviousSession();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasPreviousSession();
         }
         
         /**
@@ -6466,7 +6903,8 @@ namespace Illuminate\Support\Facades {
         public static function hasSession()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::hasSession();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasSession();
         }
         
         /**
@@ -6478,7 +6916,8 @@ namespace Illuminate\Support\Facades {
         public static function setSession($session)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setSession($session);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setSession($session);
         }
         
         /**
@@ -6490,7 +6929,8 @@ namespace Illuminate\Support\Facades {
         public static function setSessionFactory($factory)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setSessionFactory($factory);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setSessionFactory($factory);
         }
         
         /**
@@ -6509,7 +6949,8 @@ namespace Illuminate\Support\Facades {
         public static function getClientIps()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getClientIps();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getClientIps();
         }
         
         /**
@@ -6529,7 +6970,8 @@ namespace Illuminate\Support\Facades {
         public static function getClientIp()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getClientIp();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getClientIp();
         }
         
         /**
@@ -6541,7 +6983,8 @@ namespace Illuminate\Support\Facades {
         public static function getScriptName()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getScriptName();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getScriptName();
         }
         
         /**
@@ -6562,7 +7005,8 @@ namespace Illuminate\Support\Facades {
         public static function getPathInfo()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getPathInfo();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getPathInfo();
         }
         
         /**
@@ -6581,7 +7025,8 @@ namespace Illuminate\Support\Facades {
         public static function getBasePath()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getBasePath();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getBasePath();
         }
         
         /**
@@ -6598,7 +7043,8 @@ namespace Illuminate\Support\Facades {
         public static function getBaseUrl()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getBaseUrl();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getBaseUrl();
         }
         
         /**
@@ -6610,7 +7056,8 @@ namespace Illuminate\Support\Facades {
         public static function getScheme()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getScheme();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getScheme();
         }
         
         /**
@@ -6627,7 +7074,8 @@ namespace Illuminate\Support\Facades {
         public static function getPort()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getPort();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getPort();
         }
         
         /**
@@ -6639,7 +7087,8 @@ namespace Illuminate\Support\Facades {
         public static function getUser()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getUser();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getUser();
         }
         
         /**
@@ -6651,7 +7100,8 @@ namespace Illuminate\Support\Facades {
         public static function getPassword()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getPassword();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getPassword();
         }
         
         /**
@@ -6663,7 +7113,8 @@ namespace Illuminate\Support\Facades {
         public static function getUserInfo()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getUserInfo();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getUserInfo();
         }
         
         /**
@@ -6677,7 +7128,8 @@ namespace Illuminate\Support\Facades {
         public static function getHttpHost()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getHttpHost();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getHttpHost();
         }
         
         /**
@@ -6689,7 +7141,8 @@ namespace Illuminate\Support\Facades {
         public static function getRequestUri()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getRequestUri();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getRequestUri();
         }
         
         /**
@@ -6704,7 +7157,8 @@ namespace Illuminate\Support\Facades {
         public static function getSchemeAndHttpHost()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getSchemeAndHttpHost();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getSchemeAndHttpHost();
         }
         
         /**
@@ -6717,7 +7171,8 @@ namespace Illuminate\Support\Facades {
         public static function getUri()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getUri();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getUri();
         }
         
         /**
@@ -6730,7 +7185,8 @@ namespace Illuminate\Support\Facades {
         public static function getUriForPath($path)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getUriForPath($path);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getUriForPath($path);
         }
         
         /**
@@ -6755,7 +7211,8 @@ namespace Illuminate\Support\Facades {
         public static function getRelativeUriForPath($path)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getRelativeUriForPath($path);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getRelativeUriForPath($path);
         }
         
         /**
@@ -6770,7 +7227,8 @@ namespace Illuminate\Support\Facades {
         public static function getQueryString()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getQueryString();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getQueryString();
         }
         
         /**
@@ -6787,7 +7245,8 @@ namespace Illuminate\Support\Facades {
         public static function isSecure()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::isSecure();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isSecure();
         }
         
         /**
@@ -6805,7 +7264,8 @@ namespace Illuminate\Support\Facades {
         public static function getHost()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getHost();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getHost();
         }
         
         /**
@@ -6817,7 +7277,8 @@ namespace Illuminate\Support\Facades {
         public static function setMethod($method)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setMethod($method);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setMethod($method);
         }
         
         /**
@@ -6838,7 +7299,8 @@ namespace Illuminate\Support\Facades {
         public static function getMethod()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getMethod();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getMethod();
         }
         
         /**
@@ -6851,7 +7313,8 @@ namespace Illuminate\Support\Facades {
         public static function getRealMethod()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getRealMethod();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getRealMethod();
         }
         
         /**
@@ -6864,7 +7327,8 @@ namespace Illuminate\Support\Facades {
         public static function getMimeType($format)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getMimeType($format);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getMimeType($format);
         }
         
         /**
@@ -6877,7 +7341,7 @@ namespace Illuminate\Support\Facades {
         public static function getMimeTypes($format)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getMimeTypes($format);
+                        return \Illuminate\Http\Request::getMimeTypes($format);
         }
         
         /**
@@ -6890,7 +7354,8 @@ namespace Illuminate\Support\Facades {
         public static function getFormat($mimeType)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getFormat($mimeType);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getFormat($mimeType);
         }
         
         /**
@@ -6903,7 +7368,8 @@ namespace Illuminate\Support\Facades {
         public static function setFormat($format, $mimeTypes)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setFormat($format, $mimeTypes);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setFormat($format, $mimeTypes);
         }
         
         /**
@@ -6922,7 +7388,8 @@ namespace Illuminate\Support\Facades {
         public static function getRequestFormat($default = 'html')
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getRequestFormat($default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getRequestFormat($default);
         }
         
         /**
@@ -6934,7 +7401,8 @@ namespace Illuminate\Support\Facades {
         public static function setRequestFormat($format)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setRequestFormat($format);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setRequestFormat($format);
         }
         
         /**
@@ -6946,7 +7414,8 @@ namespace Illuminate\Support\Facades {
         public static function getContentType()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getContentType();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getContentType();
         }
         
         /**
@@ -6958,7 +7427,8 @@ namespace Illuminate\Support\Facades {
         public static function setDefaultLocale($locale)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setDefaultLocale($locale);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setDefaultLocale($locale);
         }
         
         /**
@@ -6970,7 +7440,8 @@ namespace Illuminate\Support\Facades {
         public static function getDefaultLocale()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getDefaultLocale();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getDefaultLocale();
         }
         
         /**
@@ -6982,7 +7453,8 @@ namespace Illuminate\Support\Facades {
         public static function setLocale($locale)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setLocale($locale);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setLocale($locale);
         }
         
         /**
@@ -6994,7 +7466,8 @@ namespace Illuminate\Support\Facades {
         public static function getLocale()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getLocale();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getLocale();
         }
         
         /**
@@ -7007,7 +7480,8 @@ namespace Illuminate\Support\Facades {
         public static function isMethod($method)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::isMethod($method);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isMethod($method);
         }
         
         /**
@@ -7021,7 +7495,8 @@ namespace Illuminate\Support\Facades {
         public static function isMethodSafe()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::isMethodSafe();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isMethodSafe();
         }
         
         /**
@@ -7033,20 +7508,22 @@ namespace Illuminate\Support\Facades {
         public static function isMethodIdempotent()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::isMethodIdempotent();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isMethodIdempotent();
         }
         
         /**
          * Checks whether the method is cacheable or not.
          *
          * @see https://tools.ietf.org/html/rfc7231#section-4.2.3
-         * @return bool 
+         * @return bool True for GET and HEAD, false otherwise
          * @static 
          */ 
         public static function isMethodCacheable()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::isMethodCacheable();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isMethodCacheable();
         }
         
         /**
@@ -7064,7 +7541,8 @@ namespace Illuminate\Support\Facades {
         public static function getProtocolVersion()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getProtocolVersion();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getProtocolVersion();
         }
         
         /**
@@ -7078,7 +7556,8 @@ namespace Illuminate\Support\Facades {
         public static function getContent($asResource = false)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getContent($asResource);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getContent($asResource);
         }
         
         /**
@@ -7090,7 +7569,8 @@ namespace Illuminate\Support\Facades {
         public static function getETags()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getETags();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getETags();
         }
         
         /**
@@ -7102,7 +7582,8 @@ namespace Illuminate\Support\Facades {
         public static function isNoCache()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::isNoCache();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isNoCache();
         }
         
         /**
@@ -7115,7 +7596,8 @@ namespace Illuminate\Support\Facades {
         public static function getPreferredLanguage($locales = null)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getPreferredLanguage($locales);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getPreferredLanguage($locales);
         }
         
         /**
@@ -7127,7 +7609,8 @@ namespace Illuminate\Support\Facades {
         public static function getLanguages()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getLanguages();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getLanguages();
         }
         
         /**
@@ -7139,7 +7622,8 @@ namespace Illuminate\Support\Facades {
         public static function getCharsets()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getCharsets();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getCharsets();
         }
         
         /**
@@ -7151,7 +7635,8 @@ namespace Illuminate\Support\Facades {
         public static function getEncodings()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getEncodings();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getEncodings();
         }
         
         /**
@@ -7163,7 +7648,8 @@ namespace Illuminate\Support\Facades {
         public static function getAcceptableContentTypes()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getAcceptableContentTypes();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getAcceptableContentTypes();
         }
         
         /**
@@ -7179,7 +7665,8 @@ namespace Illuminate\Support\Facades {
         public static function isXmlHttpRequest()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::isXmlHttpRequest();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isXmlHttpRequest();
         }
         
         /**
@@ -7194,7 +7681,8 @@ namespace Illuminate\Support\Facades {
         public static function isFromTrustedProxy()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::isFromTrustedProxy();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isFromTrustedProxy();
         }
         
         /**
@@ -7207,7 +7695,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function matchesType($actual, $type)
         {
-            return \Illuminate\Http\Request::matchesType($actual, $type);
+                        return \Illuminate\Http\Request::matchesType($actual, $type);
         }
         
         /**
@@ -7218,7 +7706,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function isJson()
         {
-            return \Illuminate\Http\Request::isJson();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isJson();
         }
         
         /**
@@ -7229,7 +7718,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function expectsJson()
         {
-            return \Illuminate\Http\Request::expectsJson();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->expectsJson();
         }
         
         /**
@@ -7240,7 +7730,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function wantsJson()
         {
-            return \Illuminate\Http\Request::wantsJson();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->wantsJson();
         }
         
         /**
@@ -7252,7 +7743,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function accepts($contentTypes)
         {
-            return \Illuminate\Http\Request::accepts($contentTypes);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->accepts($contentTypes);
         }
         
         /**
@@ -7264,7 +7756,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function prefers($contentTypes)
         {
-            return \Illuminate\Http\Request::prefers($contentTypes);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->prefers($contentTypes);
         }
         
         /**
@@ -7275,7 +7768,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function acceptsAnyContentType()
         {
-            return \Illuminate\Http\Request::acceptsAnyContentType();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->acceptsAnyContentType();
         }
         
         /**
@@ -7286,7 +7780,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function acceptsJson()
         {
-            return \Illuminate\Http\Request::acceptsJson();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->acceptsJson();
         }
         
         /**
@@ -7297,7 +7792,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function acceptsHtml()
         {
-            return \Illuminate\Http\Request::acceptsHtml();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->acceptsHtml();
         }
         
         /**
@@ -7309,7 +7805,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function format($default = 'html')
         {
-            return \Illuminate\Http\Request::format($default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->format($default);
         }
         
         /**
@@ -7322,7 +7819,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function old($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::old($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->old($key, $default);
         }
         
         /**
@@ -7333,7 +7831,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flash()
         {
-            \Illuminate\Http\Request::flash();
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->flash();
         }
         
         /**
@@ -7345,7 +7844,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flashOnly($keys)
         {
-            \Illuminate\Http\Request::flashOnly($keys);
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->flashOnly($keys);
         }
         
         /**
@@ -7357,7 +7857,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flashExcept($keys)
         {
-            \Illuminate\Http\Request::flashExcept($keys);
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->flashExcept($keys);
         }
         
         /**
@@ -7368,7 +7869,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flush()
         {
-            \Illuminate\Http\Request::flush();
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->flush();
         }
         
         /**
@@ -7381,7 +7883,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function server($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::server($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->server($key, $default);
         }
         
         /**
@@ -7393,7 +7896,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasHeader($key)
         {
-            return \Illuminate\Http\Request::hasHeader($key);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasHeader($key);
         }
         
         /**
@@ -7406,7 +7910,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function header($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::header($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->header($key, $default);
         }
         
         /**
@@ -7417,7 +7922,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function bearerToken()
         {
-            return \Illuminate\Http\Request::bearerToken();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->bearerToken();
         }
         
         /**
@@ -7429,7 +7935,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function exists($key)
         {
-            return \Illuminate\Http\Request::exists($key);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->exists($key);
         }
         
         /**
@@ -7441,7 +7948,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function has($key)
         {
-            return \Illuminate\Http\Request::has($key);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->has($key);
         }
         
         /**
@@ -7453,7 +7961,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasAny($keys)
         {
-            return \Illuminate\Http\Request::hasAny($keys);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasAny($keys);
         }
         
         /**
@@ -7465,7 +7974,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function filled($key)
         {
-            return \Illuminate\Http\Request::filled($key);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->filled($key);
         }
         
         /**
@@ -7477,7 +7987,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function anyFilled($keys)
         {
-            return \Illuminate\Http\Request::anyFilled($keys);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->anyFilled($keys);
         }
         
         /**
@@ -7488,7 +7999,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function keys()
         {
-            return \Illuminate\Http\Request::keys();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->keys();
         }
         
         /**
@@ -7500,7 +8012,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function all($keys = null)
         {
-            return \Illuminate\Http\Request::all($keys);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->all($keys);
         }
         
         /**
@@ -7513,7 +8026,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function input($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::input($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->input($key, $default);
         }
         
         /**
@@ -7525,7 +8039,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function only($keys)
         {
-            return \Illuminate\Http\Request::only($keys);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->only($keys);
         }
         
         /**
@@ -7537,7 +8052,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function except($keys)
         {
-            return \Illuminate\Http\Request::except($keys);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->except($keys);
         }
         
         /**
@@ -7550,7 +8066,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function query($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::query($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->query($key, $default);
         }
         
         /**
@@ -7563,7 +8080,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function post($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::post($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->post($key, $default);
         }
         
         /**
@@ -7575,7 +8093,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasCookie($key)
         {
-            return \Illuminate\Http\Request::hasCookie($key);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasCookie($key);
         }
         
         /**
@@ -7588,7 +8107,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function cookie($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::cookie($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->cookie($key, $default);
         }
         
         /**
@@ -7599,7 +8119,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function allFiles()
         {
-            return \Illuminate\Http\Request::allFiles();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->allFiles();
         }
         
         /**
@@ -7611,7 +8132,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasFile($key)
         {
-            return \Illuminate\Http\Request::hasFile($key);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasFile($key);
         }
         
         /**
@@ -7619,12 +8141,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $key
          * @param mixed $default
-         * @return \Illuminate\Http\UploadedFile|array|null 
+         * @return \Illuminate\Http\UploadedFile|\Illuminate\Http\UploadedFile[]|array|null 
          * @static 
          */ 
         public static function file($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::file($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->file($key, $default);
         }
         
         /**
@@ -7637,20 +8160,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function macro($name, $macro)
         {
-            \Illuminate\Http\Request::macro($name, $macro);
+                        \Illuminate\Http\Request::macro($name, $macro);
         }
         
         /**
          * Mix another object into the class.
          *
          * @param object $mixin
+         * @param bool $replace
          * @return void 
          * @throws \ReflectionException
          * @static 
          */ 
-        public static function mixin($mixin)
+        public static function mixin($mixin, $replace = true)
         {
-            \Illuminate\Http\Request::mixin($mixin);
+                        \Illuminate\Http\Request::mixin($mixin, $replace);
         }
         
         /**
@@ -7662,7 +8186,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasMacro($name)
         {
-            return \Illuminate\Http\Request::hasMacro($name);
+                        return \Illuminate\Http\Request::hasMacro($name);
         }
         
         /**
@@ -7672,7 +8196,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function validate($rules, $params = null)
         {
-            return \Illuminate\Http\Request::validate($rules, $params);
+                        return \Illuminate\Http\Request::validate($rules, $params);
         }
         
         /**
@@ -7680,9 +8204,9 @@ namespace Illuminate\Support\Facades {
          *
          * @static 
          */ 
-        public static function hasValidSignature()
+        public static function hasValidSignature($absolute = true)
         {
-            return \Illuminate\Http\Request::hasValidSignature();
+                        return \Illuminate\Http\Request::hasValidSignature($absolute);
         }
          
     }
@@ -7690,11 +8214,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static mixed trans(string $key, array $replace = [], string $locale = null)
-     * @method static string transChoice(string $key, int|array|\Countable $number, array $replace = [], string $locale = null)
-     * @method static string getLocale()
-     * @method static void setLocale(string $locale)
-     * @method static string|array|null get(string $key, array $replace = [], string $locale = null, bool $fallback = true)
      * @see \Illuminate\Translation\Translator
      */ 
     class Lang {
@@ -7709,7 +8228,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasForLocale($key, $locale = null)
         {
-            return \Illuminate\Translation\Translator::hasForLocale($key, $locale);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->hasForLocale($key, $locale);
         }
         
         /**
@@ -7723,7 +8243,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function has($key, $locale = null, $fallback = true)
         {
-            return \Illuminate\Translation\Translator::has($key, $locale, $fallback);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->has($key, $locale, $fallback);
         }
         
         /**
@@ -7732,12 +8253,13 @@ namespace Illuminate\Support\Facades {
          * @param string $key
          * @param array $replace
          * @param string $locale
-         * @return string|array|null 
+         * @return string|array 
          * @static 
          */ 
         public static function trans($key, $replace = array(), $locale = null)
         {
-            return \Illuminate\Translation\Translator::trans($key, $replace, $locale);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->trans($key, $replace, $locale);
         }
         
         /**
@@ -7747,12 +8269,13 @@ namespace Illuminate\Support\Facades {
          * @param array $replace
          * @param string|null $locale
          * @param bool $fallback
-         * @return string|array|null 
+         * @return string|array 
          * @static 
          */ 
         public static function get($key, $replace = array(), $locale = null, $fallback = true)
         {
-            return \Illuminate\Translation\Translator::get($key, $replace, $locale, $fallback);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->get($key, $replace, $locale, $fallback);
         }
         
         /**
@@ -7761,12 +8284,13 @@ namespace Illuminate\Support\Facades {
          * @param string $key
          * @param array $replace
          * @param string $locale
-         * @return string|array|null 
+         * @return string|array 
          * @static 
          */ 
         public static function getFromJson($key, $replace = array(), $locale = null)
         {
-            return \Illuminate\Translation\Translator::getFromJson($key, $replace, $locale);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->getFromJson($key, $replace, $locale);
         }
         
         /**
@@ -7781,7 +8305,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function transChoice($key, $number, $replace = array(), $locale = null)
         {
-            return \Illuminate\Translation\Translator::transChoice($key, $number, $replace, $locale);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->transChoice($key, $number, $replace, $locale);
         }
         
         /**
@@ -7796,7 +8321,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function choice($key, $number, $replace = array(), $locale = null)
         {
-            return \Illuminate\Translation\Translator::choice($key, $number, $replace, $locale);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->choice($key, $number, $replace, $locale);
         }
         
         /**
@@ -7810,7 +8336,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function addLines($lines, $locale, $namespace = '*')
         {
-            \Illuminate\Translation\Translator::addLines($lines, $locale, $namespace);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->addLines($lines, $locale, $namespace);
         }
         
         /**
@@ -7824,7 +8351,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function load($namespace, $group, $locale)
         {
-            \Illuminate\Translation\Translator::load($namespace, $group, $locale);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->load($namespace, $group, $locale);
         }
         
         /**
@@ -7837,7 +8365,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function addNamespace($namespace, $hint)
         {
-            \Illuminate\Translation\Translator::addNamespace($namespace, $hint);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->addNamespace($namespace, $hint);
         }
         
         /**
@@ -7849,7 +8378,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function addJsonPath($path)
         {
-            \Illuminate\Translation\Translator::addJsonPath($path);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->addJsonPath($path);
         }
         
         /**
@@ -7861,7 +8391,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function parseKey($key)
         {
-            return \Illuminate\Translation\Translator::parseKey($key);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->parseKey($key);
         }
         
         /**
@@ -7872,7 +8403,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getSelector()
         {
-            return \Illuminate\Translation\Translator::getSelector();
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->getSelector();
         }
         
         /**
@@ -7884,7 +8416,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setSelector($selector)
         {
-            \Illuminate\Translation\Translator::setSelector($selector);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->setSelector($selector);
         }
         
         /**
@@ -7895,7 +8428,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getLoader()
         {
-            return \Illuminate\Translation\Translator::getLoader();
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->getLoader();
         }
         
         /**
@@ -7906,7 +8440,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function locale()
         {
-            return \Illuminate\Translation\Translator::locale();
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->locale();
         }
         
         /**
@@ -7917,7 +8452,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getLocale()
         {
-            return \Illuminate\Translation\Translator::getLocale();
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->getLocale();
         }
         
         /**
@@ -7929,7 +8465,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setLocale($locale)
         {
-            \Illuminate\Translation\Translator::setLocale($locale);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->setLocale($locale);
         }
         
         /**
@@ -7940,7 +8477,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getFallback()
         {
-            return \Illuminate\Translation\Translator::getFallback();
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        return $instance->getFallback();
         }
         
         /**
@@ -7952,7 +8490,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setFallback($fallback)
         {
-            \Illuminate\Translation\Translator::setFallback($fallback);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->setFallback($fallback);
         }
         
         /**
@@ -7964,7 +8503,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setLoaded($loaded)
         {
-            \Illuminate\Translation\Translator::setLoaded($loaded);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->setLoaded($loaded);
         }
         
         /**
@@ -7978,7 +8518,8 @@ namespace Illuminate\Support\Facades {
         public static function setParsedKey($key, $parsed)
         {
             //Method inherited from \Illuminate\Support\NamespacedItemResolver            
-            \Illuminate\Translation\Translator::setParsedKey($key, $parsed);
+                        /** @var \Illuminate\Translation\Translator $instance */
+                        $instance->setParsedKey($key, $parsed);
         }
         
         /**
@@ -7991,20 +8532,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function macro($name, $macro)
         {
-            \Illuminate\Translation\Translator::macro($name, $macro);
+                        \Illuminate\Translation\Translator::macro($name, $macro);
         }
         
         /**
          * Mix another object into the class.
          *
          * @param object $mixin
+         * @param bool $replace
          * @return void 
          * @throws \ReflectionException
          * @static 
          */ 
-        public static function mixin($mixin)
+        public static function mixin($mixin, $replace = true)
         {
-            \Illuminate\Translation\Translator::mixin($mixin);
+                        \Illuminate\Translation\Translator::mixin($mixin, $replace);
         }
         
         /**
@@ -8016,7 +8558,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasMacro($name)
         {
-            return \Illuminate\Translation\Translator::hasMacro($name);
+                        return \Illuminate\Translation\Translator::hasMacro($name);
         }
          
     }
@@ -8024,17 +8566,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static void emergency(string $message, array $context = [])
-     * @method static void alert(string $message, array $context = [])
-     * @method static void critical(string $message, array $context = [])
-     * @method static void error(string $message, array $context = [])
-     * @method static void warning(string $message, array $context = [])
-     * @method static void notice(string $message, array $context = [])
-     * @method static void info(string $message, array $context = [])
-     * @method static void debug(string $message, array $context = [])
-     * @method static void log($level, string $message, array $context = [])
-     * @method static mixed channel(string $channel = null)
-     * @method static \Psr\Log\LoggerInterface stack(array $channels, string $channel = null)
      * @see \Illuminate\Log\Logger
      */ 
     class Log {
@@ -8044,12 +8575,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $message The log message
          * @param array $context The log context
-         * @return Boolean Whether the record has been processed
+         * @return bool Whether the record has been processed
          * @static 
          */ 
         public static function debug($message, $context = array())
         {
-            return \Monolog\Logger::debug($message, $context);
+                        /** @var \Monolog\Logger $instance */
+                        return $instance->addDebug($message, $context);
         }
         
         /**
@@ -8057,12 +8589,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $message The log message
          * @param array $context The log context
-         * @return Boolean Whether the record has been processed
+         * @return bool Whether the record has been processed
          * @static 
          */ 
         public static function info($message, $context = array())
         {
-            return \Monolog\Logger::info($message, $context);
+                        /** @var \Monolog\Logger $instance */
+                        return $instance->addInfo($message, $context);
         }
         
         /**
@@ -8070,12 +8603,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $message The log message
          * @param array $context The log context
-         * @return Boolean Whether the record has been processed
+         * @return bool Whether the record has been processed
          * @static 
          */ 
         public static function notice($message, $context = array())
         {
-            return \Monolog\Logger::notice($message, $context);
+                        /** @var \Monolog\Logger $instance */
+                        return $instance->addNotice($message, $context);
         }
         
         /**
@@ -8083,12 +8617,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $message The log message
          * @param array $context The log context
-         * @return Boolean Whether the record has been processed
+         * @return bool Whether the record has been processed
          * @static 
          */ 
         public static function warning($message, $context = array())
         {
-            return \Monolog\Logger::warning($message, $context);
+                        /** @var \Monolog\Logger $instance */
+                        return $instance->addWarning($message, $context);
         }
         
         /**
@@ -8096,12 +8631,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $message The log message
          * @param array $context The log context
-         * @return Boolean Whether the record has been processed
+         * @return bool Whether the record has been processed
          * @static 
          */ 
         public static function error($message, $context = array())
         {
-            return \Monolog\Logger::error($message, $context);
+                        /** @var \Monolog\Logger $instance */
+                        return $instance->addError($message, $context);
         }
         
         /**
@@ -8109,12 +8645,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $message The log message
          * @param array $context The log context
-         * @return Boolean Whether the record has been processed
+         * @return bool Whether the record has been processed
          * @static 
          */ 
         public static function critical($message, $context = array())
         {
-            return \Monolog\Logger::critical($message, $context);
+                        /** @var \Monolog\Logger $instance */
+                        return $instance->addCritical($message, $context);
         }
         
         /**
@@ -8122,12 +8659,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $message The log message
          * @param array $context The log context
-         * @return Boolean Whether the record has been processed
+         * @return bool Whether the record has been processed
          * @static 
          */ 
         public static function alert($message, $context = array())
         {
-            return \Monolog\Logger::alert($message, $context);
+                        /** @var \Monolog\Logger $instance */
+                        return $instance->addAlert($message, $context);
         }
         
         /**
@@ -8135,12 +8673,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $message The log message
          * @param array $context The log context
-         * @return Boolean Whether the record has been processed
+         * @return bool Whether the record has been processed
          * @static 
          */ 
         public static function emergency($message, $context = array())
         {
-            return \Monolog\Logger::emergency($message, $context);
+                        /** @var \Monolog\Logger $instance */
+                        return $instance->addEmergency($message, $context);
         }
         
         /**
@@ -8153,7 +8692,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function stack($channels, $channel = null)
         {
-            return \Illuminate\Log\LogManager::stack($channels, $channel);
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        return $instance->stack($channels, $channel);
         }
         
         /**
@@ -8165,7 +8705,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function channel($channel = null)
         {
-            return \Illuminate\Log\LogManager::channel($channel);
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        return $instance->channel($channel);
         }
         
         /**
@@ -8177,7 +8718,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function driver($driver = null)
         {
-            return \Illuminate\Log\LogManager::driver($driver);
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        return $instance->driver($driver);
         }
         
         /**
@@ -8188,7 +8730,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDefaultDriver()
         {
-            return \Illuminate\Log\LogManager::getDefaultDriver();
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        return $instance->getDefaultDriver();
         }
         
         /**
@@ -8200,7 +8743,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setDefaultDriver($name)
         {
-            \Illuminate\Log\LogManager::setDefaultDriver($name);
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        $instance->setDefaultDriver($name);
         }
         
         /**
@@ -8208,12 +8752,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return $this 
+         * @return \Illuminate\Log\LogManager 
          * @static 
          */ 
         public static function extend($driver, $callback)
         {
-            return \Illuminate\Log\LogManager::extend($driver, $callback);
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        return $instance->extend($driver, $callback);
         }
         
         /**
@@ -8227,7 +8772,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function log($level, $message, $context = array())
         {
-            \Illuminate\Log\LogManager::log($level, $message, $context);
+                        /** @var \Illuminate\Log\LogManager $instance */
+                        $instance->log($level, $message, $context);
         }
          
     }
@@ -8235,23 +8781,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static \Illuminate\Mail\PendingMail to($users)
-     * @method static \Illuminate\Mail\PendingMail bcc($users)
-     * @method static void raw(string $text, $callback)
-     * @method static void send(string|array|\Illuminate\Contracts\Mail\Mailable $view, array $data = [], \Closure|string $callback = null)
-     * @method static array failures()
-     * @method static mixed queue(string|array|\Illuminate\Contracts\Mail\Mailable $view, string $queue = null)
-     * @method static mixed later(\DateTimeInterface|\DateInterval|int $delay, string|array|\Illuminate\Contracts\Mail\Mailable $view, string $queue = null)
-     * @method static void assertSent(string $mailable, \Closure|string $callback = null)
-     * @method static void assertNotSent(string $mailable, \Closure|string $callback = null)
-     * @method static void assertNothingSent()
-     * @method static void assertQueued(string $mailable, \Closure|string $callback = null)
-     * @method static void assertNotQueued(string $mailable, \Closure|string $callback = null)
-     * @method static void assertNothingQueued()
-     * @method static \Illuminate\Support\Collection sent(string $mailable, \Closure|string $callback = null)
-     * @method static bool hasSent(string $mailable)
-     * @method static \Illuminate\Support\Collection queued(string $mailable, \Closure|string $callback = null)
-     * @method static bool hasQueued(string $mailable)
      * @see \Illuminate\Mail\Mailer
      * @see \Illuminate\Support\Testing\Fakes\MailFake
      */ 
@@ -8267,7 +8796,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function alwaysFrom($address, $name = null)
         {
-            \Illuminate\Mail\Mailer::alwaysFrom($address, $name);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        $instance->alwaysFrom($address, $name);
         }
         
         /**
@@ -8280,7 +8810,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function alwaysReplyTo($address, $name = null)
         {
-            \Illuminate\Mail\Mailer::alwaysReplyTo($address, $name);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        $instance->alwaysReplyTo($address, $name);
         }
         
         /**
@@ -8293,7 +8824,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function alwaysTo($address, $name = null)
         {
-            \Illuminate\Mail\Mailer::alwaysTo($address, $name);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        $instance->alwaysTo($address, $name);
         }
         
         /**
@@ -8305,7 +8837,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function to($users)
         {
-            return \Illuminate\Mail\Mailer::to($users);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->to($users);
         }
         
         /**
@@ -8317,7 +8850,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function cc($users)
         {
-            return \Illuminate\Mail\Mailer::cc($users);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->cc($users);
         }
         
         /**
@@ -8329,7 +8863,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function bcc($users)
         {
-            return \Illuminate\Mail\Mailer::bcc($users);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->bcc($users);
         }
         
         /**
@@ -8342,11 +8877,12 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function html($html, $callback)
         {
-            \Illuminate\Mail\Mailer::html($html, $callback);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        $instance->html($html, $callback);
         }
         
         /**
-         * Send a new message when only a raw text part.
+         * Send a new message with only a raw text part.
          *
          * @param string $text
          * @param mixed $callback
@@ -8355,11 +8891,12 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function raw($text, $callback)
         {
-            \Illuminate\Mail\Mailer::raw($text, $callback);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        $instance->raw($text, $callback);
         }
         
         /**
-         * Send a new message when only a plain part.
+         * Send a new message with only a plain part.
          *
          * @param string $view
          * @param array $data
@@ -8369,7 +8906,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function plain($view, $data, $callback)
         {
-            \Illuminate\Mail\Mailer::plain($view, $data, $callback);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        $instance->plain($view, $data, $callback);
         }
         
         /**
@@ -8382,7 +8920,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function render($view, $data = array())
         {
-            return \Illuminate\Mail\Mailer::render($view, $data);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->render($view, $data);
         }
         
         /**
@@ -8396,13 +8935,14 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function send($view, $data = array(), $callback = null)
         {
-            \Illuminate\Mail\Mailer::send($view, $data, $callback);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        $instance->send($view, $data, $callback);
         }
         
         /**
          * Queue a new e-mail message for sending.
          *
-         * @param string|array|\Illuminate\Contracts\Mail\Mailable $view
+         * @param \Illuminate\Contracts\Mail\Mailable $view
          * @param string|null $queue
          * @return mixed 
          * @throws \InvalidArgumentException
@@ -8410,20 +8950,22 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function queue($view, $queue = null)
         {
-            return \Illuminate\Mail\Mailer::queue($view, $queue);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->queue($view, $queue);
         }
         
         /**
          * Queue a new e-mail message for sending on the given queue.
          *
          * @param string $queue
-         * @param string|array $view
+         * @param \Illuminate\Contracts\Mail\Mailable $view
          * @return mixed 
          * @static 
          */ 
         public static function onQueue($queue, $view)
         {
-            return \Illuminate\Mail\Mailer::onQueue($queue, $view);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->onQueue($queue, $view);
         }
         
         /**
@@ -8432,20 +8974,21 @@ namespace Illuminate\Support\Facades {
          * This method didn't match rest of framework's "onQueue" phrasing. Added "onQueue".
          *
          * @param string $queue
-         * @param string|array $view
+         * @param \Illuminate\Contracts\Mail\Mailable $view
          * @return mixed 
          * @static 
          */ 
         public static function queueOn($queue, $view)
         {
-            return \Illuminate\Mail\Mailer::queueOn($queue, $view);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->queueOn($queue, $view);
         }
         
         /**
          * Queue a new e-mail message for sending after (n) seconds.
          *
          * @param \DateTimeInterface|\DateInterval|int $delay
-         * @param string|array|\Illuminate\Contracts\Mail\Mailable $view
+         * @param \Illuminate\Contracts\Mail\Mailable $view
          * @param string|null $queue
          * @return mixed 
          * @throws \InvalidArgumentException
@@ -8453,7 +8996,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function later($delay, $view, $queue = null)
         {
-            return \Illuminate\Mail\Mailer::later($delay, $view, $queue);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->later($delay, $view, $queue);
         }
         
         /**
@@ -8461,24 +9005,26 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $queue
          * @param \DateTimeInterface|\DateInterval|int $delay
-         * @param string|array $view
+         * @param \Illuminate\Contracts\Mail\Mailable $view
          * @return mixed 
          * @static 
          */ 
         public static function laterOn($queue, $delay, $view)
         {
-            return \Illuminate\Mail\Mailer::laterOn($queue, $delay, $view);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->laterOn($queue, $delay, $view);
         }
         
         /**
-         * Get the view factory instance.
+         * Get the array of failed recipients.
          *
-         * @return \Illuminate\Contracts\View\Factory 
+         * @return array 
          * @static 
          */ 
-        public static function getViewFactory()
+        public static function failures()
         {
-            return \Illuminate\Mail\Mailer::getViewFactory();
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->failures();
         }
         
         /**
@@ -8489,18 +9035,20 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getSwiftMailer()
         {
-            return \Illuminate\Mail\Mailer::getSwiftMailer();
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->getSwiftMailer();
         }
         
         /**
-         * Get the array of failed recipients.
+         * Get the view factory instance.
          *
-         * @return array 
+         * @return \Illuminate\Contracts\View\Factory 
          * @static 
          */ 
-        public static function failures()
+        public static function getViewFactory()
         {
-            return \Illuminate\Mail\Mailer::failures();
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->getViewFactory();
         }
         
         /**
@@ -8512,19 +9060,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setSwiftMailer($swift)
         {
-            \Illuminate\Mail\Mailer::setSwiftMailer($swift);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        $instance->setSwiftMailer($swift);
         }
         
         /**
          * Set the queue manager instance.
          *
          * @param \Illuminate\Contracts\Queue\Factory $queue
-         * @return $this 
+         * @return \Illuminate\Mail\Mailer 
          * @static 
          */ 
         public static function setQueue($queue)
         {
-            return \Illuminate\Mail\Mailer::setQueue($queue);
+                        /** @var \Illuminate\Mail\Mailer $instance */
+                        return $instance->setQueue($queue);
         }
         
         /**
@@ -8537,20 +9087,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function macro($name, $macro)
         {
-            \Illuminate\Mail\Mailer::macro($name, $macro);
+                        \Illuminate\Mail\Mailer::macro($name, $macro);
         }
         
         /**
          * Mix another object into the class.
          *
          * @param object $mixin
+         * @param bool $replace
          * @return void 
          * @throws \ReflectionException
          * @static 
          */ 
-        public static function mixin($mixin)
+        public static function mixin($mixin, $replace = true)
         {
-            \Illuminate\Mail\Mailer::mixin($mixin);
+                        \Illuminate\Mail\Mailer::mixin($mixin, $replace);
         }
         
         /**
@@ -8562,7 +9113,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasMacro($name)
         {
-            return \Illuminate\Mail\Mailer::hasMacro($name);
+                        return \Illuminate\Mail\Mailer::hasMacro($name);
         }
         
         /**
@@ -8575,7 +9126,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertSent($mailable, $callback = null)
         {
-            \Illuminate\Support\Testing\Fakes\MailFake::assertSent($mailable, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        $instance->assertSent($mailable, $callback);
         }
         
         /**
@@ -8588,7 +9140,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertNotSent($mailable, $callback = null)
         {
-            \Illuminate\Support\Testing\Fakes\MailFake::assertNotSent($mailable, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        $instance->assertNotSent($mailable, $callback);
         }
         
         /**
@@ -8599,7 +9152,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertNothingSent()
         {
-            \Illuminate\Support\Testing\Fakes\MailFake::assertNothingSent();
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        $instance->assertNothingSent();
         }
         
         /**
@@ -8612,7 +9166,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertQueued($mailable, $callback = null)
         {
-            \Illuminate\Support\Testing\Fakes\MailFake::assertQueued($mailable, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        $instance->assertQueued($mailable, $callback);
         }
         
         /**
@@ -8625,7 +9180,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertNotQueued($mailable, $callback = null)
         {
-            \Illuminate\Support\Testing\Fakes\MailFake::assertNotQueued($mailable, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        $instance->assertNotQueued($mailable, $callback);
         }
         
         /**
@@ -8636,7 +9192,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertNothingQueued()
         {
-            \Illuminate\Support\Testing\Fakes\MailFake::assertNothingQueued();
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        $instance->assertNothingQueued();
         }
         
         /**
@@ -8649,7 +9206,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function sent($mailable, $callback = null)
         {
-            return \Illuminate\Support\Testing\Fakes\MailFake::sent($mailable, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        return $instance->sent($mailable, $callback);
         }
         
         /**
@@ -8661,7 +9219,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasSent($mailable)
         {
-            return \Illuminate\Support\Testing\Fakes\MailFake::hasSent($mailable);
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        return $instance->hasSent($mailable);
         }
         
         /**
@@ -8674,7 +9233,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function queued($mailable, $callback = null)
         {
-            return \Illuminate\Support\Testing\Fakes\MailFake::queued($mailable, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        return $instance->queued($mailable, $callback);
         }
         
         /**
@@ -8686,7 +9246,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasQueued($mailable)
         {
-            return \Illuminate\Support\Testing\Fakes\MailFake::hasQueued($mailable);
+                        /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
+                        return $instance->hasQueued($mailable);
         }
          
     }
@@ -8711,7 +9272,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function broker($name = null)
         {
-            return \Illuminate\Auth\Passwords\PasswordBrokerManager::broker($name);
+                        /** @var \Illuminate\Auth\Passwords\PasswordBrokerManager $instance */
+                        return $instance->broker($name);
         }
         
         /**
@@ -8722,7 +9284,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDefaultDriver()
         {
-            return \Illuminate\Auth\Passwords\PasswordBrokerManager::getDefaultDriver();
+                        /** @var \Illuminate\Auth\Passwords\PasswordBrokerManager $instance */
+                        return $instance->getDefaultDriver();
         }
         
         /**
@@ -8734,7 +9297,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setDefaultDriver($name)
         {
-            \Illuminate\Auth\Passwords\PasswordBrokerManager::setDefaultDriver($name);
+                        /** @var \Illuminate\Auth\Passwords\PasswordBrokerManager $instance */
+                        $instance->setDefaultDriver($name);
         }
          
     }
@@ -8742,16 +9306,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static int size(string $queue = null)
-     * @method static mixed push(string|object $job, string $data = '', $queue = null)
-     * @method static mixed pushOn(string $queue, string|object $job, $data = '')
-     * @method static mixed pushRaw(string $payload, string $queue = null, array $options = [])
-     * @method static mixed later(\DateTimeInterface|\DateInterval|int $delay, string|object $job, $data = '', string $queue = null)
-     * @method static mixed laterOn(string $queue, \DateTimeInterface|\DateInterval|int $delay, string|object $job, $data = '')
-     * @method static mixed bulk(array $jobs, $data = '', string $queue = null)
-     * @method static \Illuminate\Contracts\Queue\Job|null pop(string $queue = null)
-     * @method static string getConnectionName()
-     * @method static \Illuminate\Contracts\Queue\Queue setConnectionName(string $name)
      * @see \Illuminate\Queue\QueueManager
      * @see \Illuminate\Queue\Queue
      */ 
@@ -8766,7 +9320,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function before($callback)
         {
-            \Illuminate\Queue\QueueManager::before($callback);
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->before($callback);
         }
         
         /**
@@ -8778,7 +9333,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function after($callback)
         {
-            \Illuminate\Queue\QueueManager::after($callback);
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->after($callback);
         }
         
         /**
@@ -8790,7 +9346,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function exceptionOccurred($callback)
         {
-            \Illuminate\Queue\QueueManager::exceptionOccurred($callback);
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->exceptionOccurred($callback);
         }
         
         /**
@@ -8802,7 +9359,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function looping($callback)
         {
-            \Illuminate\Queue\QueueManager::looping($callback);
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->looping($callback);
         }
         
         /**
@@ -8814,7 +9372,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function failing($callback)
         {
-            \Illuminate\Queue\QueueManager::failing($callback);
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->failing($callback);
         }
         
         /**
@@ -8826,7 +9385,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function stopping($callback)
         {
-            \Illuminate\Queue\QueueManager::stopping($callback);
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->stopping($callback);
         }
         
         /**
@@ -8838,7 +9398,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function connected($name = null)
         {
-            return \Illuminate\Queue\QueueManager::connected($name);
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        return $instance->connected($name);
         }
         
         /**
@@ -8850,7 +9411,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function connection($name = null)
         {
-            return \Illuminate\Queue\QueueManager::connection($name);
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        return $instance->connection($name);
         }
         
         /**
@@ -8863,7 +9425,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function extend($driver, $resolver)
         {
-            \Illuminate\Queue\QueueManager::extend($driver, $resolver);
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->extend($driver, $resolver);
         }
         
         /**
@@ -8876,7 +9439,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function addConnector($driver, $resolver)
         {
-            \Illuminate\Queue\QueueManager::addConnector($driver, $resolver);
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->addConnector($driver, $resolver);
         }
         
         /**
@@ -8887,7 +9451,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDefaultDriver()
         {
-            return \Illuminate\Queue\QueueManager::getDefaultDriver();
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        return $instance->getDefaultDriver();
         }
         
         /**
@@ -8899,7 +9464,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setDefaultDriver($name)
         {
-            \Illuminate\Queue\QueueManager::setDefaultDriver($name);
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        $instance->setDefaultDriver($name);
         }
         
         /**
@@ -8911,7 +9477,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getName($connection = null)
         {
-            return \Illuminate\Queue\QueueManager::getName($connection);
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        return $instance->getName($connection);
         }
         
         /**
@@ -8922,7 +9489,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function isDownForMaintenance()
         {
-            return \Illuminate\Queue\QueueManager::isDownForMaintenance();
+                        /** @var \Illuminate\Queue\QueueManager $instance */
+                        return $instance->isDownForMaintenance();
         }
         
         /**
@@ -8935,7 +9503,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertPushed($job, $callback = null)
         {
-            \Illuminate\Support\Testing\Fakes\QueueFake::assertPushed($job, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        $instance->assertPushed($job, $callback);
         }
         
         /**
@@ -8949,7 +9518,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertPushedOn($queue, $job, $callback = null)
         {
-            \Illuminate\Support\Testing\Fakes\QueueFake::assertPushedOn($queue, $job, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        $instance->assertPushedOn($queue, $job, $callback);
         }
         
         /**
@@ -8963,7 +9533,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertPushedWithChain($job, $expectedChain = array(), $callback = null)
         {
-            \Illuminate\Support\Testing\Fakes\QueueFake::assertPushedWithChain($job, $expectedChain, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        $instance->assertPushedWithChain($job, $expectedChain, $callback);
         }
         
         /**
@@ -8976,7 +9547,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertNotPushed($job, $callback = null)
         {
-            \Illuminate\Support\Testing\Fakes\QueueFake::assertNotPushed($job, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        $instance->assertNotPushed($job, $callback);
         }
         
         /**
@@ -8987,7 +9559,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertNothingPushed()
         {
-            \Illuminate\Support\Testing\Fakes\QueueFake::assertNothingPushed();
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        $instance->assertNothingPushed();
         }
         
         /**
@@ -9000,7 +9573,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function pushed($job, $callback = null)
         {
-            return \Illuminate\Support\Testing\Fakes\QueueFake::pushed($job, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->pushed($job, $callback);
         }
         
         /**
@@ -9012,7 +9586,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasPushed($job)
         {
-            return \Illuminate\Support\Testing\Fakes\QueueFake::hasPushed($job);
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->hasPushed($job);
         }
         
         /**
@@ -9024,7 +9599,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function size($queue = null)
         {
-            return \Illuminate\Support\Testing\Fakes\QueueFake::size($queue);
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->size($queue);
         }
         
         /**
@@ -9038,7 +9614,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function push($job, $data = '', $queue = null)
         {
-            return \Illuminate\Support\Testing\Fakes\QueueFake::push($job, $data, $queue);
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->push($job, $data, $queue);
         }
         
         /**
@@ -9052,7 +9629,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function pushRaw($payload, $queue = null, $options = array())
         {
-            return \Illuminate\Support\Testing\Fakes\QueueFake::pushRaw($payload, $queue, $options);
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->pushRaw($payload, $queue, $options);
         }
         
         /**
@@ -9067,7 +9645,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function later($delay, $job, $data = '', $queue = null)
         {
-            return \Illuminate\Support\Testing\Fakes\QueueFake::later($delay, $job, $data, $queue);
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->later($delay, $job, $data, $queue);
         }
         
         /**
@@ -9081,7 +9660,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function pushOn($queue, $job, $data = '')
         {
-            return \Illuminate\Support\Testing\Fakes\QueueFake::pushOn($queue, $job, $data);
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->pushOn($queue, $job, $data);
         }
         
         /**
@@ -9096,7 +9676,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function laterOn($queue, $delay, $job, $data = '')
         {
-            return \Illuminate\Support\Testing\Fakes\QueueFake::laterOn($queue, $delay, $job, $data);
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->laterOn($queue, $delay, $job, $data);
         }
         
         /**
@@ -9108,7 +9689,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function pop($queue = null)
         {
-            return \Illuminate\Support\Testing\Fakes\QueueFake::pop($queue);
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->pop($queue);
         }
         
         /**
@@ -9122,7 +9704,20 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function bulk($jobs, $data = '', $queue = null)
         {
-            return \Illuminate\Support\Testing\Fakes\QueueFake::bulk($jobs, $data, $queue);
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->bulk($jobs, $data, $queue);
+        }
+        
+        /**
+         * Get the jobs that have been pushed.
+         *
+         * @return array 
+         * @static 
+         */ 
+        public static function pushedJobs()
+        {
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->pushedJobs();
         }
         
         /**
@@ -9133,19 +9728,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getConnectionName()
         {
-            return \Illuminate\Support\Testing\Fakes\QueueFake::getConnectionName();
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->getConnectionName();
         }
         
         /**
          * Set the connection name for the queue.
          *
          * @param string $name
-         * @return $this 
+         * @return \Illuminate\Support\Testing\Fakes\QueueFake 
          * @static 
          */ 
         public static function setConnectionName($name)
         {
-            return \Illuminate\Support\Testing\Fakes\QueueFake::setConnectionName($name);
+                        /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
+                        return $instance->setConnectionName($name);
         }
         
         /**
@@ -9158,7 +9755,8 @@ namespace Illuminate\Support\Facades {
         public static function getJobExpiration($job)
         {
             //Method inherited from \Illuminate\Queue\Queue            
-            return \Illuminate\Queue\SyncQueue::getJobExpiration($job);
+                        /** @var \Illuminate\Queue\SyncQueue $instance */
+                        return $instance->getJobExpiration($job);
         }
         
         /**
@@ -9171,7 +9769,7 @@ namespace Illuminate\Support\Facades {
         public static function createPayloadUsing($callback)
         {
             //Method inherited from \Illuminate\Queue\Queue            
-            \Illuminate\Queue\SyncQueue::createPayloadUsing($callback);
+                        \Illuminate\Queue\SyncQueue::createPayloadUsing($callback);
         }
         
         /**
@@ -9184,7 +9782,8 @@ namespace Illuminate\Support\Facades {
         public static function setContainer($container)
         {
             //Method inherited from \Illuminate\Queue\Queue            
-            \Illuminate\Queue\SyncQueue::setContainer($container);
+                        /** @var \Illuminate\Queue\SyncQueue $instance */
+                        $instance->setContainer($container);
         }
          
     }
@@ -9192,18 +9791,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static \Illuminate\Http\RedirectResponse home(int $status = 302)
-     * @method static \Illuminate\Http\RedirectResponse back(int $status = 302, array $headers = [], $fallback = false)
-     * @method static \Illuminate\Http\RedirectResponse refresh(int $status = 302, array $headers = [])
-     * @method static \Illuminate\Http\RedirectResponse guest(string $path, int $status = 302, array $headers = [], bool $secure = null)
-     * @method static intended(string $default = '/', int $status = 302, array $headers = [], bool $secure = null)
-     * @method static \Illuminate\Http\RedirectResponse to(string $path, int $status = 302, array $headers = [], bool $secure = null)
-     * @method static \Illuminate\Http\RedirectResponse away(string $path, int $status = 302, array $headers = [])
-     * @method static \Illuminate\Http\RedirectResponse secure(string $path, int $status = 302, array $headers = [])
-     * @method static \Illuminate\Http\RedirectResponse route(string $route, array $parameters = [], int $status = 302, array $headers = [])
-     * @method static \Illuminate\Http\RedirectResponse action(string $action, array $parameters = [], int $status = 302, array $headers = [])
-     * @method static \Illuminate\Routing\UrlGenerator getUrlGenerator()
-     * @method static void setSession(\Illuminate\Session\Store $session)
      * @see \Illuminate\Routing\Redirector
      */ 
     class Redirect {
@@ -9217,7 +9804,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function home($status = 302)
         {
-            return \Illuminate\Routing\Redirector::home($status);
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->home($status);
         }
         
         /**
@@ -9231,7 +9819,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function back($status = 302, $headers = array(), $fallback = false)
         {
-            return \Illuminate\Routing\Redirector::back($status, $headers, $fallback);
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->back($status, $headers, $fallback);
         }
         
         /**
@@ -9244,7 +9833,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function refresh($status = 302, $headers = array())
         {
-            return \Illuminate\Routing\Redirector::refresh($status, $headers);
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->refresh($status, $headers);
         }
         
         /**
@@ -9259,7 +9849,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function guest($path, $status = 302, $headers = array(), $secure = null)
         {
-            return \Illuminate\Routing\Redirector::guest($path, $status, $headers, $secure);
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->guest($path, $status, $headers, $secure);
         }
         
         /**
@@ -9274,7 +9865,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function intended($default = '/', $status = 302, $headers = array(), $secure = null)
         {
-            return \Illuminate\Routing\Redirector::intended($default, $status, $headers, $secure);
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->intended($default, $status, $headers, $secure);
+        }
+        
+        /**
+         * Set the intended url.
+         *
+         * @param string $url
+         * @return void 
+         * @static 
+         */ 
+        public static function setIntendedUrl($url)
+        {
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        $instance->setIntendedUrl($url);
         }
         
         /**
@@ -9289,7 +9894,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function to($path, $status = 302, $headers = array(), $secure = null)
         {
-            return \Illuminate\Routing\Redirector::to($path, $status, $headers, $secure);
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->to($path, $status, $headers, $secure);
         }
         
         /**
@@ -9303,7 +9909,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function away($path, $status = 302, $headers = array())
         {
-            return \Illuminate\Routing\Redirector::away($path, $status, $headers);
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->away($path, $status, $headers);
         }
         
         /**
@@ -9317,7 +9924,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function secure($path, $status = 302, $headers = array())
         {
-            return \Illuminate\Routing\Redirector::secure($path, $status, $headers);
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->secure($path, $status, $headers);
         }
         
         /**
@@ -9332,7 +9940,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function route($route, $parameters = array(), $status = 302, $headers = array())
         {
-            return \Illuminate\Routing\Redirector::route($route, $parameters, $status, $headers);
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->route($route, $parameters, $status, $headers);
         }
         
         /**
@@ -9347,7 +9956,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function action($action, $parameters = array(), $status = 302, $headers = array())
         {
-            return \Illuminate\Routing\Redirector::action($action, $parameters, $status, $headers);
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->action($action, $parameters, $status, $headers);
         }
         
         /**
@@ -9358,7 +9968,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getUrlGenerator()
         {
-            return \Illuminate\Routing\Redirector::getUrlGenerator();
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        return $instance->getUrlGenerator();
         }
         
         /**
@@ -9370,7 +9981,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setSession($session)
         {
-            \Illuminate\Routing\Redirector::setSession($session);
+                        /** @var \Illuminate\Routing\Redirector $instance */
+                        $instance->setSession($session);
         }
         
         /**
@@ -9383,20 +9995,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function macro($name, $macro)
         {
-            \Illuminate\Routing\Redirector::macro($name, $macro);
+                        \Illuminate\Routing\Redirector::macro($name, $macro);
         }
         
         /**
          * Mix another object into the class.
          *
          * @param object $mixin
+         * @param bool $replace
          * @return void 
          * @throws \ReflectionException
          * @static 
          */ 
-        public static function mixin($mixin)
+        public static function mixin($mixin, $replace = true)
         {
-            \Illuminate\Routing\Redirector::mixin($mixin);
+                        \Illuminate\Routing\Redirector::mixin($mixin, $replace);
         }
         
         /**
@@ -9408,7 +10021,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasMacro($name)
         {
-            return \Illuminate\Routing\Redirector::hasMacro($name);
+                        return \Illuminate\Routing\Redirector::hasMacro($name);
         }
          
     }
@@ -9416,44 +10029,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static \Illuminate\Http\Request instance()
-     * @method static string method()
-     * @method static string root()
-     * @method static string url()
-     * @method static string fullUrl()
-     * @method static string fullUrlWithQuery(array $query)
-     * @method static string path()
-     * @method static string decodedPath()
-     * @method static string|null segment(int $index, string|null $default = null)
-     * @method static array segments()
-     * @method static bool is(...$patterns)
-     * @method static bool routeIs(...$patterns)
-     * @method static bool fullUrlIs(...$patterns)
-     * @method static bool ajax()
-     * @method static bool pjax()
-     * @method static bool secure()
-     * @method static string ip()
-     * @method static array ips()
-     * @method static string userAgent()
-     * @method static \Illuminate\Http\Request merge(array $input)
-     * @method static \Illuminate\Http\Request replace(array $input)
-     * @method static \Symfony\Component\HttpFoundation\ParameterBag|mixed json(string $key = null, $default = null)
-     * @method static \Illuminate\Session\Store session()
-     * @method static \Illuminate\Session\Store|null getSession()
-     * @method static void setLaravelSession(\Illuminate\Contracts\Session\Session $session)
-     * @method static mixed user(string|null $guard = null)
-     * @method static \Illuminate\Routing\Route|object|string route(string|null $param = null)
-     * @method static string fingerprint()
-     * @method static \Illuminate\Http\Request setJson(\Symfony\Component\HttpFoundation\ParameterBag $json)
-     * @method static \Closure getUserResolver()
-     * @method static \Illuminate\Http\Request setUserResolver(\Closure $callback)
-     * @method static \Closure getRouteResolver()
-     * @method static \Illuminate\Http\Request setRouteResolver(\Closure $callback)
-     * @method static array toArray()
-     * @method static bool offsetExists(string $offset)
-     * @method static mixed offsetGet(string $offset)
-     * @method static void offsetSet(string $offset, $value)
-     * @method static void offsetUnset(string $offset)
      * @see \Illuminate\Http\Request
      */ 
     class Request {
@@ -9466,18 +10041,19 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function capture()
         {
-            return \Illuminate\Http\Request::capture();
+                        return \Illuminate\Http\Request::capture();
         }
         
         /**
          * Return the Request instance.
          *
-         * @return $this 
+         * @return \Illuminate\Http\Request 
          * @static 
          */ 
         public static function instance()
         {
-            return \Illuminate\Http\Request::instance();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->instance();
         }
         
         /**
@@ -9488,7 +10064,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function method()
         {
-            return \Illuminate\Http\Request::method();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->method();
         }
         
         /**
@@ -9499,7 +10076,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function root()
         {
-            return \Illuminate\Http\Request::root();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->root();
         }
         
         /**
@@ -9510,7 +10088,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function url()
         {
-            return \Illuminate\Http\Request::url();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->url();
         }
         
         /**
@@ -9521,7 +10100,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function fullUrl()
         {
-            return \Illuminate\Http\Request::fullUrl();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->fullUrl();
         }
         
         /**
@@ -9533,7 +10113,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function fullUrlWithQuery($query)
         {
-            return \Illuminate\Http\Request::fullUrlWithQuery($query);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->fullUrlWithQuery($query);
         }
         
         /**
@@ -9544,7 +10125,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function path()
         {
-            return \Illuminate\Http\Request::path();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->path();
         }
         
         /**
@@ -9555,7 +10137,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function decodedPath()
         {
-            return \Illuminate\Http\Request::decodedPath();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->decodedPath();
         }
         
         /**
@@ -9568,7 +10151,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function segment($index, $default = null)
         {
-            return \Illuminate\Http\Request::segment($index, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->segment($index, $default);
         }
         
         /**
@@ -9579,7 +10163,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function segments()
         {
-            return \Illuminate\Http\Request::segments();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->segments();
         }
         
         /**
@@ -9591,7 +10176,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function is($patterns = null)
         {
-            return \Illuminate\Http\Request::is($patterns);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->is($patterns);
         }
         
         /**
@@ -9603,7 +10189,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function routeIs($patterns = null)
         {
-            return \Illuminate\Http\Request::routeIs($patterns);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->routeIs($patterns);
         }
         
         /**
@@ -9615,7 +10202,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function fullUrlIs($patterns = null)
         {
-            return \Illuminate\Http\Request::fullUrlIs($patterns);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->fullUrlIs($patterns);
         }
         
         /**
@@ -9626,7 +10214,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function ajax()
         {
-            return \Illuminate\Http\Request::ajax();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->ajax();
         }
         
         /**
@@ -9637,7 +10226,20 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function pjax()
         {
-            return \Illuminate\Http\Request::pjax();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->pjax();
+        }
+        
+        /**
+         * Determine if the request is the result of an prefetch call.
+         *
+         * @return bool 
+         * @static 
+         */ 
+        public static function prefetch()
+        {
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->prefetch();
         }
         
         /**
@@ -9648,7 +10250,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function secure()
         {
-            return \Illuminate\Http\Request::secure();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->secure();
         }
         
         /**
@@ -9659,7 +10262,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function ip()
         {
-            return \Illuminate\Http\Request::ip();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->ip();
         }
         
         /**
@@ -9670,7 +10274,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function ips()
         {
-            return \Illuminate\Http\Request::ips();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->ips();
         }
         
         /**
@@ -9681,7 +10286,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function userAgent()
         {
-            return \Illuminate\Http\Request::userAgent();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->userAgent();
         }
         
         /**
@@ -9693,7 +10299,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function merge($input)
         {
-            return \Illuminate\Http\Request::merge($input);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->merge($input);
         }
         
         /**
@@ -9705,7 +10312,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function replace($input)
         {
-            return \Illuminate\Http\Request::replace($input);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->replace($input);
         }
         
         /**
@@ -9720,7 +10328,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function get($key, $default = null)
         {
-            return \Illuminate\Http\Request::get($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->get($key, $default);
         }
         
         /**
@@ -9733,7 +10342,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function json($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::json($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->json($key, $default);
         }
         
         /**
@@ -9746,19 +10356,19 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function createFrom($from, $to = null)
         {
-            return \Illuminate\Http\Request::createFrom($from, $to);
+                        return \Illuminate\Http\Request::createFrom($from, $to);
         }
         
         /**
          * Create an Illuminate request from a Symfony instance.
          *
          * @param \Symfony\Component\HttpFoundation\Request $request
-         * @return \Illuminate\Http\Request 
+         * @return static 
          * @static 
          */ 
         public static function createFromBase($request)
         {
-            return \Illuminate\Http\Request::createFromBase($request);
+                        return \Illuminate\Http\Request::createFromBase($request);
         }
         
         /**
@@ -9775,7 +10385,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function duplicate($query = null, $request = null, $attributes = null, $cookies = null, $files = null, $server = null)
         {
-            return \Illuminate\Http\Request::duplicate($query, $request, $attributes, $cookies, $files, $server);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->duplicate($query, $request, $attributes, $cookies, $files, $server);
         }
         
         /**
@@ -9787,7 +10398,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function session()
         {
-            return \Illuminate\Http\Request::session();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->session();
         }
         
         /**
@@ -9798,7 +10410,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getSession()
         {
-            return \Illuminate\Http\Request::getSession();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getSession();
         }
         
         /**
@@ -9810,7 +10423,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setLaravelSession($session)
         {
-            \Illuminate\Http\Request::setLaravelSession($session);
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->setLaravelSession($session);
         }
         
         /**
@@ -9822,7 +10436,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function user($guard = null)
         {
-            return \Illuminate\Http\Request::user($guard);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->user($guard);
         }
         
         /**
@@ -9835,7 +10450,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function route($param = null, $default = null)
         {
-            return \Illuminate\Http\Request::route($param, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->route($param, $default);
         }
         
         /**
@@ -9847,19 +10463,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function fingerprint()
         {
-            return \Illuminate\Http\Request::fingerprint();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->fingerprint();
         }
         
         /**
          * Set the JSON payload for the request.
          *
          * @param \Symfony\Component\HttpFoundation\ParameterBag $json
-         * @return $this 
+         * @return \Illuminate\Http\Request 
          * @static 
          */ 
         public static function setJson($json)
         {
-            return \Illuminate\Http\Request::setJson($json);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setJson($json);
         }
         
         /**
@@ -9870,19 +10488,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getUserResolver()
         {
-            return \Illuminate\Http\Request::getUserResolver();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getUserResolver();
         }
         
         /**
          * Set the user resolver callback.
          *
          * @param \Closure $callback
-         * @return $this 
+         * @return \Illuminate\Http\Request 
          * @static 
          */ 
         public static function setUserResolver($callback)
         {
-            return \Illuminate\Http\Request::setUserResolver($callback);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setUserResolver($callback);
         }
         
         /**
@@ -9893,19 +10513,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getRouteResolver()
         {
-            return \Illuminate\Http\Request::getRouteResolver();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getRouteResolver();
         }
         
         /**
          * Set the route resolver callback.
          *
          * @param \Closure $callback
-         * @return $this 
+         * @return \Illuminate\Http\Request 
          * @static 
          */ 
         public static function setRouteResolver($callback)
         {
-            return \Illuminate\Http\Request::setRouteResolver($callback);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setRouteResolver($callback);
         }
         
         /**
@@ -9916,7 +10538,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function toArray()
         {
-            return \Illuminate\Http\Request::toArray();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->toArray();
         }
         
         /**
@@ -9928,7 +10551,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function offsetExists($offset)
         {
-            return \Illuminate\Http\Request::offsetExists($offset);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->offsetExists($offset);
         }
         
         /**
@@ -9940,7 +10564,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function offsetGet($offset)
         {
-            return \Illuminate\Http\Request::offsetGet($offset);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->offsetGet($offset);
         }
         
         /**
@@ -9953,7 +10578,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function offsetSet($offset, $value)
         {
-            \Illuminate\Http\Request::offsetSet($offset, $value);
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->offsetSet($offset, $value);
         }
         
         /**
@@ -9965,7 +10591,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function offsetUnset($offset)
         {
-            \Illuminate\Http\Request::offsetUnset($offset);
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->offsetUnset($offset);
         }
         
         /**
@@ -9985,7 +10612,8 @@ namespace Illuminate\Support\Facades {
         public static function initialize($query = array(), $request = array(), $attributes = array(), $cookies = array(), $files = array(), $server = array(), $content = null)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::initialize($query, $request, $attributes, $cookies, $files, $server, $content);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->initialize($query, $request, $attributes, $cookies, $files, $server, $content);
         }
         
         /**
@@ -9997,7 +10625,7 @@ namespace Illuminate\Support\Facades {
         public static function createFromGlobals()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::createFromGlobals();
+                        return \Illuminate\Http\Request::createFromGlobals();
         }
         
         /**
@@ -10019,7 +10647,7 @@ namespace Illuminate\Support\Facades {
         public static function create($uri, $method = 'GET', $parameters = array(), $cookies = array(), $files = array(), $server = array(), $content = null)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::create($uri, $method, $parameters, $cookies, $files, $server, $content);
+                        return \Illuminate\Http\Request::create($uri, $method, $parameters, $cookies, $files, $server, $content);
         }
         
         /**
@@ -10035,7 +10663,7 @@ namespace Illuminate\Support\Facades {
         public static function setFactory($callable)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setFactory($callable);
+                        return \Illuminate\Http\Request::setFactory($callable);
         }
         
         /**
@@ -10049,7 +10677,8 @@ namespace Illuminate\Support\Facades {
         public static function overrideGlobals()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::overrideGlobals();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->overrideGlobals();
         }
         
         /**
@@ -10065,7 +10694,7 @@ namespace Illuminate\Support\Facades {
         public static function setTrustedProxies($proxies, $trustedHeaderSet)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setTrustedProxies($proxies, $trustedHeaderSet);
+                        return \Illuminate\Http\Request::setTrustedProxies($proxies, $trustedHeaderSet);
         }
         
         /**
@@ -10077,7 +10706,7 @@ namespace Illuminate\Support\Facades {
         public static function getTrustedProxies()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getTrustedProxies();
+                        return \Illuminate\Http\Request::getTrustedProxies();
         }
         
         /**
@@ -10089,7 +10718,7 @@ namespace Illuminate\Support\Facades {
         public static function getTrustedHeaderSet()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getTrustedHeaderSet();
+                        return \Illuminate\Http\Request::getTrustedHeaderSet();
         }
         
         /**
@@ -10103,7 +10732,7 @@ namespace Illuminate\Support\Facades {
         public static function setTrustedHosts($hostPatterns)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setTrustedHosts($hostPatterns);
+                        return \Illuminate\Http\Request::setTrustedHosts($hostPatterns);
         }
         
         /**
@@ -10115,7 +10744,7 @@ namespace Illuminate\Support\Facades {
         public static function getTrustedHosts()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getTrustedHosts();
+                        return \Illuminate\Http\Request::getTrustedHosts();
         }
         
         /**
@@ -10131,7 +10760,7 @@ namespace Illuminate\Support\Facades {
         public static function normalizeQueryString($qs)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::normalizeQueryString($qs);
+                        return \Illuminate\Http\Request::normalizeQueryString($qs);
         }
         
         /**
@@ -10150,7 +10779,7 @@ namespace Illuminate\Support\Facades {
         public static function enableHttpMethodParameterOverride()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::enableHttpMethodParameterOverride();
+                        return \Illuminate\Http\Request::enableHttpMethodParameterOverride();
         }
         
         /**
@@ -10162,7 +10791,7 @@ namespace Illuminate\Support\Facades {
         public static function getHttpMethodParameterOverride()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getHttpMethodParameterOverride();
+                        return \Illuminate\Http\Request::getHttpMethodParameterOverride();
         }
         
         /**
@@ -10175,7 +10804,8 @@ namespace Illuminate\Support\Facades {
         public static function hasPreviousSession()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::hasPreviousSession();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasPreviousSession();
         }
         
         /**
@@ -10191,7 +10821,8 @@ namespace Illuminate\Support\Facades {
         public static function hasSession()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::hasSession();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasSession();
         }
         
         /**
@@ -10203,7 +10834,8 @@ namespace Illuminate\Support\Facades {
         public static function setSession($session)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setSession($session);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setSession($session);
         }
         
         /**
@@ -10215,7 +10847,8 @@ namespace Illuminate\Support\Facades {
         public static function setSessionFactory($factory)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setSessionFactory($factory);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setSessionFactory($factory);
         }
         
         /**
@@ -10234,7 +10867,8 @@ namespace Illuminate\Support\Facades {
         public static function getClientIps()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getClientIps();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getClientIps();
         }
         
         /**
@@ -10254,7 +10888,8 @@ namespace Illuminate\Support\Facades {
         public static function getClientIp()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getClientIp();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getClientIp();
         }
         
         /**
@@ -10266,7 +10901,8 @@ namespace Illuminate\Support\Facades {
         public static function getScriptName()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getScriptName();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getScriptName();
         }
         
         /**
@@ -10287,7 +10923,8 @@ namespace Illuminate\Support\Facades {
         public static function getPathInfo()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getPathInfo();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getPathInfo();
         }
         
         /**
@@ -10306,7 +10943,8 @@ namespace Illuminate\Support\Facades {
         public static function getBasePath()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getBasePath();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getBasePath();
         }
         
         /**
@@ -10323,7 +10961,8 @@ namespace Illuminate\Support\Facades {
         public static function getBaseUrl()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getBaseUrl();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getBaseUrl();
         }
         
         /**
@@ -10335,7 +10974,8 @@ namespace Illuminate\Support\Facades {
         public static function getScheme()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getScheme();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getScheme();
         }
         
         /**
@@ -10352,7 +10992,8 @@ namespace Illuminate\Support\Facades {
         public static function getPort()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getPort();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getPort();
         }
         
         /**
@@ -10364,7 +11005,8 @@ namespace Illuminate\Support\Facades {
         public static function getUser()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getUser();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getUser();
         }
         
         /**
@@ -10376,7 +11018,8 @@ namespace Illuminate\Support\Facades {
         public static function getPassword()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getPassword();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getPassword();
         }
         
         /**
@@ -10388,7 +11031,8 @@ namespace Illuminate\Support\Facades {
         public static function getUserInfo()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getUserInfo();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getUserInfo();
         }
         
         /**
@@ -10402,7 +11046,8 @@ namespace Illuminate\Support\Facades {
         public static function getHttpHost()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getHttpHost();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getHttpHost();
         }
         
         /**
@@ -10414,7 +11059,8 @@ namespace Illuminate\Support\Facades {
         public static function getRequestUri()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getRequestUri();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getRequestUri();
         }
         
         /**
@@ -10429,7 +11075,8 @@ namespace Illuminate\Support\Facades {
         public static function getSchemeAndHttpHost()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getSchemeAndHttpHost();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getSchemeAndHttpHost();
         }
         
         /**
@@ -10442,7 +11089,8 @@ namespace Illuminate\Support\Facades {
         public static function getUri()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getUri();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getUri();
         }
         
         /**
@@ -10455,7 +11103,8 @@ namespace Illuminate\Support\Facades {
         public static function getUriForPath($path)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getUriForPath($path);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getUriForPath($path);
         }
         
         /**
@@ -10480,7 +11129,8 @@ namespace Illuminate\Support\Facades {
         public static function getRelativeUriForPath($path)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getRelativeUriForPath($path);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getRelativeUriForPath($path);
         }
         
         /**
@@ -10495,7 +11145,8 @@ namespace Illuminate\Support\Facades {
         public static function getQueryString()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getQueryString();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getQueryString();
         }
         
         /**
@@ -10512,7 +11163,8 @@ namespace Illuminate\Support\Facades {
         public static function isSecure()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::isSecure();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isSecure();
         }
         
         /**
@@ -10530,7 +11182,8 @@ namespace Illuminate\Support\Facades {
         public static function getHost()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getHost();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getHost();
         }
         
         /**
@@ -10542,7 +11195,8 @@ namespace Illuminate\Support\Facades {
         public static function setMethod($method)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setMethod($method);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setMethod($method);
         }
         
         /**
@@ -10563,7 +11217,8 @@ namespace Illuminate\Support\Facades {
         public static function getMethod()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getMethod();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getMethod();
         }
         
         /**
@@ -10576,7 +11231,8 @@ namespace Illuminate\Support\Facades {
         public static function getRealMethod()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getRealMethod();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getRealMethod();
         }
         
         /**
@@ -10589,7 +11245,8 @@ namespace Illuminate\Support\Facades {
         public static function getMimeType($format)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getMimeType($format);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getMimeType($format);
         }
         
         /**
@@ -10602,7 +11259,7 @@ namespace Illuminate\Support\Facades {
         public static function getMimeTypes($format)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getMimeTypes($format);
+                        return \Illuminate\Http\Request::getMimeTypes($format);
         }
         
         /**
@@ -10615,7 +11272,8 @@ namespace Illuminate\Support\Facades {
         public static function getFormat($mimeType)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getFormat($mimeType);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getFormat($mimeType);
         }
         
         /**
@@ -10628,7 +11286,8 @@ namespace Illuminate\Support\Facades {
         public static function setFormat($format, $mimeTypes)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setFormat($format, $mimeTypes);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setFormat($format, $mimeTypes);
         }
         
         /**
@@ -10647,7 +11306,8 @@ namespace Illuminate\Support\Facades {
         public static function getRequestFormat($default = 'html')
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getRequestFormat($default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getRequestFormat($default);
         }
         
         /**
@@ -10659,7 +11319,8 @@ namespace Illuminate\Support\Facades {
         public static function setRequestFormat($format)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setRequestFormat($format);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setRequestFormat($format);
         }
         
         /**
@@ -10671,7 +11332,8 @@ namespace Illuminate\Support\Facades {
         public static function getContentType()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getContentType();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getContentType();
         }
         
         /**
@@ -10683,7 +11345,8 @@ namespace Illuminate\Support\Facades {
         public static function setDefaultLocale($locale)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setDefaultLocale($locale);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setDefaultLocale($locale);
         }
         
         /**
@@ -10695,7 +11358,8 @@ namespace Illuminate\Support\Facades {
         public static function getDefaultLocale()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getDefaultLocale();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getDefaultLocale();
         }
         
         /**
@@ -10707,7 +11371,8 @@ namespace Illuminate\Support\Facades {
         public static function setLocale($locale)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::setLocale($locale);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->setLocale($locale);
         }
         
         /**
@@ -10719,7 +11384,8 @@ namespace Illuminate\Support\Facades {
         public static function getLocale()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getLocale();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getLocale();
         }
         
         /**
@@ -10732,7 +11398,8 @@ namespace Illuminate\Support\Facades {
         public static function isMethod($method)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::isMethod($method);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isMethod($method);
         }
         
         /**
@@ -10746,7 +11413,8 @@ namespace Illuminate\Support\Facades {
         public static function isMethodSafe()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::isMethodSafe();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isMethodSafe();
         }
         
         /**
@@ -10758,20 +11426,22 @@ namespace Illuminate\Support\Facades {
         public static function isMethodIdempotent()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::isMethodIdempotent();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isMethodIdempotent();
         }
         
         /**
          * Checks whether the method is cacheable or not.
          *
          * @see https://tools.ietf.org/html/rfc7231#section-4.2.3
-         * @return bool 
+         * @return bool True for GET and HEAD, false otherwise
          * @static 
          */ 
         public static function isMethodCacheable()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::isMethodCacheable();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isMethodCacheable();
         }
         
         /**
@@ -10789,7 +11459,8 @@ namespace Illuminate\Support\Facades {
         public static function getProtocolVersion()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getProtocolVersion();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getProtocolVersion();
         }
         
         /**
@@ -10803,7 +11474,8 @@ namespace Illuminate\Support\Facades {
         public static function getContent($asResource = false)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getContent($asResource);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getContent($asResource);
         }
         
         /**
@@ -10815,7 +11487,8 @@ namespace Illuminate\Support\Facades {
         public static function getETags()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getETags();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getETags();
         }
         
         /**
@@ -10827,7 +11500,8 @@ namespace Illuminate\Support\Facades {
         public static function isNoCache()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::isNoCache();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isNoCache();
         }
         
         /**
@@ -10840,7 +11514,8 @@ namespace Illuminate\Support\Facades {
         public static function getPreferredLanguage($locales = null)
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getPreferredLanguage($locales);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getPreferredLanguage($locales);
         }
         
         /**
@@ -10852,7 +11527,8 @@ namespace Illuminate\Support\Facades {
         public static function getLanguages()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getLanguages();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getLanguages();
         }
         
         /**
@@ -10864,7 +11540,8 @@ namespace Illuminate\Support\Facades {
         public static function getCharsets()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getCharsets();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getCharsets();
         }
         
         /**
@@ -10876,7 +11553,8 @@ namespace Illuminate\Support\Facades {
         public static function getEncodings()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getEncodings();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getEncodings();
         }
         
         /**
@@ -10888,7 +11566,8 @@ namespace Illuminate\Support\Facades {
         public static function getAcceptableContentTypes()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::getAcceptableContentTypes();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->getAcceptableContentTypes();
         }
         
         /**
@@ -10904,7 +11583,8 @@ namespace Illuminate\Support\Facades {
         public static function isXmlHttpRequest()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::isXmlHttpRequest();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isXmlHttpRequest();
         }
         
         /**
@@ -10919,7 +11599,8 @@ namespace Illuminate\Support\Facades {
         public static function isFromTrustedProxy()
         {
             //Method inherited from \Symfony\Component\HttpFoundation\Request            
-            return \Illuminate\Http\Request::isFromTrustedProxy();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isFromTrustedProxy();
         }
         
         /**
@@ -10932,7 +11613,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function matchesType($actual, $type)
         {
-            return \Illuminate\Http\Request::matchesType($actual, $type);
+                        return \Illuminate\Http\Request::matchesType($actual, $type);
         }
         
         /**
@@ -10943,7 +11624,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function isJson()
         {
-            return \Illuminate\Http\Request::isJson();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->isJson();
         }
         
         /**
@@ -10954,7 +11636,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function expectsJson()
         {
-            return \Illuminate\Http\Request::expectsJson();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->expectsJson();
         }
         
         /**
@@ -10965,7 +11648,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function wantsJson()
         {
-            return \Illuminate\Http\Request::wantsJson();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->wantsJson();
         }
         
         /**
@@ -10977,7 +11661,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function accepts($contentTypes)
         {
-            return \Illuminate\Http\Request::accepts($contentTypes);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->accepts($contentTypes);
         }
         
         /**
@@ -10989,7 +11674,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function prefers($contentTypes)
         {
-            return \Illuminate\Http\Request::prefers($contentTypes);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->prefers($contentTypes);
         }
         
         /**
@@ -11000,7 +11686,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function acceptsAnyContentType()
         {
-            return \Illuminate\Http\Request::acceptsAnyContentType();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->acceptsAnyContentType();
         }
         
         /**
@@ -11011,7 +11698,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function acceptsJson()
         {
-            return \Illuminate\Http\Request::acceptsJson();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->acceptsJson();
         }
         
         /**
@@ -11022,7 +11710,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function acceptsHtml()
         {
-            return \Illuminate\Http\Request::acceptsHtml();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->acceptsHtml();
         }
         
         /**
@@ -11034,7 +11723,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function format($default = 'html')
         {
-            return \Illuminate\Http\Request::format($default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->format($default);
         }
         
         /**
@@ -11047,7 +11737,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function old($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::old($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->old($key, $default);
         }
         
         /**
@@ -11058,7 +11749,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flash()
         {
-            \Illuminate\Http\Request::flash();
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->flash();
         }
         
         /**
@@ -11070,7 +11762,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flashOnly($keys)
         {
-            \Illuminate\Http\Request::flashOnly($keys);
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->flashOnly($keys);
         }
         
         /**
@@ -11082,7 +11775,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flashExcept($keys)
         {
-            \Illuminate\Http\Request::flashExcept($keys);
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->flashExcept($keys);
         }
         
         /**
@@ -11093,7 +11787,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flush()
         {
-            \Illuminate\Http\Request::flush();
+                        /** @var \Illuminate\Http\Request $instance */
+                        $instance->flush();
         }
         
         /**
@@ -11106,7 +11801,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function server($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::server($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->server($key, $default);
         }
         
         /**
@@ -11118,7 +11814,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasHeader($key)
         {
-            return \Illuminate\Http\Request::hasHeader($key);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasHeader($key);
         }
         
         /**
@@ -11131,7 +11828,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function header($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::header($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->header($key, $default);
         }
         
         /**
@@ -11142,7 +11840,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function bearerToken()
         {
-            return \Illuminate\Http\Request::bearerToken();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->bearerToken();
         }
         
         /**
@@ -11154,7 +11853,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function exists($key)
         {
-            return \Illuminate\Http\Request::exists($key);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->exists($key);
         }
         
         /**
@@ -11166,7 +11866,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function has($key)
         {
-            return \Illuminate\Http\Request::has($key);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->has($key);
         }
         
         /**
@@ -11178,7 +11879,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasAny($keys)
         {
-            return \Illuminate\Http\Request::hasAny($keys);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasAny($keys);
         }
         
         /**
@@ -11190,7 +11892,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function filled($key)
         {
-            return \Illuminate\Http\Request::filled($key);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->filled($key);
         }
         
         /**
@@ -11202,7 +11905,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function anyFilled($keys)
         {
-            return \Illuminate\Http\Request::anyFilled($keys);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->anyFilled($keys);
         }
         
         /**
@@ -11213,7 +11917,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function keys()
         {
-            return \Illuminate\Http\Request::keys();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->keys();
         }
         
         /**
@@ -11225,7 +11930,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function all($keys = null)
         {
-            return \Illuminate\Http\Request::all($keys);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->all($keys);
         }
         
         /**
@@ -11238,7 +11944,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function input($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::input($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->input($key, $default);
         }
         
         /**
@@ -11250,7 +11957,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function only($keys)
         {
-            return \Illuminate\Http\Request::only($keys);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->only($keys);
         }
         
         /**
@@ -11262,7 +11970,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function except($keys)
         {
-            return \Illuminate\Http\Request::except($keys);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->except($keys);
         }
         
         /**
@@ -11275,7 +11984,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function query($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::query($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->query($key, $default);
         }
         
         /**
@@ -11288,7 +11998,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function post($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::post($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->post($key, $default);
         }
         
         /**
@@ -11300,7 +12011,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasCookie($key)
         {
-            return \Illuminate\Http\Request::hasCookie($key);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasCookie($key);
         }
         
         /**
@@ -11313,7 +12025,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function cookie($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::cookie($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->cookie($key, $default);
         }
         
         /**
@@ -11324,7 +12037,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function allFiles()
         {
-            return \Illuminate\Http\Request::allFiles();
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->allFiles();
         }
         
         /**
@@ -11336,7 +12050,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasFile($key)
         {
-            return \Illuminate\Http\Request::hasFile($key);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->hasFile($key);
         }
         
         /**
@@ -11344,12 +12059,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $key
          * @param mixed $default
-         * @return \Illuminate\Http\UploadedFile|array|null 
+         * @return \Illuminate\Http\UploadedFile|\Illuminate\Http\UploadedFile[]|array|null 
          * @static 
          */ 
         public static function file($key = null, $default = null)
         {
-            return \Illuminate\Http\Request::file($key, $default);
+                        /** @var \Illuminate\Http\Request $instance */
+                        return $instance->file($key, $default);
         }
         
         /**
@@ -11362,20 +12078,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function macro($name, $macro)
         {
-            \Illuminate\Http\Request::macro($name, $macro);
+                        \Illuminate\Http\Request::macro($name, $macro);
         }
         
         /**
          * Mix another object into the class.
          *
          * @param object $mixin
+         * @param bool $replace
          * @return void 
          * @throws \ReflectionException
          * @static 
          */ 
-        public static function mixin($mixin)
+        public static function mixin($mixin, $replace = true)
         {
-            \Illuminate\Http\Request::mixin($mixin);
+                        \Illuminate\Http\Request::mixin($mixin, $replace);
         }
         
         /**
@@ -11387,7 +12104,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasMacro($name)
         {
-            return \Illuminate\Http\Request::hasMacro($name);
+                        return \Illuminate\Http\Request::hasMacro($name);
         }
         
         /**
@@ -11397,7 +12114,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function validate($rules, $params = null)
         {
-            return \Illuminate\Http\Request::validate($rules, $params);
+                        return \Illuminate\Http\Request::validate($rules, $params);
         }
         
         /**
@@ -11405,9 +12122,9 @@ namespace Illuminate\Support\Facades {
          *
          * @static 
          */ 
-        public static function hasValidSignature()
+        public static function hasValidSignature($absolute = true)
         {
-            return \Illuminate\Http\Request::hasValidSignature();
+                        return \Illuminate\Http\Request::hasValidSignature($absolute);
         }
          
     }
@@ -11415,18 +12132,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static \Illuminate\Http\Response make(string $content = '', int $status = 200, array $headers = [])
-     * @method static \Illuminate\Http\Response view(string $view, array $data = [], int $status = 200, array $headers = [])
-     * @method static \Illuminate\Http\JsonResponse json(string|array $data = [], int $status = 200, array $headers = [], int $options = 0)
-     * @method static \Illuminate\Http\JsonResponse jsonp(string $callback, string|array $data = [], int $status = 200, array $headers = [], int $options = 0)
-     * @method static \Symfony\Component\HttpFoundation\StreamedResponse stream(\Closure $callback, int $status = 200, array $headers = [])
-     * @method static \Symfony\Component\HttpFoundation\StreamedResponse streamDownload(\Closure $callback, string|null $name = null, array $headers = [], string|null $disposition = 'attachment')
-     * @method static \Symfony\Component\HttpFoundation\BinaryFileResponse download(\SplFileInfo|string $file, string|null $name = null, array $headers = [], string|null $disposition = 'attachment')
-     * @method static \Illuminate\Http\RedirectResponse redirectTo(string $path, int $status = 302, array $headers = [], bool|null $secure = null)
-     * @method static \Illuminate\Http\RedirectResponse redirectToRoute(string $route, array $parameters = [], int $status = 302, array $headers = [])
-     * @method static \Illuminate\Http\RedirectResponse redirectToAction(string $action, array $parameters = [], int $status = 302, array $headers = [])
-     * @method static \Illuminate\Http\RedirectResponse redirectGuest(string $path, int $status = 302, array $headers = [], bool|null $secure = null)
-     * @method static \Illuminate\Http\RedirectResponse redirectToIntended(string $default = '/', int $status = 302, array $headers = [], bool|null $secure = null)
      * @see \Illuminate\Contracts\Routing\ResponseFactory
      */ 
     class Response {
@@ -11442,7 +12147,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function make($content = '', $status = 200, $headers = array())
         {
-            return \Illuminate\Routing\ResponseFactory::make($content, $status, $headers);
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->make($content, $status, $headers);
         }
         
         /**
@@ -11455,7 +12161,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function noContent($status = 204, $headers = array())
         {
-            return \Illuminate\Routing\ResponseFactory::noContent($status, $headers);
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->noContent($status, $headers);
         }
         
         /**
@@ -11470,7 +12177,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function view($view, $data = array(), $status = 200, $headers = array())
         {
-            return \Illuminate\Routing\ResponseFactory::view($view, $data, $status, $headers);
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->view($view, $data, $status, $headers);
         }
         
         /**
@@ -11485,7 +12193,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function json($data = array(), $status = 200, $headers = array(), $options = 0)
         {
-            return \Illuminate\Routing\ResponseFactory::json($data, $status, $headers, $options);
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->json($data, $status, $headers, $options);
         }
         
         /**
@@ -11501,7 +12210,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function jsonp($callback, $data = array(), $status = 200, $headers = array(), $options = 0)
         {
-            return \Illuminate\Routing\ResponseFactory::jsonp($callback, $data, $status, $headers, $options);
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->jsonp($callback, $data, $status, $headers, $options);
         }
         
         /**
@@ -11515,7 +12225,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function stream($callback, $status = 200, $headers = array())
         {
-            return \Illuminate\Routing\ResponseFactory::stream($callback, $status, $headers);
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->stream($callback, $status, $headers);
         }
         
         /**
@@ -11530,7 +12241,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function streamDownload($callback, $name = null, $headers = array(), $disposition = 'attachment')
         {
-            return \Illuminate\Routing\ResponseFactory::streamDownload($callback, $name, $headers, $disposition);
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->streamDownload($callback, $name, $headers, $disposition);
         }
         
         /**
@@ -11545,7 +12257,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function download($file, $name = null, $headers = array(), $disposition = 'attachment')
         {
-            return \Illuminate\Routing\ResponseFactory::download($file, $name, $headers, $disposition);
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->download($file, $name, $headers, $disposition);
         }
         
         /**
@@ -11558,7 +12271,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function file($file, $headers = array())
         {
-            return \Illuminate\Routing\ResponseFactory::file($file, $headers);
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->file($file, $headers);
         }
         
         /**
@@ -11573,7 +12287,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function redirectTo($path, $status = 302, $headers = array(), $secure = null)
         {
-            return \Illuminate\Routing\ResponseFactory::redirectTo($path, $status, $headers, $secure);
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->redirectTo($path, $status, $headers, $secure);
         }
         
         /**
@@ -11588,7 +12303,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function redirectToRoute($route, $parameters = array(), $status = 302, $headers = array())
         {
-            return \Illuminate\Routing\ResponseFactory::redirectToRoute($route, $parameters, $status, $headers);
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->redirectToRoute($route, $parameters, $status, $headers);
         }
         
         /**
@@ -11603,7 +12319,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function redirectToAction($action, $parameters = array(), $status = 302, $headers = array())
         {
-            return \Illuminate\Routing\ResponseFactory::redirectToAction($action, $parameters, $status, $headers);
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->redirectToAction($action, $parameters, $status, $headers);
         }
         
         /**
@@ -11618,7 +12335,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function redirectGuest($path, $status = 302, $headers = array(), $secure = null)
         {
-            return \Illuminate\Routing\ResponseFactory::redirectGuest($path, $status, $headers, $secure);
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->redirectGuest($path, $status, $headers, $secure);
         }
         
         /**
@@ -11633,7 +12351,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function redirectToIntended($default = '/', $status = 302, $headers = array(), $secure = null)
         {
-            return \Illuminate\Routing\ResponseFactory::redirectToIntended($default, $status, $headers, $secure);
+                        /** @var \Illuminate\Routing\ResponseFactory $instance */
+                        return $instance->redirectToIntended($default, $status, $headers, $secure);
         }
         
         /**
@@ -11646,20 +12365,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function macro($name, $macro)
         {
-            \Illuminate\Routing\ResponseFactory::macro($name, $macro);
+                        \Illuminate\Routing\ResponseFactory::macro($name, $macro);
         }
         
         /**
          * Mix another object into the class.
          *
          * @param object $mixin
+         * @param bool $replace
          * @return void 
          * @throws \ReflectionException
          * @static 
          */ 
-        public static function mixin($mixin)
+        public static function mixin($mixin, $replace = true)
         {
-            \Illuminate\Routing\ResponseFactory::mixin($mixin);
+                        \Illuminate\Routing\ResponseFactory::mixin($mixin, $replace);
         }
         
         /**
@@ -11671,7 +12391,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasMacro($name)
         {
-            return \Illuminate\Routing\ResponseFactory::hasMacro($name);
+                        return \Illuminate\Routing\ResponseFactory::hasMacro($name);
         }
          
     }
@@ -11679,34 +12399,13 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static \Illuminate\Routing\Route get(string $uri, \Closure|array|string|null $action = null)
-     * @method static \Illuminate\Routing\Route post(string $uri, \Closure|array|string|null $action = null)
-     * @method static \Illuminate\Routing\Route put(string $uri, \Closure|array|string|null $action = null)
-     * @method static \Illuminate\Routing\Route delete(string $uri, \Closure|array|string|null $action = null)
-     * @method static \Illuminate\Routing\Route patch(string $uri, \Closure|array|string|null $action = null)
-     * @method static \Illuminate\Routing\Route options(string $uri, \Closure|array|string|null $action = null)
-     * @method static \Illuminate\Routing\Route any(string $uri, \Closure|array|string|null $action = null)
-     * @method static \Illuminate\Routing\Route match(array|string $methods, string $uri, \Closure|array|string|null $action = null)
      * @method static \Illuminate\Routing\RouteRegistrar prefix(string  $prefix)
      * @method static \Illuminate\Routing\RouteRegistrar where(array  $where)
-     * @method static \Illuminate\Routing\PendingResourceRegistration resource(string $name, string $controller, array $options = [])
-     * @method static \Illuminate\Routing\PendingResourceRegistration apiResource(string $name, string $controller, array $options = [])
-     * @method static void apiResources(array $resources)
      * @method static \Illuminate\Routing\RouteRegistrar middleware(array|string|null $middleware)
-     * @method static \Illuminate\Routing\Route substituteBindings(\Illuminate\Support\Facades\Route $route)
-     * @method static void substituteImplicitBindings(\Illuminate\Support\Facades\Route $route)
      * @method static \Illuminate\Routing\RouteRegistrar as(string $value)
      * @method static \Illuminate\Routing\RouteRegistrar domain(string $value)
      * @method static \Illuminate\Routing\RouteRegistrar name(string $value)
      * @method static \Illuminate\Routing\RouteRegistrar namespace(string $value)
-     * @method static \Illuminate\Routing\Router|\Illuminate\Routing\RouteRegistrar group(array|\Closure|string $attributes, \Closure|string $routes)
-     * @method static \Illuminate\Routing\Route redirect(string $uri, string $destination, int $status = 302)
-     * @method static \Illuminate\Routing\Route permanentRedirect(string $uri, string $destination)
-     * @method static \Illuminate\Routing\Route view(string $uri, string $view, array $data = [])
-     * @method static void bind(string $key, string|callable $binder)
-     * @method static \Illuminate\Routing\Route current()
-     * @method static string|null currentRouteName()
-     * @method static string|null currentRouteAction()
      * @see \Illuminate\Routing\Router
      */ 
     class Route {
@@ -11715,103 +12414,111 @@ namespace Illuminate\Support\Facades {
          * Register a new GET route with the router.
          *
          * @param string $uri
-         * @param \Closure|array|string|null $action
+         * @param \Closure|array|string|callable|null $action
          * @return \Illuminate\Routing\Route 
          * @static 
          */ 
         public static function get($uri, $action = null)
         {
-            return \Illuminate\Routing\Router::get($uri, $action);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->get($uri, $action);
         }
         
         /**
          * Register a new POST route with the router.
          *
          * @param string $uri
-         * @param \Closure|array|string|null $action
+         * @param \Closure|array|string|callable|null $action
          * @return \Illuminate\Routing\Route 
          * @static 
          */ 
         public static function post($uri, $action = null)
         {
-            return \Illuminate\Routing\Router::post($uri, $action);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->post($uri, $action);
         }
         
         /**
          * Register a new PUT route with the router.
          *
          * @param string $uri
-         * @param \Closure|array|string|null $action
+         * @param \Closure|array|string|callable|null $action
          * @return \Illuminate\Routing\Route 
          * @static 
          */ 
         public static function put($uri, $action = null)
         {
-            return \Illuminate\Routing\Router::put($uri, $action);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->put($uri, $action);
         }
         
         /**
          * Register a new PATCH route with the router.
          *
          * @param string $uri
-         * @param \Closure|array|string|null $action
+         * @param \Closure|array|string|callable|null $action
          * @return \Illuminate\Routing\Route 
          * @static 
          */ 
         public static function patch($uri, $action = null)
         {
-            return \Illuminate\Routing\Router::patch($uri, $action);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->patch($uri, $action);
         }
         
         /**
          * Register a new DELETE route with the router.
          *
          * @param string $uri
-         * @param \Closure|array|string|null $action
+         * @param \Closure|array|string|callable|null $action
          * @return \Illuminate\Routing\Route 
          * @static 
          */ 
         public static function delete($uri, $action = null)
         {
-            return \Illuminate\Routing\Router::delete($uri, $action);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->delete($uri, $action);
         }
         
         /**
          * Register a new OPTIONS route with the router.
          *
          * @param string $uri
-         * @param \Closure|array|string|null $action
+         * @param \Closure|array|string|callable|null $action
          * @return \Illuminate\Routing\Route 
          * @static 
          */ 
         public static function options($uri, $action = null)
         {
-            return \Illuminate\Routing\Router::options($uri, $action);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->options($uri, $action);
         }
         
         /**
          * Register a new route responding to all verbs.
          *
          * @param string $uri
-         * @param \Closure|array|string|null $action
+         * @param \Closure|array|string|callable|null $action
          * @return \Illuminate\Routing\Route 
          * @static 
          */ 
         public static function any($uri, $action = null)
         {
-            return \Illuminate\Routing\Router::any($uri, $action);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->any($uri, $action);
         }
         
         /**
          * Register a new Fallback route with the router.
          *
-         * @param \Closure|array|string|null $action
+         * @param \Closure|array|string|callable|null $action
          * @return \Illuminate\Routing\Route 
          * @static 
          */ 
         public static function fallback($action)
         {
-            return \Illuminate\Routing\Router::fallback($action);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->fallback($action);
         }
         
         /**
@@ -11825,7 +12532,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function redirect($uri, $destination, $status = 302)
         {
-            return \Illuminate\Routing\Router::redirect($uri, $destination, $status);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->redirect($uri, $destination, $status);
         }
         
         /**
@@ -11838,7 +12546,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function permanentRedirect($uri, $destination)
         {
-            return \Illuminate\Routing\Router::permanentRedirect($uri, $destination);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->permanentRedirect($uri, $destination);
         }
         
         /**
@@ -11852,7 +12561,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function view($uri, $view, $data = array())
         {
-            return \Illuminate\Routing\Router::view($uri, $view, $data);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->view($uri, $view, $data);
         }
         
         /**
@@ -11860,13 +12570,14 @@ namespace Illuminate\Support\Facades {
          *
          * @param array|string $methods
          * @param string $uri
-         * @param \Closure|array|string|null $action
+         * @param \Closure|array|string|callable|null $action
          * @return \Illuminate\Routing\Route 
          * @static 
          */ 
         public static function match($methods, $uri, $action = null)
         {
-            return \Illuminate\Routing\Router::match($methods, $uri, $action);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->match($methods, $uri, $action);
         }
         
         /**
@@ -11879,7 +12590,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function resources($resources, $options = array())
         {
-            \Illuminate\Routing\Router::resources($resources, $options);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->resources($resources, $options);
         }
         
         /**
@@ -11893,7 +12605,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function resource($name, $controller, $options = array())
         {
-            return \Illuminate\Routing\Router::resource($name, $controller, $options);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->resource($name, $controller, $options);
         }
         
         /**
@@ -11906,7 +12619,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function apiResources($resources, $options = array())
         {
-            \Illuminate\Routing\Router::apiResources($resources, $options);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->apiResources($resources, $options);
         }
         
         /**
@@ -11920,7 +12634,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function apiResource($name, $controller, $options = array())
         {
-            return \Illuminate\Routing\Router::apiResource($name, $controller, $options);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->apiResource($name, $controller, $options);
         }
         
         /**
@@ -11933,7 +12648,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function group($attributes, $routes)
         {
-            \Illuminate\Routing\Router::group($attributes, $routes);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->group($attributes, $routes);
         }
         
         /**
@@ -11945,7 +12661,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function mergeWithLastGroup($new)
         {
-            return \Illuminate\Routing\Router::mergeWithLastGroup($new);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->mergeWithLastGroup($new);
         }
         
         /**
@@ -11956,7 +12673,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getLastGroupPrefix()
         {
-            return \Illuminate\Routing\Router::getLastGroupPrefix();
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getLastGroupPrefix();
         }
         
         /**
@@ -11964,25 +12682,27 @@ namespace Illuminate\Support\Facades {
          *
          * @param array|string $methods
          * @param string $uri
-         * @param \Closure|array|string|null $action
+         * @param \Closure|array|string|callable|null $action
          * @return \Illuminate\Routing\Route 
          * @static 
          */ 
         public static function addRoute($methods, $uri, $action)
         {
-            return \Illuminate\Routing\Router::addRoute($methods, $uri, $action);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->addRoute($methods, $uri, $action);
         }
         
         /**
          * Return the response returned by the given route.
          *
          * @param string $name
-         * @return mixed 
+         * @return \Illuminate\Http\Response|\Illuminate\Http\JsonResponse 
          * @static 
          */ 
         public static function respondWithRoute($name)
         {
-            return \Illuminate\Routing\Router::respondWithRoute($name);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->respondWithRoute($name);
         }
         
         /**
@@ -11994,19 +12714,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function dispatch($request)
         {
-            return \Illuminate\Routing\Router::dispatch($request);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->dispatch($request);
         }
         
         /**
          * Dispatch the request to a route and return the response.
          *
          * @param \Illuminate\Http\Request $request
-         * @return mixed 
+         * @return \Illuminate\Http\Response|\Illuminate\Http\JsonResponse 
          * @static 
          */ 
         public static function dispatchToRoute($request)
         {
-            return \Illuminate\Routing\Router::dispatchToRoute($request);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->dispatchToRoute($request);
         }
         
         /**
@@ -12018,7 +12740,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function gatherRouteMiddleware($route)
         {
-            return \Illuminate\Routing\Router::gatherRouteMiddleware($route);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->gatherRouteMiddleware($route);
         }
         
         /**
@@ -12031,7 +12754,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function prepareResponse($request, $response)
         {
-            return \Illuminate\Routing\Router::prepareResponse($request, $response);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->prepareResponse($request, $response);
         }
         
         /**
@@ -12044,7 +12768,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function toResponse($request, $response)
         {
-            return \Illuminate\Routing\Router::toResponse($request, $response);
+                        return \Illuminate\Routing\Router::toResponse($request, $response);
         }
         
         /**
@@ -12052,11 +12776,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param \Illuminate\Routing\Route $route
          * @return \Illuminate\Routing\Route 
+         * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
          * @static 
          */ 
         public static function substituteBindings($route)
         {
-            return \Illuminate\Routing\Router::substituteBindings($route);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->substituteBindings($route);
         }
         
         /**
@@ -12064,11 +12790,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param \Illuminate\Routing\Route $route
          * @return void 
+         * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
          * @static 
          */ 
         public static function substituteImplicitBindings($route)
         {
-            \Illuminate\Routing\Router::substituteImplicitBindings($route);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->substituteImplicitBindings($route);
         }
         
         /**
@@ -12080,7 +12808,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function matched($callback)
         {
-            \Illuminate\Routing\Router::matched($callback);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->matched($callback);
         }
         
         /**
@@ -12091,7 +12820,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getMiddleware()
         {
-            return \Illuminate\Routing\Router::getMiddleware();
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getMiddleware();
         }
         
         /**
@@ -12099,12 +12829,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $name
          * @param string $class
-         * @return $this 
+         * @return \Illuminate\Routing\Router 
          * @static 
          */ 
         public static function aliasMiddleware($name, $class)
         {
-            return \Illuminate\Routing\Router::aliasMiddleware($name, $class);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->aliasMiddleware($name, $class);
         }
         
         /**
@@ -12116,7 +12847,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasMiddlewareGroup($name)
         {
-            return \Illuminate\Routing\Router::hasMiddlewareGroup($name);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->hasMiddlewareGroup($name);
         }
         
         /**
@@ -12127,7 +12859,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getMiddlewareGroups()
         {
-            return \Illuminate\Routing\Router::getMiddlewareGroups();
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getMiddlewareGroups();
         }
         
         /**
@@ -12135,12 +12868,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $name
          * @param array $middleware
-         * @return $this 
+         * @return \Illuminate\Routing\Router 
          * @static 
          */ 
         public static function middlewareGroup($name, $middleware)
         {
-            return \Illuminate\Routing\Router::middlewareGroup($name, $middleware);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->middlewareGroup($name, $middleware);
         }
         
         /**
@@ -12150,12 +12884,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $group
          * @param string $middleware
-         * @return $this 
+         * @return \Illuminate\Routing\Router 
          * @static 
          */ 
         public static function prependMiddlewareToGroup($group, $middleware)
         {
-            return \Illuminate\Routing\Router::prependMiddlewareToGroup($group, $middleware);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->prependMiddlewareToGroup($group, $middleware);
         }
         
         /**
@@ -12165,12 +12900,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $group
          * @param string $middleware
-         * @return $this 
+         * @return \Illuminate\Routing\Router 
          * @static 
          */ 
         public static function pushMiddlewareToGroup($group, $middleware)
         {
-            return \Illuminate\Routing\Router::pushMiddlewareToGroup($group, $middleware);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->pushMiddlewareToGroup($group, $middleware);
         }
         
         /**
@@ -12183,7 +12919,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function bind($key, $binder)
         {
-            \Illuminate\Routing\Router::bind($key, $binder);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->bind($key, $binder);
         }
         
         /**
@@ -12193,12 +12930,12 @@ namespace Illuminate\Support\Facades {
          * @param string $class
          * @param \Closure|null $callback
          * @return void 
-         * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
          * @static 
          */ 
         public static function model($key, $class, $callback = null)
         {
-            \Illuminate\Routing\Router::model($key, $class, $callback);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->model($key, $class, $callback);
         }
         
         /**
@@ -12210,7 +12947,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getBindingCallback($key)
         {
-            return \Illuminate\Routing\Router::getBindingCallback($key);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getBindingCallback($key);
         }
         
         /**
@@ -12221,7 +12959,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getPatterns()
         {
-            return \Illuminate\Routing\Router::getPatterns();
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getPatterns();
         }
         
         /**
@@ -12234,7 +12973,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function pattern($key, $pattern)
         {
-            \Illuminate\Routing\Router::pattern($key, $pattern);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->pattern($key, $pattern);
         }
         
         /**
@@ -12246,7 +12986,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function patterns($patterns)
         {
-            \Illuminate\Routing\Router::patterns($patterns);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->patterns($patterns);
         }
         
         /**
@@ -12257,7 +12998,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasGroupStack()
         {
-            return \Illuminate\Routing\Router::hasGroupStack();
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->hasGroupStack();
         }
         
         /**
@@ -12268,7 +13010,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getGroupStack()
         {
-            return \Illuminate\Routing\Router::getGroupStack();
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getGroupStack();
         }
         
         /**
@@ -12281,7 +13024,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function input($key, $default = null)
         {
-            return \Illuminate\Routing\Router::input($key, $default);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->input($key, $default);
         }
         
         /**
@@ -12292,7 +13036,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getCurrentRequest()
         {
-            return \Illuminate\Routing\Router::getCurrentRequest();
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getCurrentRequest();
         }
         
         /**
@@ -12303,18 +13048,20 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getCurrentRoute()
         {
-            return \Illuminate\Routing\Router::getCurrentRoute();
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getCurrentRoute();
         }
         
         /**
          * Get the currently dispatched route instance.
          *
-         * @return \Illuminate\Routing\Route 
+         * @return \Illuminate\Routing\Route|null 
          * @static 
          */ 
         public static function current()
         {
-            return \Illuminate\Routing\Router::current();
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->current();
         }
         
         /**
@@ -12326,7 +13073,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function has($name)
         {
-            return \Illuminate\Routing\Router::has($name);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->has($name);
         }
         
         /**
@@ -12337,7 +13085,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function currentRouteName()
         {
-            return \Illuminate\Routing\Router::currentRouteName();
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->currentRouteName();
         }
         
         /**
@@ -12349,7 +13098,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function is($patterns = null)
         {
-            return \Illuminate\Routing\Router::is($patterns);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->is($patterns);
         }
         
         /**
@@ -12361,7 +13111,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function currentRouteNamed($patterns = null)
         {
-            return \Illuminate\Routing\Router::currentRouteNamed($patterns);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->currentRouteNamed($patterns);
         }
         
         /**
@@ -12372,7 +13123,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function currentRouteAction()
         {
-            return \Illuminate\Routing\Router::currentRouteAction();
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->currentRouteAction();
         }
         
         /**
@@ -12384,7 +13136,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function uses($patterns = null)
         {
-            return \Illuminate\Routing\Router::uses($patterns);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->uses($patterns);
         }
         
         /**
@@ -12396,7 +13149,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function currentRouteUses($action)
         {
-            return \Illuminate\Routing\Router::currentRouteUses($action);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->currentRouteUses($action);
         }
         
         /**
@@ -12408,7 +13162,20 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function auth($options = array())
         {
-            \Illuminate\Routing\Router::auth($options);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->auth($options);
+        }
+        
+        /**
+         * Register the typical reset password routes for an application.
+         *
+         * @return void 
+         * @static 
+         */ 
+        public static function resetPassword()
+        {
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->resetPassword();
         }
         
         /**
@@ -12419,7 +13186,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function emailVerification()
         {
-            \Illuminate\Routing\Router::emailVerification();
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->emailVerification();
         }
         
         /**
@@ -12431,7 +13199,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function singularResourceParameters($singular = true)
         {
-            \Illuminate\Routing\Router::singularResourceParameters($singular);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->singularResourceParameters($singular);
         }
         
         /**
@@ -12443,7 +13212,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function resourceParameters($parameters = array())
         {
-            \Illuminate\Routing\Router::resourceParameters($parameters);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->resourceParameters($parameters);
         }
         
         /**
@@ -12455,7 +13225,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function resourceVerbs($verbs = array())
         {
-            return \Illuminate\Routing\Router::resourceVerbs($verbs);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->resourceVerbs($verbs);
         }
         
         /**
@@ -12466,7 +13237,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getRoutes()
         {
-            return \Illuminate\Routing\Router::getRoutes();
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->getRoutes();
         }
         
         /**
@@ -12478,7 +13250,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setRoutes($routes)
         {
-            \Illuminate\Routing\Router::setRoutes($routes);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        $instance->setRoutes($routes);
         }
         
         /**
@@ -12491,20 +13264,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function macro($name, $macro)
         {
-            \Illuminate\Routing\Router::macro($name, $macro);
+                        \Illuminate\Routing\Router::macro($name, $macro);
         }
         
         /**
          * Mix another object into the class.
          *
          * @param object $mixin
+         * @param bool $replace
          * @return void 
          * @throws \ReflectionException
          * @static 
          */ 
-        public static function mixin($mixin)
+        public static function mixin($mixin, $replace = true)
         {
-            \Illuminate\Routing\Router::mixin($mixin);
+                        \Illuminate\Routing\Router::mixin($mixin, $replace);
         }
         
         /**
@@ -12516,7 +13290,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasMacro($name)
         {
-            return \Illuminate\Routing\Router::hasMacro($name);
+                        return \Illuminate\Routing\Router::hasMacro($name);
         }
         
         /**
@@ -12530,7 +13304,18 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function macroCall($method, $parameters)
         {
-            return \Illuminate\Routing\Router::macroCall($method, $parameters);
+                        /** @var \Illuminate\Routing\Router $instance */
+                        return $instance->macroCall($method, $parameters);
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function impersonate()
+        {
+                        return \Illuminate\Routing\Router::impersonate();
         }
          
     }
@@ -12538,11 +13323,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static \Illuminate\Database\Schema\Builder create(string $table, \Closure $callback)
-     * @method static \Illuminate\Database\Schema\Builder drop(string $table)
-     * @method static \Illuminate\Database\Schema\Builder dropIfExists(string $table)
-     * @method static \Illuminate\Database\Schema\Builder table(string $table, \Closure $callback)
-     * @method static void defaultStringLength(int $length)
      * @see \Illuminate\Database\Schema\Builder
      */ 
     class Schema {
@@ -12556,7 +13336,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasTable($table)
         {
-            return \Illuminate\Database\Schema\MySqlBuilder::hasTable($table);
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->hasTable($table);
         }
         
         /**
@@ -12568,7 +13349,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getColumnListing($table)
         {
-            return \Illuminate\Database\Schema\MySqlBuilder::getColumnListing($table);
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->getColumnListing($table);
         }
         
         /**
@@ -12579,7 +13361,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function dropAllTables()
         {
-            \Illuminate\Database\Schema\MySqlBuilder::dropAllTables();
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->dropAllTables();
         }
         
         /**
@@ -12590,7 +13373,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function dropAllViews()
         {
-            \Illuminate\Database\Schema\MySqlBuilder::dropAllViews();
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->dropAllViews();
         }
         
         /**
@@ -12603,7 +13387,7 @@ namespace Illuminate\Support\Facades {
         public static function defaultStringLength($length)
         {
             //Method inherited from \Illuminate\Database\Schema\Builder            
-            \Illuminate\Database\Schema\MySqlBuilder::defaultStringLength($length);
+                        \Illuminate\Database\Schema\MySqlBuilder::defaultStringLength($length);
         }
         
         /**
@@ -12617,7 +13401,8 @@ namespace Illuminate\Support\Facades {
         public static function hasColumn($table, $column)
         {
             //Method inherited from \Illuminate\Database\Schema\Builder            
-            return \Illuminate\Database\Schema\MySqlBuilder::hasColumn($table, $column);
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->hasColumn($table, $column);
         }
         
         /**
@@ -12631,7 +13416,8 @@ namespace Illuminate\Support\Facades {
         public static function hasColumns($table, $columns)
         {
             //Method inherited from \Illuminate\Database\Schema\Builder            
-            return \Illuminate\Database\Schema\MySqlBuilder::hasColumns($table, $columns);
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->hasColumns($table, $columns);
         }
         
         /**
@@ -12645,7 +13431,8 @@ namespace Illuminate\Support\Facades {
         public static function getColumnType($table, $column)
         {
             //Method inherited from \Illuminate\Database\Schema\Builder            
-            return \Illuminate\Database\Schema\MySqlBuilder::getColumnType($table, $column);
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->getColumnType($table, $column);
         }
         
         /**
@@ -12659,7 +13446,8 @@ namespace Illuminate\Support\Facades {
         public static function table($table, $callback)
         {
             //Method inherited from \Illuminate\Database\Schema\Builder            
-            \Illuminate\Database\Schema\MySqlBuilder::table($table, $callback);
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->table($table, $callback);
         }
         
         /**
@@ -12673,7 +13461,8 @@ namespace Illuminate\Support\Facades {
         public static function create($table, $callback)
         {
             //Method inherited from \Illuminate\Database\Schema\Builder            
-            \Illuminate\Database\Schema\MySqlBuilder::create($table, $callback);
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->create($table, $callback);
         }
         
         /**
@@ -12686,7 +13475,8 @@ namespace Illuminate\Support\Facades {
         public static function drop($table)
         {
             //Method inherited from \Illuminate\Database\Schema\Builder            
-            \Illuminate\Database\Schema\MySqlBuilder::drop($table);
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->drop($table);
         }
         
         /**
@@ -12699,7 +13489,8 @@ namespace Illuminate\Support\Facades {
         public static function dropIfExists($table)
         {
             //Method inherited from \Illuminate\Database\Schema\Builder            
-            \Illuminate\Database\Schema\MySqlBuilder::dropIfExists($table);
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->dropIfExists($table);
         }
         
         /**
@@ -12713,7 +13504,8 @@ namespace Illuminate\Support\Facades {
         public static function rename($from, $to)
         {
             //Method inherited from \Illuminate\Database\Schema\Builder            
-            \Illuminate\Database\Schema\MySqlBuilder::rename($from, $to);
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->rename($from, $to);
         }
         
         /**
@@ -12725,7 +13517,8 @@ namespace Illuminate\Support\Facades {
         public static function enableForeignKeyConstraints()
         {
             //Method inherited from \Illuminate\Database\Schema\Builder            
-            return \Illuminate\Database\Schema\MySqlBuilder::enableForeignKeyConstraints();
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->enableForeignKeyConstraints();
         }
         
         /**
@@ -12737,7 +13530,8 @@ namespace Illuminate\Support\Facades {
         public static function disableForeignKeyConstraints()
         {
             //Method inherited from \Illuminate\Database\Schema\Builder            
-            return \Illuminate\Database\Schema\MySqlBuilder::disableForeignKeyConstraints();
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->disableForeignKeyConstraints();
         }
         
         /**
@@ -12749,20 +13543,22 @@ namespace Illuminate\Support\Facades {
         public static function getConnection()
         {
             //Method inherited from \Illuminate\Database\Schema\Builder            
-            return \Illuminate\Database\Schema\MySqlBuilder::getConnection();
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->getConnection();
         }
         
         /**
          * Set the database connection instance.
          *
          * @param \Illuminate\Database\Connection $connection
-         * @return $this 
+         * @return \Illuminate\Database\Schema\MySqlBuilder 
          * @static 
          */ 
         public static function setConnection($connection)
         {
             //Method inherited from \Illuminate\Database\Schema\Builder            
-            return \Illuminate\Database\Schema\MySqlBuilder::setConnection($connection);
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        return $instance->setConnection($connection);
         }
         
         /**
@@ -12775,7 +13571,8 @@ namespace Illuminate\Support\Facades {
         public static function blueprintResolver($resolver)
         {
             //Method inherited from \Illuminate\Database\Schema\Builder            
-            \Illuminate\Database\Schema\MySqlBuilder::blueprintResolver($resolver);
+                        /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
+                        $instance->blueprintResolver($resolver);
         }
          
     }
@@ -12783,27 +13580,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static string getName()
-     * @method static string getId()
-     * @method static void setId(string $id)
-     * @method static bool start()
-     * @method static bool save()
-     * @method static array all()
-     * @method static bool exists(string|array $key)
-     * @method static bool has(string|array $key)
-     * @method static mixed get(string $key, $default = null)
-     * @method static void put(string|array $key, $value = null)
-     * @method static string token()
-     * @method static mixed remove(string $key)
-     * @method static void forget(string|array $keys)
-     * @method static void flush()
-     * @method static bool migrate(bool $destroy = false)
-     * @method static bool isStarted()
-     * @method static string|null previousUrl()
-     * @method static void setPreviousUrl(string $url)
-     * @method static \SessionHandlerInterface getHandler()
-     * @method static bool handlerNeedsRequest()
-     * @method static void setRequestOnHandler(\Illuminate\Http\Request $request)
      * @see \Illuminate\Session\SessionManager
      * @see \Illuminate\Session\Store
      */ 
@@ -12817,7 +13593,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getSessionConfig()
         {
-            return \Illuminate\Session\SessionManager::getSessionConfig();
+                        /** @var \Illuminate\Session\SessionManager $instance */
+                        return $instance->getSessionConfig();
         }
         
         /**
@@ -12828,7 +13605,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDefaultDriver()
         {
-            return \Illuminate\Session\SessionManager::getDefaultDriver();
+                        /** @var \Illuminate\Session\SessionManager $instance */
+                        return $instance->getDefaultDriver();
         }
         
         /**
@@ -12840,7 +13618,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setDefaultDriver($name)
         {
-            \Illuminate\Session\SessionManager::setDefaultDriver($name);
+                        /** @var \Illuminate\Session\SessionManager $instance */
+                        $instance->setDefaultDriver($name);
         }
         
         /**
@@ -12854,7 +13633,8 @@ namespace Illuminate\Support\Facades {
         public static function driver($driver = null)
         {
             //Method inherited from \Illuminate\Support\Manager            
-            return \Illuminate\Session\SessionManager::driver($driver);
+                        /** @var \Illuminate\Session\SessionManager $instance */
+                        return $instance->driver($driver);
         }
         
         /**
@@ -12862,13 +13642,14 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return $this 
+         * @return \Illuminate\Session\SessionManager 
          * @static 
          */ 
         public static function extend($driver, $callback)
         {
             //Method inherited from \Illuminate\Support\Manager            
-            return \Illuminate\Session\SessionManager::extend($driver, $callback);
+                        /** @var \Illuminate\Session\SessionManager $instance */
+                        return $instance->extend($driver, $callback);
         }
         
         /**
@@ -12880,7 +13661,8 @@ namespace Illuminate\Support\Facades {
         public static function getDrivers()
         {
             //Method inherited from \Illuminate\Support\Manager            
-            return \Illuminate\Session\SessionManager::getDrivers();
+                        /** @var \Illuminate\Session\SessionManager $instance */
+                        return $instance->getDrivers();
         }
         
         /**
@@ -12891,7 +13673,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function start()
         {
-            return \Illuminate\Session\Store::start();
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->start();
         }
         
         /**
@@ -12902,7 +13685,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function save()
         {
-            return \Illuminate\Session\Store::save();
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->save();
         }
         
         /**
@@ -12913,7 +13697,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function ageFlashData()
         {
-            \Illuminate\Session\Store::ageFlashData();
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->ageFlashData();
         }
         
         /**
@@ -12924,7 +13709,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function all()
         {
-            return \Illuminate\Session\Store::all();
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->all();
         }
         
         /**
@@ -12936,7 +13722,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function exists($key)
         {
-            return \Illuminate\Session\Store::exists($key);
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->exists($key);
         }
         
         /**
@@ -12948,7 +13735,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function has($key)
         {
-            return \Illuminate\Session\Store::has($key);
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->has($key);
         }
         
         /**
@@ -12961,7 +13749,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function get($key, $default = null)
         {
-            return \Illuminate\Session\Store::get($key, $default);
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->get($key, $default);
         }
         
         /**
@@ -12974,7 +13763,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function pull($key, $default = null)
         {
-            return \Illuminate\Session\Store::pull($key, $default);
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->pull($key, $default);
         }
         
         /**
@@ -12986,7 +13776,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasOldInput($key = null)
         {
-            return \Illuminate\Session\Store::hasOldInput($key);
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->hasOldInput($key);
         }
         
         /**
@@ -12999,7 +13790,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getOldInput($key = null, $default = null)
         {
-            return \Illuminate\Session\Store::getOldInput($key, $default);
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->getOldInput($key, $default);
         }
         
         /**
@@ -13011,7 +13803,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function replace($attributes)
         {
-            \Illuminate\Session\Store::replace($attributes);
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->replace($attributes);
         }
         
         /**
@@ -13024,7 +13817,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function put($key, $value = null)
         {
-            \Illuminate\Session\Store::put($key, $value);
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->put($key, $value);
         }
         
         /**
@@ -13037,7 +13831,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function remember($key, $callback)
         {
-            return \Illuminate\Session\Store::remember($key, $callback);
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->remember($key, $callback);
         }
         
         /**
@@ -13050,7 +13845,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function push($key, $value)
         {
-            \Illuminate\Session\Store::push($key, $value);
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->push($key, $value);
         }
         
         /**
@@ -13063,7 +13859,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function increment($key, $amount = 1)
         {
-            return \Illuminate\Session\Store::increment($key, $amount);
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->increment($key, $amount);
         }
         
         /**
@@ -13076,7 +13873,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function decrement($key, $amount = 1)
         {
-            return \Illuminate\Session\Store::decrement($key, $amount);
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->decrement($key, $amount);
         }
         
         /**
@@ -13089,7 +13887,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flash($key, $value = true)
         {
-            \Illuminate\Session\Store::flash($key, $value);
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->flash($key, $value);
         }
         
         /**
@@ -13102,7 +13901,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function now($key, $value)
         {
-            \Illuminate\Session\Store::now($key, $value);
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->now($key, $value);
         }
         
         /**
@@ -13113,7 +13913,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function reflash()
         {
-            \Illuminate\Session\Store::reflash();
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->reflash();
         }
         
         /**
@@ -13125,7 +13926,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function keep($keys = null)
         {
-            \Illuminate\Session\Store::keep($keys);
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->keep($keys);
         }
         
         /**
@@ -13137,7 +13939,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flashInput($value)
         {
-            \Illuminate\Session\Store::flashInput($value);
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->flashInput($value);
         }
         
         /**
@@ -13149,7 +13952,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function remove($key)
         {
-            return \Illuminate\Session\Store::remove($key);
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->remove($key);
         }
         
         /**
@@ -13161,7 +13965,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function forget($keys)
         {
-            \Illuminate\Session\Store::forget($keys);
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->forget($keys);
         }
         
         /**
@@ -13172,7 +13977,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flush()
         {
-            \Illuminate\Session\Store::flush();
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->flush();
         }
         
         /**
@@ -13183,7 +13989,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function invalidate()
         {
-            return \Illuminate\Session\Store::invalidate();
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->invalidate();
         }
         
         /**
@@ -13195,7 +14002,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function regenerate($destroy = false)
         {
-            return \Illuminate\Session\Store::regenerate($destroy);
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->regenerate($destroy);
         }
         
         /**
@@ -13207,7 +14015,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function migrate($destroy = false)
         {
-            return \Illuminate\Session\Store::migrate($destroy);
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->migrate($destroy);
         }
         
         /**
@@ -13218,7 +14027,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function isStarted()
         {
-            return \Illuminate\Session\Store::isStarted();
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->isStarted();
         }
         
         /**
@@ -13229,7 +14039,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getName()
         {
-            return \Illuminate\Session\Store::getName();
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->getName();
         }
         
         /**
@@ -13241,7 +14052,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setName($name)
         {
-            \Illuminate\Session\Store::setName($name);
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->setName($name);
         }
         
         /**
@@ -13252,7 +14064,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getId()
         {
-            return \Illuminate\Session\Store::getId();
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->getId();
         }
         
         /**
@@ -13264,7 +14077,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setId($id)
         {
-            \Illuminate\Session\Store::setId($id);
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->setId($id);
         }
         
         /**
@@ -13276,7 +14090,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function isValidId($id)
         {
-            return \Illuminate\Session\Store::isValidId($id);
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->isValidId($id);
         }
         
         /**
@@ -13288,7 +14103,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setExists($value)
         {
-            \Illuminate\Session\Store::setExists($value);
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->setExists($value);
         }
         
         /**
@@ -13299,7 +14115,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function token()
         {
-            return \Illuminate\Session\Store::token();
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->token();
         }
         
         /**
@@ -13310,7 +14127,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function regenerateToken()
         {
-            \Illuminate\Session\Store::regenerateToken();
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->regenerateToken();
         }
         
         /**
@@ -13321,7 +14139,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function previousUrl()
         {
-            return \Illuminate\Session\Store::previousUrl();
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->previousUrl();
         }
         
         /**
@@ -13333,7 +14152,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setPreviousUrl($url)
         {
-            \Illuminate\Session\Store::setPreviousUrl($url);
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->setPreviousUrl($url);
         }
         
         /**
@@ -13344,7 +14164,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getHandler()
         {
-            return \Illuminate\Session\Store::getHandler();
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->getHandler();
         }
         
         /**
@@ -13355,7 +14176,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function handlerNeedsRequest()
         {
-            return \Illuminate\Session\Store::handlerNeedsRequest();
+                        /** @var \Illuminate\Session\Store $instance */
+                        return $instance->handlerNeedsRequest();
         }
         
         /**
@@ -13367,7 +14189,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setRequestOnHandler($request)
         {
-            \Illuminate\Session\Store::setRequestOnHandler($request);
+                        /** @var \Illuminate\Session\Store $instance */
+                        $instance->setRequestOnHandler($request);
         }
          
     }
@@ -13375,7 +14198,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static \Illuminate\Contracts\Filesystem\Filesystem disk(string $name = null)
      * @see \Illuminate\Filesystem\FilesystemManager
      */ 
     class Storage {
@@ -13389,7 +14211,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function drive($name = null)
         {
-            return \Illuminate\Filesystem\FilesystemManager::drive($name);
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->drive($name);
         }
         
         /**
@@ -13401,7 +14224,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function disk($name = null)
         {
-            return \Illuminate\Filesystem\FilesystemManager::disk($name);
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->disk($name);
         }
         
         /**
@@ -13412,7 +14236,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function cloud()
         {
-            return \Illuminate\Filesystem\FilesystemManager::cloud();
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->cloud();
         }
         
         /**
@@ -13424,7 +14249,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function createLocalDriver($config)
         {
-            return \Illuminate\Filesystem\FilesystemManager::createLocalDriver($config);
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->createLocalDriver($config);
         }
         
         /**
@@ -13436,7 +14262,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function createFtpDriver($config)
         {
-            return \Illuminate\Filesystem\FilesystemManager::createFtpDriver($config);
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->createFtpDriver($config);
         }
         
         /**
@@ -13448,7 +14275,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function createSftpDriver($config)
         {
-            return \Illuminate\Filesystem\FilesystemManager::createSftpDriver($config);
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->createSftpDriver($config);
         }
         
         /**
@@ -13460,7 +14288,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function createS3Driver($config)
         {
-            return \Illuminate\Filesystem\FilesystemManager::createS3Driver($config);
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->createS3Driver($config);
         }
         
         /**
@@ -13472,7 +14301,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function createRackspaceDriver($config)
         {
-            return \Illuminate\Filesystem\FilesystemManager::createRackspaceDriver($config);
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->createRackspaceDriver($config);
         }
         
         /**
@@ -13480,12 +14310,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $name
          * @param mixed $disk
-         * @return $this 
+         * @return \Illuminate\Filesystem\FilesystemManager 
          * @static 
          */ 
         public static function set($name, $disk)
         {
-            return \Illuminate\Filesystem\FilesystemManager::set($name, $disk);
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->set($name, $disk);
         }
         
         /**
@@ -13496,7 +14327,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDefaultDriver()
         {
-            return \Illuminate\Filesystem\FilesystemManager::getDefaultDriver();
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->getDefaultDriver();
         }
         
         /**
@@ -13507,19 +14339,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDefaultCloudDriver()
         {
-            return \Illuminate\Filesystem\FilesystemManager::getDefaultCloudDriver();
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->getDefaultCloudDriver();
         }
         
         /**
          * Unset the given disk instances.
          *
          * @param array|string $disk
-         * @return $this 
+         * @return \Illuminate\Filesystem\FilesystemManager 
          * @static 
          */ 
         public static function forgetDisk($disk)
         {
-            return \Illuminate\Filesystem\FilesystemManager::forgetDisk($disk);
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->forgetDisk($disk);
         }
         
         /**
@@ -13527,36 +14361,39 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return $this 
+         * @return \Illuminate\Filesystem\FilesystemManager 
          * @static 
          */ 
         public static function extend($driver, $callback)
         {
-            return \Illuminate\Filesystem\FilesystemManager::extend($driver, $callback);
+                        /** @var \Illuminate\Filesystem\FilesystemManager $instance */
+                        return $instance->extend($driver, $callback);
         }
         
         /**
          * Assert that the given file exists.
          *
-         * @param string $path
-         * @return void 
+         * @param string|array $path
+         * @return \Illuminate\Filesystem\FilesystemAdapter 
          * @static 
          */ 
         public static function assertExists($path)
         {
-            \Illuminate\Filesystem\FilesystemAdapter::assertExists($path);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->assertExists($path);
         }
         
         /**
          * Assert that the given file does not exist.
          *
-         * @param string $path
-         * @return void 
+         * @param string|array $path
+         * @return \Illuminate\Filesystem\FilesystemAdapter 
          * @static 
          */ 
         public static function assertMissing($path)
         {
-            \Illuminate\Filesystem\FilesystemAdapter::assertMissing($path);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->assertMissing($path);
         }
         
         /**
@@ -13568,7 +14405,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function exists($path)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::exists($path);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->exists($path);
         }
         
         /**
@@ -13580,7 +14418,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function path($path)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::path($path);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->path($path);
         }
         
         /**
@@ -13593,7 +14432,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function get($path)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::get($path);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->get($path);
         }
         
         /**
@@ -13608,7 +14448,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function response($path, $name = null, $headers = array(), $disposition = 'inline')
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::response($path, $name, $headers, $disposition);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->response($path, $name, $headers, $disposition);
         }
         
         /**
@@ -13622,7 +14463,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function download($path, $name = null, $headers = array())
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::download($path, $name, $headers);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->download($path, $name, $headers);
         }
         
         /**
@@ -13636,7 +14478,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function put($path, $contents, $options = array())
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::put($path, $contents, $options);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->put($path, $contents, $options);
         }
         
         /**
@@ -13650,7 +14493,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function putFile($path, $file, $options = array())
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::putFile($path, $file, $options);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->putFile($path, $file, $options);
         }
         
         /**
@@ -13665,7 +14509,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function putFileAs($path, $file, $name, $options = array())
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::putFileAs($path, $file, $name, $options);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->putFileAs($path, $file, $name, $options);
         }
         
         /**
@@ -13677,7 +14522,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getVisibility($path)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::getVisibility($path);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->getVisibility($path);
         }
         
         /**
@@ -13690,7 +14536,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setVisibility($path, $visibility)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::setVisibility($path, $visibility);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->setVisibility($path, $visibility);
         }
         
         /**
@@ -13704,7 +14551,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function prepend($path, $data, $separator = '')
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::prepend($path, $data, $separator);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->prepend($path, $data, $separator);
         }
         
         /**
@@ -13718,7 +14566,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function append($path, $data, $separator = '')
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::append($path, $data, $separator);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->append($path, $data, $separator);
         }
         
         /**
@@ -13730,7 +14579,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function delete($paths)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::delete($paths);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->delete($paths);
         }
         
         /**
@@ -13743,7 +14593,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function copy($from, $to)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::copy($from, $to);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->copy($from, $to);
         }
         
         /**
@@ -13756,7 +14607,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function move($from, $to)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::move($from, $to);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->move($from, $to);
         }
         
         /**
@@ -13768,7 +14620,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function size($path)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::size($path);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->size($path);
         }
         
         /**
@@ -13780,7 +14633,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function mimeType($path)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::mimeType($path);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->mimeType($path);
         }
         
         /**
@@ -13792,7 +14646,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function lastModified($path)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::lastModified($path);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->lastModified($path);
         }
         
         /**
@@ -13805,7 +14660,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function url($path)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::url($path);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->url($path);
         }
         
         /**
@@ -13818,7 +14674,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function readStream($path)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::readStream($path);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->readStream($path);
         }
         
         /**
@@ -13826,7 +14683,7 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $path
          * @param resource $resource
-         * @param mixed $options
+         * @param array $options
          * @return bool 
          * @throws \InvalidArgumentException If $resource is not a file handle.
          * @throws FileExistsException
@@ -13834,7 +14691,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function writeStream($path, $resource, $options = array())
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::writeStream($path, $resource, $options);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->writeStream($path, $resource, $options);
         }
         
         /**
@@ -13849,7 +14707,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function temporaryUrl($path, $expiration, $options = array())
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::temporaryUrl($path, $expiration, $options);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->temporaryUrl($path, $expiration, $options);
         }
         
         /**
@@ -13864,7 +14723,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getAwsTemporaryUrl($adapter, $path, $expiration, $options)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::getAwsTemporaryUrl($adapter, $path, $expiration, $options);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->getAwsTemporaryUrl($adapter, $path, $expiration, $options);
         }
         
         /**
@@ -13879,7 +14739,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getRackspaceTemporaryUrl($adapter, $path, $expiration, $options)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::getRackspaceTemporaryUrl($adapter, $path, $expiration, $options);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->getRackspaceTemporaryUrl($adapter, $path, $expiration, $options);
         }
         
         /**
@@ -13892,7 +14753,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function files($directory = null, $recursive = false)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::files($directory, $recursive);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->files($directory, $recursive);
         }
         
         /**
@@ -13904,7 +14766,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function allFiles($directory = null)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::allFiles($directory);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->allFiles($directory);
         }
         
         /**
@@ -13917,7 +14780,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function directories($directory = null, $recursive = false)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::directories($directory, $recursive);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->directories($directory, $recursive);
         }
         
         /**
@@ -13929,7 +14793,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function allDirectories($directory = null)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::allDirectories($directory);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->allDirectories($directory);
         }
         
         /**
@@ -13941,7 +14806,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function makeDirectory($path)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::makeDirectory($path);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->makeDirectory($path);
         }
         
         /**
@@ -13953,7 +14819,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function deleteDirectory($directory)
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::deleteDirectory($directory);
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->deleteDirectory($directory);
         }
         
         /**
@@ -13964,7 +14831,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flushCache()
         {
-            \Illuminate\Filesystem\FilesystemAdapter::flushCache();
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        $instance->flushCache();
         }
         
         /**
@@ -13975,7 +14843,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDriver()
         {
-            return \Illuminate\Filesystem\FilesystemAdapter::getDriver();
+                        /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
+                        return $instance->getDriver();
         }
          
     }
@@ -13983,19 +14852,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static string current()
-     * @method static string full()
-     * @method static string previous($fallback = false)
-     * @method static string to(string $path, $extra = [], bool $secure = null)
-     * @method static string secure(string $path, array $parameters = [])
-     * @method static string asset(string $path, bool $secure = null)
-     * @method static string route(string $name, $parameters = [], bool $absolute = true)
-     * @method static string action(string $action, $parameters = [], bool $absolute = true)
-     * @method static \Illuminate\Contracts\Routing\UrlGenerator setRootControllerNamespace(string $rootNamespace)
-     * @method static string signedRoute(string $name, array $parameters = [], \DateTimeInterface|int $expiration = null)
-     * @method static string temporarySignedRoute(string $name, \DateTimeInterface|int $expiration, array $parameters = [])
-     * @method static string hasValidSignature(\Illuminate\Http\Request $request)
-     * @method static void defaults(array $defaults)
      * @see \Illuminate\Routing\UrlGenerator
      */ 
     class URL {
@@ -14008,7 +14864,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function full()
         {
-            return \Illuminate\Routing\UrlGenerator::full();
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->full();
         }
         
         /**
@@ -14019,7 +14876,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function current()
         {
-            return \Illuminate\Routing\UrlGenerator::current();
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->current();
         }
         
         /**
@@ -14031,7 +14889,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function previous($fallback = false)
         {
-            return \Illuminate\Routing\UrlGenerator::previous($fallback);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->previous($fallback);
         }
         
         /**
@@ -14045,7 +14904,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function to($path, $extra = array(), $secure = null)
         {
-            return \Illuminate\Routing\UrlGenerator::to($path, $extra, $secure);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->to($path, $extra, $secure);
         }
         
         /**
@@ -14058,7 +14918,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function secure($path, $parameters = array())
         {
-            return \Illuminate\Routing\UrlGenerator::secure($path, $parameters);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->secure($path, $parameters);
         }
         
         /**
@@ -14071,7 +14932,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function asset($path, $secure = null)
         {
-            return \Illuminate\Routing\UrlGenerator::asset($path, $secure);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->asset($path, $secure);
         }
         
         /**
@@ -14083,7 +14945,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function secureAsset($path)
         {
-            return \Illuminate\Routing\UrlGenerator::secureAsset($path);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->secureAsset($path);
         }
         
         /**
@@ -14097,7 +14960,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assetFrom($root, $path, $secure = null)
         {
-            return \Illuminate\Routing\UrlGenerator::assetFrom($root, $path, $secure);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->assetFrom($root, $path, $secure);
         }
         
         /**
@@ -14109,7 +14973,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function formatScheme($secure = null)
         {
-            return \Illuminate\Routing\UrlGenerator::formatScheme($secure);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->formatScheme($secure);
         }
         
         /**
@@ -14117,21 +14982,22 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $name
          * @param array $parameters
-         * @param \DateTimeInterface|int $expiration
+         * @param \DateTimeInterface|\DateInterval|int $expiration
          * @param bool $absolute
          * @return string 
          * @static 
          */ 
         public static function signedRoute($name, $parameters = array(), $expiration = null, $absolute = true)
         {
-            return \Illuminate\Routing\UrlGenerator::signedRoute($name, $parameters, $expiration, $absolute);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->signedRoute($name, $parameters, $expiration, $absolute);
         }
         
         /**
          * Create a temporary signed route URL for a named route.
          *
          * @param string $name
-         * @param \DateTimeInterface|int $expiration
+         * @param \DateTimeInterface|\DateInterval|int $expiration
          * @param array $parameters
          * @param bool $absolute
          * @return string 
@@ -14139,19 +15005,22 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function temporarySignedRoute($name, $expiration, $parameters = array(), $absolute = true)
         {
-            return \Illuminate\Routing\UrlGenerator::temporarySignedRoute($name, $expiration, $parameters, $absolute);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->temporarySignedRoute($name, $expiration, $parameters, $absolute);
         }
         
         /**
          * Determine if the given request has a valid signature.
          *
          * @param \Illuminate\Http\Request $request
+         * @param bool $absolute
          * @return bool 
          * @static 
          */ 
-        public static function hasValidSignature($request)
+        public static function hasValidSignature($request, $absolute = true)
         {
-            return \Illuminate\Routing\UrlGenerator::hasValidSignature($request);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->hasValidSignature($request, $absolute);
         }
         
         /**
@@ -14166,7 +15035,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function route($name, $parameters = array(), $absolute = true)
         {
-            return \Illuminate\Routing\UrlGenerator::route($name, $parameters, $absolute);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->route($name, $parameters, $absolute);
         }
         
         /**
@@ -14181,7 +15051,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function action($action, $parameters = array(), $absolute = true)
         {
-            return \Illuminate\Routing\UrlGenerator::action($action, $parameters, $absolute);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->action($action, $parameters, $absolute);
         }
         
         /**
@@ -14193,7 +15064,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function formatParameters($parameters)
         {
-            return \Illuminate\Routing\UrlGenerator::formatParameters($parameters);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->formatParameters($parameters);
         }
         
         /**
@@ -14206,7 +15078,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function formatRoot($scheme, $root = null)
         {
-            return \Illuminate\Routing\UrlGenerator::formatRoot($scheme, $root);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->formatRoot($scheme, $root);
         }
         
         /**
@@ -14220,7 +15093,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function format($root, $path, $route = null)
         {
-            return \Illuminate\Routing\UrlGenerator::format($root, $path, $route);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->format($root, $path, $route);
         }
         
         /**
@@ -14232,7 +15106,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function isValidUrl($path)
         {
-            return \Illuminate\Routing\UrlGenerator::isValidUrl($path);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->isValidUrl($path);
         }
         
         /**
@@ -14244,7 +15119,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function defaults($defaults)
         {
-            \Illuminate\Routing\UrlGenerator::defaults($defaults);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        $instance->defaults($defaults);
         }
         
         /**
@@ -14255,19 +15131,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDefaultParameters()
         {
-            return \Illuminate\Routing\UrlGenerator::getDefaultParameters();
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->getDefaultParameters();
         }
         
         /**
          * Force the scheme for URLs.
          *
-         * @param string $schema
+         * @param string $scheme
          * @return void 
          * @static 
          */ 
-        public static function forceScheme($schema)
+        public static function forceScheme($scheme)
         {
-            \Illuminate\Routing\UrlGenerator::forceScheme($schema);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        $instance->forceScheme($scheme);
         }
         
         /**
@@ -14279,31 +15157,34 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function forceRootUrl($root)
         {
-            \Illuminate\Routing\UrlGenerator::forceRootUrl($root);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        $instance->forceRootUrl($root);
         }
         
         /**
          * Set a callback to be used to format the host of generated URLs.
          *
          * @param \Closure $callback
-         * @return $this 
+         * @return \Illuminate\Routing\UrlGenerator 
          * @static 
          */ 
         public static function formatHostUsing($callback)
         {
-            return \Illuminate\Routing\UrlGenerator::formatHostUsing($callback);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->formatHostUsing($callback);
         }
         
         /**
          * Set a callback to be used to format the path of generated URLs.
          *
          * @param \Closure $callback
-         * @return $this 
+         * @return \Illuminate\Routing\UrlGenerator 
          * @static 
          */ 
         public static function formatPathUsing($callback)
         {
-            return \Illuminate\Routing\UrlGenerator::formatPathUsing($callback);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->formatPathUsing($callback);
         }
         
         /**
@@ -14314,7 +15195,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function pathFormatter()
         {
-            return \Illuminate\Routing\UrlGenerator::pathFormatter();
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->pathFormatter();
         }
         
         /**
@@ -14325,7 +15207,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getRequest()
         {
-            return \Illuminate\Routing\UrlGenerator::getRequest();
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->getRequest();
         }
         
         /**
@@ -14337,55 +15220,60 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setRequest($request)
         {
-            \Illuminate\Routing\UrlGenerator::setRequest($request);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        $instance->setRequest($request);
         }
         
         /**
          * Set the route collection.
          *
          * @param \Illuminate\Routing\RouteCollection $routes
-         * @return $this 
+         * @return \Illuminate\Routing\UrlGenerator 
          * @static 
          */ 
         public static function setRoutes($routes)
         {
-            return \Illuminate\Routing\UrlGenerator::setRoutes($routes);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->setRoutes($routes);
         }
         
         /**
          * Set the session resolver for the generator.
          *
          * @param callable $sessionResolver
-         * @return $this 
+         * @return \Illuminate\Routing\UrlGenerator 
          * @static 
          */ 
         public static function setSessionResolver($sessionResolver)
         {
-            return \Illuminate\Routing\UrlGenerator::setSessionResolver($sessionResolver);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->setSessionResolver($sessionResolver);
         }
         
         /**
          * Set the encryption key resolver.
          *
          * @param callable $keyResolver
-         * @return $this 
+         * @return \Illuminate\Routing\UrlGenerator 
          * @static 
          */ 
         public static function setKeyResolver($keyResolver)
         {
-            return \Illuminate\Routing\UrlGenerator::setKeyResolver($keyResolver);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->setKeyResolver($keyResolver);
         }
         
         /**
          * Set the root controller namespace.
          *
          * @param string $rootNamespace
-         * @return $this 
+         * @return \Illuminate\Routing\UrlGenerator 
          * @static 
          */ 
         public static function setRootControllerNamespace($rootNamespace)
         {
-            return \Illuminate\Routing\UrlGenerator::setRootControllerNamespace($rootNamespace);
+                        /** @var \Illuminate\Routing\UrlGenerator $instance */
+                        return $instance->setRootControllerNamespace($rootNamespace);
         }
         
         /**
@@ -14398,20 +15286,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function macro($name, $macro)
         {
-            \Illuminate\Routing\UrlGenerator::macro($name, $macro);
+                        \Illuminate\Routing\UrlGenerator::macro($name, $macro);
         }
         
         /**
          * Mix another object into the class.
          *
          * @param object $mixin
+         * @param bool $replace
          * @return void 
          * @throws \ReflectionException
          * @static 
          */ 
-        public static function mixin($mixin)
+        public static function mixin($mixin, $replace = true)
         {
-            \Illuminate\Routing\UrlGenerator::mixin($mixin);
+                        \Illuminate\Routing\UrlGenerator::mixin($mixin, $replace);
         }
         
         /**
@@ -14423,7 +15312,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasMacro($name)
         {
-            return \Illuminate\Routing\UrlGenerator::hasMacro($name);
+                        return \Illuminate\Routing\UrlGenerator::hasMacro($name);
         }
          
     }
@@ -14431,10 +15320,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static \Illuminate\Contracts\Validation\Validator make(array $data, array $rules, array $messages = [], array $customAttributes = [])
-     * @method static void extend(string $rule, \Closure|string $extension, string $message = null)
-     * @method static void extendImplicit(string $rule, \Closure|string $extension, string $message = null)
-     * @method static void replacer(string $rule, \Closure|string $replacer)
      * @see \Illuminate\Validation\Factory
      */ 
     class Validator {
@@ -14451,7 +15336,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function make($data, $rules, $messages = array(), $customAttributes = array())
         {
-            return \Illuminate\Validation\Factory::make($data, $rules, $messages, $customAttributes);
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        return $instance->make($data, $rules, $messages, $customAttributes);
         }
         
         /**
@@ -14467,7 +15353,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function validate($data, $rules, $messages = array(), $customAttributes = array())
         {
-            return \Illuminate\Validation\Factory::validate($data, $rules, $messages, $customAttributes);
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        return $instance->validate($data, $rules, $messages, $customAttributes);
         }
         
         /**
@@ -14481,7 +15368,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function extend($rule, $extension, $message = null)
         {
-            \Illuminate\Validation\Factory::extend($rule, $extension, $message);
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        $instance->extend($rule, $extension, $message);
         }
         
         /**
@@ -14495,7 +15383,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function extendImplicit($rule, $extension, $message = null)
         {
-            \Illuminate\Validation\Factory::extendImplicit($rule, $extension, $message);
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        $instance->extendImplicit($rule, $extension, $message);
         }
         
         /**
@@ -14509,7 +15398,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function extendDependent($rule, $extension, $message = null)
         {
-            \Illuminate\Validation\Factory::extendDependent($rule, $extension, $message);
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        $instance->extendDependent($rule, $extension, $message);
         }
         
         /**
@@ -14522,7 +15412,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function replacer($rule, $replacer)
         {
-            \Illuminate\Validation\Factory::replacer($rule, $replacer);
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        $instance->replacer($rule, $replacer);
         }
         
         /**
@@ -14534,7 +15425,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function resolver($resolver)
         {
-            \Illuminate\Validation\Factory::resolver($resolver);
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        $instance->resolver($resolver);
         }
         
         /**
@@ -14545,7 +15437,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getTranslator()
         {
-            return \Illuminate\Validation\Factory::getTranslator();
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        return $instance->getTranslator();
         }
         
         /**
@@ -14556,7 +15449,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getPresenceVerifier()
         {
-            return \Illuminate\Validation\Factory::getPresenceVerifier();
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        return $instance->getPresenceVerifier();
         }
         
         /**
@@ -14568,7 +15462,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setPresenceVerifier($presenceVerifier)
         {
-            \Illuminate\Validation\Factory::setPresenceVerifier($presenceVerifier);
+                        /** @var \Illuminate\Validation\Factory $instance */
+                        $instance->setPresenceVerifier($presenceVerifier);
         }
          
     }
@@ -14576,14 +15471,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static bool exists(string $view)
-     * @method static \Illuminate\Contracts\View\View file(string $path, array $data = [], array $mergeData = [])
-     * @method static \Illuminate\Contracts\View\View make(string $view, array $data = [], array $mergeData = [])
-     * @method static mixed share(array|string $key, $value = null)
-     * @method static array composer(array|string $views, \Closure|string $callback)
-     * @method static array creator(array|string $views, \Closure|string $callback)
-     * @method static \Illuminate\Contracts\View\Factory addNamespace(string $namespace, string|array $hints)
-     * @method static \Illuminate\Contracts\View\Factory replaceNamespace(string $namespace, string|array $hints)
      * @see \Illuminate\View\Factory
      */ 
     class View {
@@ -14599,7 +15486,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function file($path, $data = array(), $mergeData = array())
         {
-            return \Illuminate\View\Factory::file($path, $data, $mergeData);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->file($path, $data, $mergeData);
         }
         
         /**
@@ -14613,7 +15501,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function make($view, $data = array(), $mergeData = array())
         {
-            return \Illuminate\View\Factory::make($view, $data, $mergeData);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->make($view, $data, $mergeData);
         }
         
         /**
@@ -14628,7 +15517,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function first($views, $data = array(), $mergeData = array())
         {
-            return \Illuminate\View\Factory::first($views, $data, $mergeData);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->first($views, $data, $mergeData);
         }
         
         /**
@@ -14643,7 +15533,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function renderWhen($condition, $view, $data = array(), $mergeData = array())
         {
-            return \Illuminate\View\Factory::renderWhen($condition, $view, $data, $mergeData);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->renderWhen($condition, $view, $data, $mergeData);
         }
         
         /**
@@ -14658,7 +15549,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function renderEach($view, $data, $iterator, $empty = 'raw|')
         {
-            return \Illuminate\View\Factory::renderEach($view, $data, $iterator, $empty);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->renderEach($view, $data, $iterator, $empty);
         }
         
         /**
@@ -14670,7 +15562,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function exists($view)
         {
-            return \Illuminate\View\Factory::exists($view);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->exists($view);
         }
         
         /**
@@ -14683,7 +15576,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getEngineFromPath($path)
         {
-            return \Illuminate\View\Factory::getEngineFromPath($path);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getEngineFromPath($path);
         }
         
         /**
@@ -14696,7 +15590,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function share($key, $value = null)
         {
-            return \Illuminate\View\Factory::share($key, $value);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->share($key, $value);
         }
         
         /**
@@ -14707,7 +15602,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function incrementRender()
         {
-            \Illuminate\View\Factory::incrementRender();
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->incrementRender();
         }
         
         /**
@@ -14718,7 +15614,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function decrementRender()
         {
-            \Illuminate\View\Factory::decrementRender();
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->decrementRender();
         }
         
         /**
@@ -14729,7 +15626,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function doneRendering()
         {
-            return \Illuminate\View\Factory::doneRendering();
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->doneRendering();
         }
         
         /**
@@ -14741,7 +15639,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function addLocation($location)
         {
-            \Illuminate\View\Factory::addLocation($location);
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->addLocation($location);
         }
         
         /**
@@ -14749,12 +15648,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $namespace
          * @param string|array $hints
-         * @return $this 
+         * @return \Illuminate\View\Factory 
          * @static 
          */ 
         public static function addNamespace($namespace, $hints)
         {
-            return \Illuminate\View\Factory::addNamespace($namespace, $hints);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->addNamespace($namespace, $hints);
         }
         
         /**
@@ -14762,12 +15662,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $namespace
          * @param string|array $hints
-         * @return $this 
+         * @return \Illuminate\View\Factory 
          * @static 
          */ 
         public static function prependNamespace($namespace, $hints)
         {
-            return \Illuminate\View\Factory::prependNamespace($namespace, $hints);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->prependNamespace($namespace, $hints);
         }
         
         /**
@@ -14775,12 +15676,13 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $namespace
          * @param string|array $hints
-         * @return $this 
+         * @return \Illuminate\View\Factory 
          * @static 
          */ 
         public static function replaceNamespace($namespace, $hints)
         {
-            return \Illuminate\View\Factory::replaceNamespace($namespace, $hints);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->replaceNamespace($namespace, $hints);
         }
         
         /**
@@ -14794,7 +15696,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function addExtension($extension, $engine, $resolver = null)
         {
-            \Illuminate\View\Factory::addExtension($extension, $engine, $resolver);
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->addExtension($extension, $engine, $resolver);
         }
         
         /**
@@ -14805,7 +15708,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flushState()
         {
-            \Illuminate\View\Factory::flushState();
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->flushState();
         }
         
         /**
@@ -14816,7 +15720,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flushStateIfDoneRendering()
         {
-            \Illuminate\View\Factory::flushStateIfDoneRendering();
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->flushStateIfDoneRendering();
         }
         
         /**
@@ -14827,7 +15732,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getExtensions()
         {
-            return \Illuminate\View\Factory::getExtensions();
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getExtensions();
         }
         
         /**
@@ -14838,7 +15744,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getEngineResolver()
         {
-            return \Illuminate\View\Factory::getEngineResolver();
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getEngineResolver();
         }
         
         /**
@@ -14849,7 +15756,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getFinder()
         {
-            return \Illuminate\View\Factory::getFinder();
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getFinder();
         }
         
         /**
@@ -14861,7 +15769,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setFinder($finder)
         {
-            \Illuminate\View\Factory::setFinder($finder);
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->setFinder($finder);
         }
         
         /**
@@ -14872,7 +15781,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flushFinderCache()
         {
-            \Illuminate\View\Factory::flushFinderCache();
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->flushFinderCache();
         }
         
         /**
@@ -14883,7 +15793,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDispatcher()
         {
-            return \Illuminate\View\Factory::getDispatcher();
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getDispatcher();
         }
         
         /**
@@ -14895,7 +15806,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setDispatcher($events)
         {
-            \Illuminate\View\Factory::setDispatcher($events);
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->setDispatcher($events);
         }
         
         /**
@@ -14906,7 +15818,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getContainer()
         {
-            return \Illuminate\View\Factory::getContainer();
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getContainer();
         }
         
         /**
@@ -14918,7 +15831,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function setContainer($container)
         {
-            \Illuminate\View\Factory::setContainer($container);
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->setContainer($container);
         }
         
         /**
@@ -14931,7 +15845,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function shared($key, $default = null)
         {
-            return \Illuminate\View\Factory::shared($key, $default);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->shared($key, $default);
         }
         
         /**
@@ -14942,7 +15857,47 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getShared()
         {
-            return \Illuminate\View\Factory::getShared();
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getShared();
+        }
+        
+        /**
+         * Register a custom macro.
+         *
+         * @param string $name
+         * @param object|callable $macro
+         * @return void 
+         * @static 
+         */ 
+        public static function macro($name, $macro)
+        {
+                        \Illuminate\View\Factory::macro($name, $macro);
+        }
+        
+        /**
+         * Mix another object into the class.
+         *
+         * @param object $mixin
+         * @param bool $replace
+         * @return void 
+         * @throws \ReflectionException
+         * @static 
+         */ 
+        public static function mixin($mixin, $replace = true)
+        {
+                        \Illuminate\View\Factory::mixin($mixin, $replace);
+        }
+        
+        /**
+         * Checks if macro is registered.
+         *
+         * @param string $name
+         * @return bool 
+         * @static 
+         */ 
+        public static function hasMacro($name)
+        {
+                        return \Illuminate\View\Factory::hasMacro($name);
         }
         
         /**
@@ -14955,7 +15910,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function startComponent($name, $data = array())
         {
-            \Illuminate\View\Factory::startComponent($name, $data);
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->startComponent($name, $data);
         }
         
         /**
@@ -14966,7 +15922,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function renderComponent()
         {
-            return \Illuminate\View\Factory::renderComponent();
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->renderComponent();
         }
         
         /**
@@ -14979,7 +15936,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function slot($name, $content = null)
         {
-            \Illuminate\View\Factory::slot($name, $content);
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->slot($name, $content);
         }
         
         /**
@@ -14990,7 +15948,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function endSlot()
         {
-            \Illuminate\View\Factory::endSlot();
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->endSlot();
         }
         
         /**
@@ -15003,7 +15962,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function creator($views, $callback)
         {
-            return \Illuminate\View\Factory::creator($views, $callback);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->creator($views, $callback);
         }
         
         /**
@@ -15015,7 +15975,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function composers($composers)
         {
-            return \Illuminate\View\Factory::composers($composers);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->composers($composers);
         }
         
         /**
@@ -15028,7 +15989,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function composer($views, $callback)
         {
-            return \Illuminate\View\Factory::composer($views, $callback);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->composer($views, $callback);
         }
         
         /**
@@ -15040,7 +16002,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function callComposer($view)
         {
-            \Illuminate\View\Factory::callComposer($view);
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->callComposer($view);
         }
         
         /**
@@ -15052,7 +16015,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function callCreator($view)
         {
-            \Illuminate\View\Factory::callCreator($view);
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->callCreator($view);
         }
         
         /**
@@ -15065,7 +16029,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function startSection($section, $content = null)
         {
-            \Illuminate\View\Factory::startSection($section, $content);
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->startSection($section, $content);
         }
         
         /**
@@ -15078,7 +16043,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function inject($section, $content)
         {
-            \Illuminate\View\Factory::inject($section, $content);
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->inject($section, $content);
         }
         
         /**
@@ -15089,7 +16055,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function yieldSection()
         {
-            return \Illuminate\View\Factory::yieldSection();
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->yieldSection();
         }
         
         /**
@@ -15102,7 +16069,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function stopSection($overwrite = false)
         {
-            return \Illuminate\View\Factory::stopSection($overwrite);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->stopSection($overwrite);
         }
         
         /**
@@ -15114,7 +16082,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function appendSection()
         {
-            return \Illuminate\View\Factory::appendSection();
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->appendSection();
         }
         
         /**
@@ -15127,7 +16096,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function yieldContent($section, $default = '')
         {
-            return \Illuminate\View\Factory::yieldContent($section, $default);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->yieldContent($section, $default);
         }
         
         /**
@@ -15139,7 +16109,7 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function parentPlaceholder($section = '')
         {
-            return \Illuminate\View\Factory::parentPlaceholder($section);
+                        return \Illuminate\View\Factory::parentPlaceholder($section);
         }
         
         /**
@@ -15151,7 +16121,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasSection($name)
         {
-            return \Illuminate\View\Factory::hasSection($name);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->hasSection($name);
         }
         
         /**
@@ -15164,7 +16135,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getSection($name, $default = null)
         {
-            return \Illuminate\View\Factory::getSection($name, $default);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getSection($name, $default);
         }
         
         /**
@@ -15175,7 +16147,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getSections()
         {
-            return \Illuminate\View\Factory::getSections();
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getSections();
         }
         
         /**
@@ -15186,7 +16159,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flushSections()
         {
-            \Illuminate\View\Factory::flushSections();
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->flushSections();
         }
         
         /**
@@ -15198,7 +16172,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function addLoop($data)
         {
-            \Illuminate\View\Factory::addLoop($data);
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->addLoop($data);
         }
         
         /**
@@ -15209,7 +16184,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function incrementLoopIndices()
         {
-            \Illuminate\View\Factory::incrementLoopIndices();
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->incrementLoopIndices();
         }
         
         /**
@@ -15220,7 +16196,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function popLoop()
         {
-            \Illuminate\View\Factory::popLoop();
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->popLoop();
         }
         
         /**
@@ -15231,7 +16208,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getLastLoop()
         {
-            return \Illuminate\View\Factory::getLastLoop();
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getLastLoop();
         }
         
         /**
@@ -15242,7 +16220,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getLoopStack()
         {
-            return \Illuminate\View\Factory::getLoopStack();
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->getLoopStack();
         }
         
         /**
@@ -15255,7 +16234,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function startPush($section, $content = '')
         {
-            \Illuminate\View\Factory::startPush($section, $content);
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->startPush($section, $content);
         }
         
         /**
@@ -15267,7 +16247,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function stopPush()
         {
-            return \Illuminate\View\Factory::stopPush();
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->stopPush();
         }
         
         /**
@@ -15280,7 +16261,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function startPrepend($section, $content = '')
         {
-            \Illuminate\View\Factory::startPrepend($section, $content);
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->startPrepend($section, $content);
         }
         
         /**
@@ -15292,7 +16274,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function stopPrepend()
         {
-            return \Illuminate\View\Factory::stopPrepend();
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->stopPrepend();
         }
         
         /**
@@ -15305,7 +16288,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function yieldPushContent($section, $default = '')
         {
-            return \Illuminate\View\Factory::yieldPushContent($section, $default);
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->yieldPushContent($section, $default);
         }
         
         /**
@@ -15316,7 +16300,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function flushStacks()
         {
-            \Illuminate\View\Factory::flushStacks();
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->flushStacks();
         }
         
         /**
@@ -15328,7 +16313,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function startTranslation($replacements = array())
         {
-            \Illuminate\View\Factory::startTranslation($replacements);
+                        /** @var \Illuminate\View\Factory $instance */
+                        $instance->startTranslation($replacements);
         }
         
         /**
@@ -15339,7 +16325,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function renderTranslation()
         {
-            return \Illuminate\View\Factory::renderTranslation();
+                        /** @var \Illuminate\View\Factory $instance */
+                        return $instance->renderTranslation();
         }
          
     }
@@ -15347,10 +16334,6 @@ namespace Illuminate\Support\Facades {
     /**
      * 
      *
-     * @method static void send(\Illuminate\Support\Collection|array|mixed $notifiables, $notification)
-     * @method static void sendNow(\Illuminate\Support\Collection|array|mixed $notifiables, $notification)
-     * @method static mixed channel(string|null $name = null)
-     * @method static \Illuminate\Notifications\ChannelManager locale(string|null $locale)
      * @see \Illuminate\Notifications\ChannelManager
      */ 
     class Notification {
@@ -15365,7 +16348,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function send($notifiables, $notification)
         {
-            \Illuminate\Notifications\ChannelManager::send($notifiables, $notification);
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        $instance->send($notifiables, $notification);
         }
         
         /**
@@ -15379,7 +16363,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function sendNow($notifiables, $notification, $channels = null)
         {
-            \Illuminate\Notifications\ChannelManager::sendNow($notifiables, $notification, $channels);
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        $instance->sendNow($notifiables, $notification, $channels);
         }
         
         /**
@@ -15391,7 +16376,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function channel($name = null)
         {
-            return \Illuminate\Notifications\ChannelManager::channel($name);
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        return $instance->channel($name);
         }
         
         /**
@@ -15402,7 +16388,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function getDefaultDriver()
         {
-            return \Illuminate\Notifications\ChannelManager::getDefaultDriver();
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        return $instance->getDefaultDriver();
         }
         
         /**
@@ -15413,7 +16400,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function deliversVia()
         {
-            return \Illuminate\Notifications\ChannelManager::deliversVia();
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        return $instance->deliversVia();
         }
         
         /**
@@ -15425,19 +16413,21 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function deliverVia($channel)
         {
-            \Illuminate\Notifications\ChannelManager::deliverVia($channel);
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        $instance->deliverVia($channel);
         }
         
         /**
          * Set the locale of notifications.
          *
          * @param string $locale
-         * @return $this 
+         * @return \Illuminate\Notifications\ChannelManager 
          * @static 
          */ 
         public static function locale($locale)
         {
-            return \Illuminate\Notifications\ChannelManager::locale($locale);
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        return $instance->locale($locale);
         }
         
         /**
@@ -15451,7 +16441,8 @@ namespace Illuminate\Support\Facades {
         public static function driver($driver = null)
         {
             //Method inherited from \Illuminate\Support\Manager            
-            return \Illuminate\Notifications\ChannelManager::driver($driver);
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        return $instance->driver($driver);
         }
         
         /**
@@ -15459,13 +16450,14 @@ namespace Illuminate\Support\Facades {
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return $this 
+         * @return \Illuminate\Notifications\ChannelManager 
          * @static 
          */ 
         public static function extend($driver, $callback)
         {
             //Method inherited from \Illuminate\Support\Manager            
-            return \Illuminate\Notifications\ChannelManager::extend($driver, $callback);
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        return $instance->extend($driver, $callback);
         }
         
         /**
@@ -15477,7 +16469,8 @@ namespace Illuminate\Support\Facades {
         public static function getDrivers()
         {
             //Method inherited from \Illuminate\Support\Manager            
-            return \Illuminate\Notifications\ChannelManager::getDrivers();
+                        /** @var \Illuminate\Notifications\ChannelManager $instance */
+                        return $instance->getDrivers();
         }
         
         /**
@@ -15491,7 +16484,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertSentTo($notifiable, $notification, $callback = null)
         {
-            \Illuminate\Support\Testing\Fakes\NotificationFake::assertSentTo($notifiable, $notification, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
+                        $instance->assertSentTo($notifiable, $notification, $callback);
         }
         
         /**
@@ -15505,7 +16499,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertSentToTimes($notifiable, $notification, $times = 1)
         {
-            \Illuminate\Support\Testing\Fakes\NotificationFake::assertSentToTimes($notifiable, $notification, $times);
+                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
+                        $instance->assertSentToTimes($notifiable, $notification, $times);
         }
         
         /**
@@ -15519,7 +16514,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertNotSentTo($notifiable, $notification, $callback = null)
         {
-            \Illuminate\Support\Testing\Fakes\NotificationFake::assertNotSentTo($notifiable, $notification, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
+                        $instance->assertNotSentTo($notifiable, $notification, $callback);
         }
         
         /**
@@ -15530,7 +16526,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertNothingSent()
         {
-            \Illuminate\Support\Testing\Fakes\NotificationFake::assertNothingSent();
+                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
+                        $instance->assertNothingSent();
         }
         
         /**
@@ -15543,7 +16540,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function assertTimesSent($expectedCount, $notification)
         {
-            \Illuminate\Support\Testing\Fakes\NotificationFake::assertTimesSent($expectedCount, $notification);
+                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
+                        $instance->assertTimesSent($expectedCount, $notification);
         }
         
         /**
@@ -15557,7 +16555,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function sent($notifiable, $notification, $callback = null)
         {
-            return \Illuminate\Support\Testing\Fakes\NotificationFake::sent($notifiable, $notification, $callback);
+                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
+                        return $instance->sent($notifiable, $notification, $callback);
         }
         
         /**
@@ -15570,7 +16569,8 @@ namespace Illuminate\Support\Facades {
          */ 
         public static function hasSent($notifiable, $notification)
         {
-            return \Illuminate\Support\Testing\Fakes\NotificationFake::hasSent($notifiable, $notification);
+                        /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
+                        return $instance->hasSent($notifiable, $notification);
         }
          
     }
@@ -15609,7 +16609,8 @@ namespace Proengsoft\JsValidation\Facades {
          */ 
         public static function make($rules, $messages = array(), $customAttributes = array(), $selector = null)
         {
-            return \Proengsoft\JsValidation\JsValidatorFactory::make($rules, $messages, $customAttributes, $selector);
+                        /** @var \Proengsoft\JsValidation\JsValidatorFactory $instance */
+                        return $instance->make($rules, $messages, $customAttributes, $selector);
         }
         
         /**
@@ -15623,7 +16624,8 @@ namespace Proengsoft\JsValidation\Facades {
          */ 
         public static function formRequest($formRequest, $selector = null)
         {
-            return \Proengsoft\JsValidation\JsValidatorFactory::formRequest($formRequest, $selector);
+                        /** @var \Proengsoft\JsValidation\JsValidatorFactory $instance */
+                        return $instance->formRequest($formRequest, $selector);
         }
         
         /**
@@ -15636,7 +16638,8 @@ namespace Proengsoft\JsValidation\Facades {
          */ 
         public static function validator($validator, $selector = null)
         {
-            return \Proengsoft\JsValidation\JsValidatorFactory::validator($validator, $selector);
+                        /** @var \Proengsoft\JsValidation\JsValidatorFactory $instance */
+                        return $instance->validator($validator, $selector);
         }
          
     }
@@ -15661,7 +16664,8 @@ namespace Laravel\Socialite\Facades {
          */ 
         public static function with($driver)
         {
-            return \Laravel\Socialite\SocialiteManager::with($driver);
+                        /** @var \Laravel\Socialite\SocialiteManager $instance */
+                        return $instance->with($driver);
         }
         
         /**
@@ -15674,7 +16678,8 @@ namespace Laravel\Socialite\Facades {
          */ 
         public static function buildProvider($provider, $config)
         {
-            return \Laravel\Socialite\SocialiteManager::buildProvider($provider, $config);
+                        /** @var \Laravel\Socialite\SocialiteManager $instance */
+                        return $instance->buildProvider($provider, $config);
         }
         
         /**
@@ -15686,7 +16691,8 @@ namespace Laravel\Socialite\Facades {
          */ 
         public static function formatConfig($config)
         {
-            return \Laravel\Socialite\SocialiteManager::formatConfig($config);
+                        /** @var \Laravel\Socialite\SocialiteManager $instance */
+                        return $instance->formatConfig($config);
         }
         
         /**
@@ -15698,7 +16704,8 @@ namespace Laravel\Socialite\Facades {
          */ 
         public static function getDefaultDriver()
         {
-            return \Laravel\Socialite\SocialiteManager::getDefaultDriver();
+                        /** @var \Laravel\Socialite\SocialiteManager $instance */
+                        return $instance->getDefaultDriver();
         }
         
         /**
@@ -15712,7 +16719,8 @@ namespace Laravel\Socialite\Facades {
         public static function driver($driver = null)
         {
             //Method inherited from \Illuminate\Support\Manager            
-            return \Laravel\Socialite\SocialiteManager::driver($driver);
+                        /** @var \Laravel\Socialite\SocialiteManager $instance */
+                        return $instance->driver($driver);
         }
         
         /**
@@ -15720,13 +16728,14 @@ namespace Laravel\Socialite\Facades {
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return $this 
+         * @return \Laravel\Socialite\SocialiteManager 
          * @static 
          */ 
         public static function extend($driver, $callback)
         {
             //Method inherited from \Illuminate\Support\Manager            
-            return \Laravel\Socialite\SocialiteManager::extend($driver, $callback);
+                        /** @var \Laravel\Socialite\SocialiteManager $instance */
+                        return $instance->extend($driver, $callback);
         }
         
         /**
@@ -15738,7 +16747,8 @@ namespace Laravel\Socialite\Facades {
         public static function getDrivers()
         {
             //Method inherited from \Illuminate\Support\Manager            
-            return \Laravel\Socialite\SocialiteManager::getDrivers();
+                        /** @var \Laravel\Socialite\SocialiteManager $instance */
+                        return $instance->getDrivers();
         }
          
     }
@@ -15763,7 +16773,8 @@ namespace Collective\Html {
          */ 
         public static function open($options = array())
         {
-            return \Collective\Html\FormBuilder::open($options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->open($options);
         }
         
         /**
@@ -15776,7 +16787,8 @@ namespace Collective\Html {
          */ 
         public static function model($model, $options = array())
         {
-            return \Collective\Html\FormBuilder::model($model, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->model($model, $options);
         }
         
         /**
@@ -15788,7 +16800,8 @@ namespace Collective\Html {
          */ 
         public static function setModel($model)
         {
-            \Collective\Html\FormBuilder::setModel($model);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        $instance->setModel($model);
         }
         
         /**
@@ -15799,7 +16812,8 @@ namespace Collective\Html {
          */ 
         public static function getModel()
         {
-            return \Collective\Html\FormBuilder::getModel();
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->getModel();
         }
         
         /**
@@ -15810,7 +16824,8 @@ namespace Collective\Html {
          */ 
         public static function close()
         {
-            return \Collective\Html\FormBuilder::close();
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->close();
         }
         
         /**
@@ -15821,7 +16836,8 @@ namespace Collective\Html {
          */ 
         public static function token()
         {
-            return \Collective\Html\FormBuilder::token();
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->token();
         }
         
         /**
@@ -15836,7 +16852,8 @@ namespace Collective\Html {
          */ 
         public static function label($name, $value = null, $options = array(), $escape_html = true)
         {
-            return \Collective\Html\FormBuilder::label($name, $value, $options, $escape_html);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->label($name, $value, $options, $escape_html);
         }
         
         /**
@@ -15851,7 +16868,8 @@ namespace Collective\Html {
          */ 
         public static function input($type, $name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::input($type, $name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->input($type, $name, $value, $options);
         }
         
         /**
@@ -15865,7 +16883,8 @@ namespace Collective\Html {
          */ 
         public static function text($name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::text($name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->text($name, $value, $options);
         }
         
         /**
@@ -15878,7 +16897,8 @@ namespace Collective\Html {
          */ 
         public static function password($name, $options = array())
         {
-            return \Collective\Html\FormBuilder::password($name, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->password($name, $options);
         }
         
         /**
@@ -15892,7 +16912,8 @@ namespace Collective\Html {
          */ 
         public static function range($name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::range($name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->range($name, $value, $options);
         }
         
         /**
@@ -15906,7 +16927,8 @@ namespace Collective\Html {
          */ 
         public static function hidden($name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::hidden($name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->hidden($name, $value, $options);
         }
         
         /**
@@ -15920,7 +16942,8 @@ namespace Collective\Html {
          */ 
         public static function search($name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::search($name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->search($name, $value, $options);
         }
         
         /**
@@ -15934,7 +16957,8 @@ namespace Collective\Html {
          */ 
         public static function email($name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::email($name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->email($name, $value, $options);
         }
         
         /**
@@ -15948,7 +16972,8 @@ namespace Collective\Html {
          */ 
         public static function tel($name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::tel($name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->tel($name, $value, $options);
         }
         
         /**
@@ -15962,7 +16987,8 @@ namespace Collective\Html {
          */ 
         public static function number($name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::number($name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->number($name, $value, $options);
         }
         
         /**
@@ -15976,7 +17002,8 @@ namespace Collective\Html {
          */ 
         public static function date($name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::date($name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->date($name, $value, $options);
         }
         
         /**
@@ -15990,7 +17017,8 @@ namespace Collective\Html {
          */ 
         public static function datetime($name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::datetime($name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->datetime($name, $value, $options);
         }
         
         /**
@@ -16004,7 +17032,8 @@ namespace Collective\Html {
          */ 
         public static function datetimeLocal($name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::datetimeLocal($name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->datetimeLocal($name, $value, $options);
         }
         
         /**
@@ -16018,7 +17047,8 @@ namespace Collective\Html {
          */ 
         public static function time($name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::time($name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->time($name, $value, $options);
         }
         
         /**
@@ -16032,7 +17062,8 @@ namespace Collective\Html {
          */ 
         public static function url($name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::url($name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->url($name, $value, $options);
         }
         
         /**
@@ -16046,7 +17077,8 @@ namespace Collective\Html {
          */ 
         public static function week($name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::week($name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->week($name, $value, $options);
         }
         
         /**
@@ -16059,7 +17091,8 @@ namespace Collective\Html {
          */ 
         public static function file($name, $options = array())
         {
-            return \Collective\Html\FormBuilder::file($name, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->file($name, $options);
         }
         
         /**
@@ -16073,7 +17106,8 @@ namespace Collective\Html {
          */ 
         public static function textarea($name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::textarea($name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->textarea($name, $value, $options);
         }
         
         /**
@@ -16090,7 +17124,8 @@ namespace Collective\Html {
          */ 
         public static function select($name, $list = array(), $selected = null, $selectAttributes = array(), $optionsAttributes = array(), $optgroupsAttributes = array())
         {
-            return \Collective\Html\FormBuilder::select($name, $list, $selected, $selectAttributes, $optionsAttributes, $optgroupsAttributes);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->select($name, $list, $selected, $selectAttributes, $optionsAttributes, $optgroupsAttributes);
         }
         
         /**
@@ -16106,7 +17141,8 @@ namespace Collective\Html {
          */ 
         public static function selectRange($name, $begin, $end, $selected = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::selectRange($name, $begin, $end, $selected, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->selectRange($name, $begin, $end, $selected, $options);
         }
         
         /**
@@ -16122,7 +17158,8 @@ namespace Collective\Html {
          */ 
         public static function selectYear()
         {
-            return \Collective\Html\FormBuilder::selectYear();
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->selectYear();
         }
         
         /**
@@ -16137,7 +17174,8 @@ namespace Collective\Html {
          */ 
         public static function selectMonth($name, $selected = null, $options = array(), $format = '%B')
         {
-            return \Collective\Html\FormBuilder::selectMonth($name, $selected, $options, $format);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->selectMonth($name, $selected, $options, $format);
         }
         
         /**
@@ -16153,7 +17191,8 @@ namespace Collective\Html {
          */ 
         public static function getSelectOption($display, $value, $selected, $attributes = array(), $optgroupAttributes = array())
         {
-            return \Collective\Html\FormBuilder::getSelectOption($display, $value, $selected, $attributes, $optgroupAttributes);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->getSelectOption($display, $value, $selected, $attributes, $optgroupAttributes);
         }
         
         /**
@@ -16168,7 +17207,8 @@ namespace Collective\Html {
          */ 
         public static function checkbox($name, $value = 1, $checked = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::checkbox($name, $value, $checked, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->checkbox($name, $value, $checked, $options);
         }
         
         /**
@@ -16183,7 +17223,8 @@ namespace Collective\Html {
          */ 
         public static function radio($name, $value = null, $checked = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::radio($name, $value, $checked, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->radio($name, $value, $checked, $options);
         }
         
         /**
@@ -16196,7 +17237,8 @@ namespace Collective\Html {
          */ 
         public static function reset($value, $attributes = array())
         {
-            return \Collective\Html\FormBuilder::reset($value, $attributes);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->reset($value, $attributes);
         }
         
         /**
@@ -16210,7 +17252,8 @@ namespace Collective\Html {
          */ 
         public static function image($url, $name = null, $attributes = array())
         {
-            return \Collective\Html\FormBuilder::image($url, $name, $attributes);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->image($url, $name, $attributes);
         }
         
         /**
@@ -16224,7 +17267,8 @@ namespace Collective\Html {
          */ 
         public static function month($name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::month($name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->month($name, $value, $options);
         }
         
         /**
@@ -16238,7 +17282,8 @@ namespace Collective\Html {
          */ 
         public static function color($name, $value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::color($name, $value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->color($name, $value, $options);
         }
         
         /**
@@ -16251,7 +17296,8 @@ namespace Collective\Html {
          */ 
         public static function submit($value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::submit($value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->submit($value, $options);
         }
         
         /**
@@ -16264,7 +17310,8 @@ namespace Collective\Html {
          */ 
         public static function button($value = null, $options = array())
         {
-            return \Collective\Html\FormBuilder::button($value, $options);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->button($value, $options);
         }
         
         /**
@@ -16277,7 +17324,8 @@ namespace Collective\Html {
          */ 
         public static function datalist($id, $list = array())
         {
-            return \Collective\Html\FormBuilder::datalist($id, $list);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->datalist($id, $list);
         }
         
         /**
@@ -16290,7 +17338,8 @@ namespace Collective\Html {
          */ 
         public static function getIdAttribute($name, $attributes)
         {
-            return \Collective\Html\FormBuilder::getIdAttribute($name, $attributes);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->getIdAttribute($name, $attributes);
         }
         
         /**
@@ -16303,7 +17352,8 @@ namespace Collective\Html {
          */ 
         public static function getValueAttribute($name, $value = null)
         {
-            return \Collective\Html\FormBuilder::getValueAttribute($name, $value);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->getValueAttribute($name, $value);
         }
         
         /**
@@ -16314,7 +17364,8 @@ namespace Collective\Html {
          */ 
         public static function considerRequest($consider = true)
         {
-            return \Collective\Html\FormBuilder::considerRequest($consider);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->considerRequest($consider);
         }
         
         /**
@@ -16326,7 +17377,8 @@ namespace Collective\Html {
          */ 
         public static function old($name)
         {
-            return \Collective\Html\FormBuilder::old($name);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->old($name);
         }
         
         /**
@@ -16337,7 +17389,8 @@ namespace Collective\Html {
          */ 
         public static function oldInputIsEmpty()
         {
-            return \Collective\Html\FormBuilder::oldInputIsEmpty();
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->oldInputIsEmpty();
         }
         
         /**
@@ -16348,19 +17401,21 @@ namespace Collective\Html {
          */ 
         public static function getSessionStore()
         {
-            return \Collective\Html\FormBuilder::getSessionStore();
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->getSessionStore();
         }
         
         /**
          * Set the session store implementation.
          *
          * @param \Illuminate\Contracts\Session\Session $session
-         * @return $this 
+         * @return \Collective\Html\FormBuilder 
          * @static 
          */ 
         public static function setSessionStore($session)
         {
-            return \Collective\Html\FormBuilder::setSessionStore($session);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->setSessionStore($session);
         }
         
         /**
@@ -16373,20 +17428,21 @@ namespace Collective\Html {
          */ 
         public static function macro($name, $macro)
         {
-            \Collective\Html\FormBuilder::macro($name, $macro);
+                        \Collective\Html\FormBuilder::macro($name, $macro);
         }
         
         /**
          * Mix another object into the class.
          *
          * @param object $mixin
+         * @param bool $replace
          * @return void 
          * @throws \ReflectionException
          * @static 
          */ 
-        public static function mixin($mixin)
+        public static function mixin($mixin, $replace = true)
         {
-            \Collective\Html\FormBuilder::mixin($mixin);
+                        \Collective\Html\FormBuilder::mixin($mixin, $replace);
         }
         
         /**
@@ -16398,7 +17454,7 @@ namespace Collective\Html {
          */ 
         public static function hasMacro($name)
         {
-            return \Collective\Html\FormBuilder::hasMacro($name);
+                        return \Collective\Html\FormBuilder::hasMacro($name);
         }
         
         /**
@@ -16412,7 +17468,8 @@ namespace Collective\Html {
          */ 
         public static function macroCall($method, $parameters)
         {
-            return \Collective\Html\FormBuilder::macroCall($method, $parameters);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->macroCall($method, $parameters);
         }
         
         /**
@@ -16426,7 +17483,7 @@ namespace Collective\Html {
          */ 
         public static function component($name, $view, $signature)
         {
-            \Collective\Html\FormBuilder::component($name, $view, $signature);
+                        \Collective\Html\FormBuilder::component($name, $view, $signature);
         }
         
         /**
@@ -16438,7 +17495,7 @@ namespace Collective\Html {
          */ 
         public static function hasComponent($name)
         {
-            return \Collective\Html\FormBuilder::hasComponent($name);
+                        return \Collective\Html\FormBuilder::hasComponent($name);
         }
         
         /**
@@ -16452,7 +17509,8 @@ namespace Collective\Html {
          */ 
         public static function componentCall($method, $parameters)
         {
-            return \Collective\Html\FormBuilder::componentCall($method, $parameters);
+                        /** @var \Collective\Html\FormBuilder $instance */
+                        return $instance->componentCall($method, $parameters);
         }
         
         /**
@@ -16462,7 +17520,7 @@ namespace Collective\Html {
          */ 
         public static function captcha($attributes = array())
         {
-            return \Collective\Html\FormBuilder::captcha($attributes);
+                        return \Collective\Html\FormBuilder::captcha($attributes);
         }
          
     }
@@ -16483,7 +17541,8 @@ namespace Collective\Html {
          */ 
         public static function entities($value)
         {
-            return \Collective\Html\HtmlBuilder::entities($value);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->entities($value);
         }
         
         /**
@@ -16495,7 +17554,8 @@ namespace Collective\Html {
          */ 
         public static function decode($value)
         {
-            return \Collective\Html\HtmlBuilder::decode($value);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->decode($value);
         }
         
         /**
@@ -16509,7 +17569,8 @@ namespace Collective\Html {
          */ 
         public static function script($url, $attributes = array(), $secure = null)
         {
-            return \Collective\Html\HtmlBuilder::script($url, $attributes, $secure);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->script($url, $attributes, $secure);
         }
         
         /**
@@ -16523,7 +17584,8 @@ namespace Collective\Html {
          */ 
         public static function style($url, $attributes = array(), $secure = null)
         {
-            return \Collective\Html\HtmlBuilder::style($url, $attributes, $secure);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->style($url, $attributes, $secure);
         }
         
         /**
@@ -16538,7 +17600,8 @@ namespace Collective\Html {
          */ 
         public static function image($url, $alt = null, $attributes = array(), $secure = null)
         {
-            return \Collective\Html\HtmlBuilder::image($url, $alt, $attributes, $secure);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->image($url, $alt, $attributes, $secure);
         }
         
         /**
@@ -16552,7 +17615,8 @@ namespace Collective\Html {
          */ 
         public static function favicon($url, $attributes = array(), $secure = null)
         {
-            return \Collective\Html\HtmlBuilder::favicon($url, $attributes, $secure);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->favicon($url, $attributes, $secure);
         }
         
         /**
@@ -16568,7 +17632,8 @@ namespace Collective\Html {
          */ 
         public static function link($url, $title = null, $attributes = array(), $secure = null, $escape = true)
         {
-            return \Collective\Html\HtmlBuilder::link($url, $title, $attributes, $secure, $escape);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->link($url, $title, $attributes, $secure, $escape);
         }
         
         /**
@@ -16582,7 +17647,8 @@ namespace Collective\Html {
          */ 
         public static function secureLink($url, $title = null, $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::secureLink($url, $title, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->secureLink($url, $title, $attributes);
         }
         
         /**
@@ -16597,7 +17663,8 @@ namespace Collective\Html {
          */ 
         public static function linkAsset($url, $title = null, $attributes = array(), $secure = null)
         {
-            return \Collective\Html\HtmlBuilder::linkAsset($url, $title, $attributes, $secure);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->linkAsset($url, $title, $attributes, $secure);
         }
         
         /**
@@ -16611,7 +17678,8 @@ namespace Collective\Html {
          */ 
         public static function linkSecureAsset($url, $title = null, $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::linkSecureAsset($url, $title, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->linkSecureAsset($url, $title, $attributes);
         }
         
         /**
@@ -16626,7 +17694,8 @@ namespace Collective\Html {
          */ 
         public static function linkRoute($name, $title = null, $parameters = array(), $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::linkRoute($name, $title, $parameters, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->linkRoute($name, $title, $parameters, $attributes);
         }
         
         /**
@@ -16641,7 +17710,8 @@ namespace Collective\Html {
          */ 
         public static function linkAction($action, $title = null, $parameters = array(), $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::linkAction($action, $title, $parameters, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->linkAction($action, $title, $parameters, $attributes);
         }
         
         /**
@@ -16656,7 +17726,8 @@ namespace Collective\Html {
          */ 
         public static function mailto($email, $title = null, $attributes = array(), $escape = true)
         {
-            return \Collective\Html\HtmlBuilder::mailto($email, $title, $attributes, $escape);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->mailto($email, $title, $attributes, $escape);
         }
         
         /**
@@ -16668,7 +17739,8 @@ namespace Collective\Html {
          */ 
         public static function email($email)
         {
-            return \Collective\Html\HtmlBuilder::email($email);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->email($email);
         }
         
         /**
@@ -16680,7 +17752,8 @@ namespace Collective\Html {
          */ 
         public static function nbsp($num = 1)
         {
-            return \Collective\Html\HtmlBuilder::nbsp($num);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->nbsp($num);
         }
         
         /**
@@ -16693,7 +17766,8 @@ namespace Collective\Html {
          */ 
         public static function ol($list, $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::ol($list, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->ol($list, $attributes);
         }
         
         /**
@@ -16706,7 +17780,8 @@ namespace Collective\Html {
          */ 
         public static function ul($list, $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::ul($list, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->ul($list, $attributes);
         }
         
         /**
@@ -16719,7 +17794,8 @@ namespace Collective\Html {
          */ 
         public static function dl($list, $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::dl($list, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->dl($list, $attributes);
         }
         
         /**
@@ -16731,7 +17807,8 @@ namespace Collective\Html {
          */ 
         public static function attributes($attributes)
         {
-            return \Collective\Html\HtmlBuilder::attributes($attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->attributes($attributes);
         }
         
         /**
@@ -16743,7 +17820,8 @@ namespace Collective\Html {
          */ 
         public static function obfuscate($value)
         {
-            return \Collective\Html\HtmlBuilder::obfuscate($value);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->obfuscate($value);
         }
         
         /**
@@ -16757,7 +17835,8 @@ namespace Collective\Html {
          */ 
         public static function meta($name, $content, $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::meta($name, $content, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->meta($name, $content, $attributes);
         }
         
         /**
@@ -16771,7 +17850,8 @@ namespace Collective\Html {
          */ 
         public static function tag($tag, $content, $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::tag($tag, $content, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->tag($tag, $content, $attributes);
         }
         
         /**
@@ -16784,20 +17864,21 @@ namespace Collective\Html {
          */ 
         public static function macro($name, $macro)
         {
-            \Collective\Html\HtmlBuilder::macro($name, $macro);
+                        \Collective\Html\HtmlBuilder::macro($name, $macro);
         }
         
         /**
          * Mix another object into the class.
          *
          * @param object $mixin
+         * @param bool $replace
          * @return void 
          * @throws \ReflectionException
          * @static 
          */ 
-        public static function mixin($mixin)
+        public static function mixin($mixin, $replace = true)
         {
-            \Collective\Html\HtmlBuilder::mixin($mixin);
+                        \Collective\Html\HtmlBuilder::mixin($mixin, $replace);
         }
         
         /**
@@ -16809,7 +17890,7 @@ namespace Collective\Html {
          */ 
         public static function hasMacro($name)
         {
-            return \Collective\Html\HtmlBuilder::hasMacro($name);
+                        return \Collective\Html\HtmlBuilder::hasMacro($name);
         }
         
         /**
@@ -16823,7 +17904,8 @@ namespace Collective\Html {
          */ 
         public static function macroCall($method, $parameters)
         {
-            return \Collective\Html\HtmlBuilder::macroCall($method, $parameters);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->macroCall($method, $parameters);
         }
         
         /**
@@ -16837,7 +17919,7 @@ namespace Collective\Html {
          */ 
         public static function component($name, $view, $signature)
         {
-            \Collective\Html\HtmlBuilder::component($name, $view, $signature);
+                        \Collective\Html\HtmlBuilder::component($name, $view, $signature);
         }
         
         /**
@@ -16849,7 +17931,7 @@ namespace Collective\Html {
          */ 
         public static function hasComponent($name)
         {
-            return \Collective\Html\HtmlBuilder::hasComponent($name);
+                        return \Collective\Html\HtmlBuilder::hasComponent($name);
         }
         
         /**
@@ -16863,7 +17945,8 @@ namespace Collective\Html {
          */ 
         public static function componentCall($method, $parameters)
         {
-            return \Collective\Html\HtmlBuilder::componentCall($method, $parameters);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->componentCall($method, $parameters);
         }
          
     }
@@ -16884,7 +17967,8 @@ namespace Collective\Html {
          */ 
         public static function entities($value)
         {
-            return \Collective\Html\HtmlBuilder::entities($value);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->entities($value);
         }
         
         /**
@@ -16896,7 +17980,8 @@ namespace Collective\Html {
          */ 
         public static function decode($value)
         {
-            return \Collective\Html\HtmlBuilder::decode($value);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->decode($value);
         }
         
         /**
@@ -16910,7 +17995,8 @@ namespace Collective\Html {
          */ 
         public static function script($url, $attributes = array(), $secure = null)
         {
-            return \Collective\Html\HtmlBuilder::script($url, $attributes, $secure);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->script($url, $attributes, $secure);
         }
         
         /**
@@ -16924,7 +18010,8 @@ namespace Collective\Html {
          */ 
         public static function style($url, $attributes = array(), $secure = null)
         {
-            return \Collective\Html\HtmlBuilder::style($url, $attributes, $secure);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->style($url, $attributes, $secure);
         }
         
         /**
@@ -16939,7 +18026,8 @@ namespace Collective\Html {
          */ 
         public static function image($url, $alt = null, $attributes = array(), $secure = null)
         {
-            return \Collective\Html\HtmlBuilder::image($url, $alt, $attributes, $secure);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->image($url, $alt, $attributes, $secure);
         }
         
         /**
@@ -16953,7 +18041,8 @@ namespace Collective\Html {
          */ 
         public static function favicon($url, $attributes = array(), $secure = null)
         {
-            return \Collective\Html\HtmlBuilder::favicon($url, $attributes, $secure);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->favicon($url, $attributes, $secure);
         }
         
         /**
@@ -16969,7 +18058,8 @@ namespace Collective\Html {
          */ 
         public static function link($url, $title = null, $attributes = array(), $secure = null, $escape = true)
         {
-            return \Collective\Html\HtmlBuilder::link($url, $title, $attributes, $secure, $escape);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->link($url, $title, $attributes, $secure, $escape);
         }
         
         /**
@@ -16983,7 +18073,8 @@ namespace Collective\Html {
          */ 
         public static function secureLink($url, $title = null, $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::secureLink($url, $title, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->secureLink($url, $title, $attributes);
         }
         
         /**
@@ -16998,7 +18089,8 @@ namespace Collective\Html {
          */ 
         public static function linkAsset($url, $title = null, $attributes = array(), $secure = null)
         {
-            return \Collective\Html\HtmlBuilder::linkAsset($url, $title, $attributes, $secure);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->linkAsset($url, $title, $attributes, $secure);
         }
         
         /**
@@ -17012,7 +18104,8 @@ namespace Collective\Html {
          */ 
         public static function linkSecureAsset($url, $title = null, $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::linkSecureAsset($url, $title, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->linkSecureAsset($url, $title, $attributes);
         }
         
         /**
@@ -17027,7 +18120,8 @@ namespace Collective\Html {
          */ 
         public static function linkRoute($name, $title = null, $parameters = array(), $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::linkRoute($name, $title, $parameters, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->linkRoute($name, $title, $parameters, $attributes);
         }
         
         /**
@@ -17042,7 +18136,8 @@ namespace Collective\Html {
          */ 
         public static function linkAction($action, $title = null, $parameters = array(), $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::linkAction($action, $title, $parameters, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->linkAction($action, $title, $parameters, $attributes);
         }
         
         /**
@@ -17057,7 +18152,8 @@ namespace Collective\Html {
          */ 
         public static function mailto($email, $title = null, $attributes = array(), $escape = true)
         {
-            return \Collective\Html\HtmlBuilder::mailto($email, $title, $attributes, $escape);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->mailto($email, $title, $attributes, $escape);
         }
         
         /**
@@ -17069,7 +18165,8 @@ namespace Collective\Html {
          */ 
         public static function email($email)
         {
-            return \Collective\Html\HtmlBuilder::email($email);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->email($email);
         }
         
         /**
@@ -17081,7 +18178,8 @@ namespace Collective\Html {
          */ 
         public static function nbsp($num = 1)
         {
-            return \Collective\Html\HtmlBuilder::nbsp($num);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->nbsp($num);
         }
         
         /**
@@ -17094,7 +18192,8 @@ namespace Collective\Html {
          */ 
         public static function ol($list, $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::ol($list, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->ol($list, $attributes);
         }
         
         /**
@@ -17107,7 +18206,8 @@ namespace Collective\Html {
          */ 
         public static function ul($list, $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::ul($list, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->ul($list, $attributes);
         }
         
         /**
@@ -17120,7 +18220,8 @@ namespace Collective\Html {
          */ 
         public static function dl($list, $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::dl($list, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->dl($list, $attributes);
         }
         
         /**
@@ -17132,7 +18233,8 @@ namespace Collective\Html {
          */ 
         public static function attributes($attributes)
         {
-            return \Collective\Html\HtmlBuilder::attributes($attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->attributes($attributes);
         }
         
         /**
@@ -17144,7 +18246,8 @@ namespace Collective\Html {
          */ 
         public static function obfuscate($value)
         {
-            return \Collective\Html\HtmlBuilder::obfuscate($value);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->obfuscate($value);
         }
         
         /**
@@ -17158,7 +18261,8 @@ namespace Collective\Html {
          */ 
         public static function meta($name, $content, $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::meta($name, $content, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->meta($name, $content, $attributes);
         }
         
         /**
@@ -17172,7 +18276,8 @@ namespace Collective\Html {
          */ 
         public static function tag($tag, $content, $attributes = array())
         {
-            return \Collective\Html\HtmlBuilder::tag($tag, $content, $attributes);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->tag($tag, $content, $attributes);
         }
         
         /**
@@ -17185,20 +18290,21 @@ namespace Collective\Html {
          */ 
         public static function macro($name, $macro)
         {
-            \Collective\Html\HtmlBuilder::macro($name, $macro);
+                        \Collective\Html\HtmlBuilder::macro($name, $macro);
         }
         
         /**
          * Mix another object into the class.
          *
          * @param object $mixin
+         * @param bool $replace
          * @return void 
          * @throws \ReflectionException
          * @static 
          */ 
-        public static function mixin($mixin)
+        public static function mixin($mixin, $replace = true)
         {
-            \Collective\Html\HtmlBuilder::mixin($mixin);
+                        \Collective\Html\HtmlBuilder::mixin($mixin, $replace);
         }
         
         /**
@@ -17210,7 +18316,7 @@ namespace Collective\Html {
          */ 
         public static function hasMacro($name)
         {
-            return \Collective\Html\HtmlBuilder::hasMacro($name);
+                        return \Collective\Html\HtmlBuilder::hasMacro($name);
         }
         
         /**
@@ -17224,7 +18330,8 @@ namespace Collective\Html {
          */ 
         public static function macroCall($method, $parameters)
         {
-            return \Collective\Html\HtmlBuilder::macroCall($method, $parameters);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->macroCall($method, $parameters);
         }
         
         /**
@@ -17238,7 +18345,7 @@ namespace Collective\Html {
          */ 
         public static function component($name, $view, $signature)
         {
-            \Collective\Html\HtmlBuilder::component($name, $view, $signature);
+                        \Collective\Html\HtmlBuilder::component($name, $view, $signature);
         }
         
         /**
@@ -17250,7 +18357,7 @@ namespace Collective\Html {
          */ 
         public static function hasComponent($name)
         {
-            return \Collective\Html\HtmlBuilder::hasComponent($name);
+                        return \Collective\Html\HtmlBuilder::hasComponent($name);
         }
         
         /**
@@ -17264,7 +18371,8 @@ namespace Collective\Html {
          */ 
         public static function componentCall($method, $parameters)
         {
-            return \Collective\Html\HtmlBuilder::componentCall($method, $parameters);
+                        /** @var \Collective\Html\HtmlBuilder $instance */
+                        return $instance->componentCall($method, $parameters);
         }
          
     }
@@ -17288,7 +18396,8 @@ namespace Webpatser\Countries {
          */ 
         public static function getOne($id)
         {
-            return \Webpatser\Countries\Countries::getOne($id);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getOne($id);
         }
         
         /**
@@ -17300,7 +18409,8 @@ namespace Webpatser\Countries {
          */ 
         public static function getList($sort = null)
         {
-            return \Webpatser\Countries\Countries::getList($sort);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getList($sort);
         }
         
         /**
@@ -17313,7 +18423,8 @@ namespace Webpatser\Countries {
          */ 
         public static function getListForSelect($display = 'name')
         {
-            return \Webpatser\Countries\Countries::getListForSelect($display);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getListForSelect($display);
         }
         
         /**
@@ -17325,7 +18436,7 @@ namespace Webpatser\Countries {
         public static function clearBootedModels()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::clearBootedModels();
+                        \Webpatser\Countries\Countries::clearBootedModels();
         }
         
         /**
@@ -17338,7 +18449,7 @@ namespace Webpatser\Countries {
         public static function withoutTouching($callback)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::withoutTouching($callback);
+                        \Webpatser\Countries\Countries::withoutTouching($callback);
         }
         
         /**
@@ -17352,7 +18463,7 @@ namespace Webpatser\Countries {
         public static function withoutTouchingOn($models, $callback)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::withoutTouchingOn($models, $callback);
+                        \Webpatser\Countries\Countries::withoutTouchingOn($models, $callback);
         }
         
         /**
@@ -17365,34 +18476,36 @@ namespace Webpatser\Countries {
         public static function isIgnoringTouch($class = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::isIgnoringTouch($class);
+                        return \Webpatser\Countries\Countries::isIgnoringTouch($class);
         }
         
         /**
          * Fill the model with an array of attributes.
          *
          * @param array $attributes
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @throws \Illuminate\Database\Eloquent\MassAssignmentException
          * @static 
          */ 
         public static function fill($attributes)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::fill($attributes);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->fill($attributes);
         }
         
         /**
          * Fill the model with an array of attributes. Force mass assignment.
          *
          * @param array $attributes
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function forceFill($attributes)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::forceFill($attributes);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->forceFill($attributes);
         }
         
         /**
@@ -17405,7 +18518,8 @@ namespace Webpatser\Countries {
         public static function qualifyColumn($column)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::qualifyColumn($column);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->qualifyColumn($column);
         }
         
         /**
@@ -17419,7 +18533,8 @@ namespace Webpatser\Countries {
         public static function newInstance($attributes = array(), $exists = false)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::newInstance($attributes, $exists);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->newInstance($attributes, $exists);
         }
         
         /**
@@ -17433,7 +18548,8 @@ namespace Webpatser\Countries {
         public static function newFromBuilder($attributes = array(), $connection = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::newFromBuilder($attributes, $connection);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->newFromBuilder($attributes, $connection);
         }
         
         /**
@@ -17446,7 +18562,7 @@ namespace Webpatser\Countries {
         public static function on($connection = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::on($connection);
+                        return \Webpatser\Countries\Countries::on($connection);
         }
         
         /**
@@ -17458,7 +18574,7 @@ namespace Webpatser\Countries {
         public static function onWriteConnection()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::onWriteConnection();
+                        return \Webpatser\Countries\Countries::onWriteConnection();
         }
         
         /**
@@ -17471,7 +18587,7 @@ namespace Webpatser\Countries {
         public static function all($columns = array())
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::all($columns);
+                        return \Webpatser\Countries\Countries::all($columns);
         }
         
         /**
@@ -17484,33 +18600,49 @@ namespace Webpatser\Countries {
         public static function with($relations)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::with($relations);
+                        return \Webpatser\Countries\Countries::with($relations);
         }
         
         /**
          * Eager load relations on the model.
          *
          * @param array|string $relations
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function load($relations)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::load($relations);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->load($relations);
         }
         
         /**
          * Eager load relations on the model if they are not already eager loaded.
          *
          * @param array|string $relations
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function loadMissing($relations)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::loadMissing($relations);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->loadMissing($relations);
+        }
+        
+        /**
+         * Eager load relation counts on the model.
+         *
+         * @param array|string $relations
+         * @return \Webpatser\Countries\Countries 
+         * @static 
+         */ 
+        public static function loadCount($relations)
+        {
+            //Method inherited from \Illuminate\Database\Eloquent\Model            
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->loadCount($relations);
         }
         
         /**
@@ -17524,7 +18656,8 @@ namespace Webpatser\Countries {
         public static function update($attributes = array(), $options = array())
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::update($attributes, $options);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->update($attributes, $options);
         }
         
         /**
@@ -17536,7 +18669,8 @@ namespace Webpatser\Countries {
         public static function push()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::push();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->push();
         }
         
         /**
@@ -17549,7 +18683,8 @@ namespace Webpatser\Countries {
         public static function save($options = array())
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::save($options);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->save($options);
         }
         
         /**
@@ -17563,7 +18698,8 @@ namespace Webpatser\Countries {
         public static function saveOrFail($options = array())
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::saveOrFail($options);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->saveOrFail($options);
         }
         
         /**
@@ -17576,7 +18712,7 @@ namespace Webpatser\Countries {
         public static function destroy($ids)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::destroy($ids);
+                        return \Webpatser\Countries\Countries::destroy($ids);
         }
         
         /**
@@ -17589,7 +18725,8 @@ namespace Webpatser\Countries {
         public static function delete()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::delete();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->delete();
         }
         
         /**
@@ -17603,7 +18740,8 @@ namespace Webpatser\Countries {
         public static function forceDelete()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::forceDelete();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->forceDelete();
         }
         
         /**
@@ -17615,7 +18753,7 @@ namespace Webpatser\Countries {
         public static function query()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::query();
+                        return \Webpatser\Countries\Countries::query();
         }
         
         /**
@@ -17627,7 +18765,8 @@ namespace Webpatser\Countries {
         public static function newQuery()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::newQuery();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->newQuery();
         }
         
         /**
@@ -17639,7 +18778,8 @@ namespace Webpatser\Countries {
         public static function newModelQuery()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::newModelQuery();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->newModelQuery();
         }
         
         /**
@@ -17651,7 +18791,8 @@ namespace Webpatser\Countries {
         public static function newQueryWithoutRelationships()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::newQueryWithoutRelationships();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->newQueryWithoutRelationships();
         }
         
         /**
@@ -17664,7 +18805,8 @@ namespace Webpatser\Countries {
         public static function registerGlobalScopes($builder)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::registerGlobalScopes($builder);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->registerGlobalScopes($builder);
         }
         
         /**
@@ -17676,7 +18818,8 @@ namespace Webpatser\Countries {
         public static function newQueryWithoutScopes()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::newQueryWithoutScopes();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->newQueryWithoutScopes();
         }
         
         /**
@@ -17689,7 +18832,8 @@ namespace Webpatser\Countries {
         public static function newQueryWithoutScope($scope)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::newQueryWithoutScope($scope);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->newQueryWithoutScope($scope);
         }
         
         /**
@@ -17702,7 +18846,8 @@ namespace Webpatser\Countries {
         public static function newQueryForRestoration($ids)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::newQueryForRestoration($ids);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->newQueryForRestoration($ids);
         }
         
         /**
@@ -17715,7 +18860,8 @@ namespace Webpatser\Countries {
         public static function newEloquentBuilder($query)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::newEloquentBuilder($query);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->newEloquentBuilder($query);
         }
         
         /**
@@ -17728,7 +18874,8 @@ namespace Webpatser\Countries {
         public static function newCollection($models = array())
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::newCollection($models);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->newCollection($models);
         }
         
         /**
@@ -17745,7 +18892,8 @@ namespace Webpatser\Countries {
         public static function newPivot($parent, $attributes, $table, $exists, $using = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::newPivot($parent, $attributes, $table, $exists, $using);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->newPivot($parent, $attributes, $table, $exists, $using);
         }
         
         /**
@@ -17757,7 +18905,8 @@ namespace Webpatser\Countries {
         public static function toArray()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::toArray();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->toArray();
         }
         
         /**
@@ -17771,7 +18920,8 @@ namespace Webpatser\Countries {
         public static function toJson($options = 0)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::toJson($options);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->toJson($options);
         }
         
         /**
@@ -17783,7 +18933,8 @@ namespace Webpatser\Countries {
         public static function jsonSerialize()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::jsonSerialize();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->jsonSerialize();
         }
         
         /**
@@ -17796,19 +18947,21 @@ namespace Webpatser\Countries {
         public static function fresh($with = array())
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::fresh($with);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->fresh($with);
         }
         
         /**
          * Reload the current model instance with fresh attributes from the database.
          *
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function refresh()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::refresh();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->refresh();
         }
         
         /**
@@ -17821,7 +18974,8 @@ namespace Webpatser\Countries {
         public static function replicate($except = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::replicate($except);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->replicate($except);
         }
         
         /**
@@ -17834,7 +18988,8 @@ namespace Webpatser\Countries {
         public static function is($model)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::is($model);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->is($model);
         }
         
         /**
@@ -17847,7 +19002,8 @@ namespace Webpatser\Countries {
         public static function isNot($model)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::isNot($model);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->isNot($model);
         }
         
         /**
@@ -17859,7 +19015,8 @@ namespace Webpatser\Countries {
         public static function getConnection()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getConnection();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getConnection();
         }
         
         /**
@@ -17871,20 +19028,22 @@ namespace Webpatser\Countries {
         public static function getConnectionName()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getConnectionName();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getConnectionName();
         }
         
         /**
          * Set the connection associated with the model.
          *
          * @param string $name
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setConnection($name)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setConnection($name);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setConnection($name);
         }
         
         /**
@@ -17897,7 +19056,7 @@ namespace Webpatser\Countries {
         public static function resolveConnection($connection = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::resolveConnection($connection);
+                        return \Webpatser\Countries\Countries::resolveConnection($connection);
         }
         
         /**
@@ -17909,7 +19068,7 @@ namespace Webpatser\Countries {
         public static function getConnectionResolver()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getConnectionResolver();
+                        return \Webpatser\Countries\Countries::getConnectionResolver();
         }
         
         /**
@@ -17922,7 +19081,7 @@ namespace Webpatser\Countries {
         public static function setConnectionResolver($resolver)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::setConnectionResolver($resolver);
+                        \Webpatser\Countries\Countries::setConnectionResolver($resolver);
         }
         
         /**
@@ -17934,7 +19093,7 @@ namespace Webpatser\Countries {
         public static function unsetConnectionResolver()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::unsetConnectionResolver();
+                        \Webpatser\Countries\Countries::unsetConnectionResolver();
         }
         
         /**
@@ -17946,20 +19105,22 @@ namespace Webpatser\Countries {
         public static function getTable()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getTable();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getTable();
         }
         
         /**
          * Set the table associated with the model.
          *
          * @param string $table
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setTable($table)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setTable($table);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setTable($table);
         }
         
         /**
@@ -17971,20 +19132,22 @@ namespace Webpatser\Countries {
         public static function getKeyName()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getKeyName();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getKeyName();
         }
         
         /**
          * Set the primary key for the model.
          *
          * @param string $key
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setKeyName($key)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setKeyName($key);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setKeyName($key);
         }
         
         /**
@@ -17996,7 +19159,8 @@ namespace Webpatser\Countries {
         public static function getQualifiedKeyName()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getQualifiedKeyName();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getQualifiedKeyName();
         }
         
         /**
@@ -18008,20 +19172,22 @@ namespace Webpatser\Countries {
         public static function getKeyType()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getKeyType();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getKeyType();
         }
         
         /**
          * Set the data type for the primary key.
          *
          * @param string $type
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setKeyType($type)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setKeyType($type);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setKeyType($type);
         }
         
         /**
@@ -18033,20 +19199,22 @@ namespace Webpatser\Countries {
         public static function getIncrementing()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getIncrementing();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getIncrementing();
         }
         
         /**
          * Set whether IDs are incrementing.
          *
          * @param bool $value
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setIncrementing($value)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setIncrementing($value);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setIncrementing($value);
         }
         
         /**
@@ -18058,7 +19226,8 @@ namespace Webpatser\Countries {
         public static function getKey()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getKey();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getKey();
         }
         
         /**
@@ -18070,7 +19239,8 @@ namespace Webpatser\Countries {
         public static function getQueueableId()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getQueueableId();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getQueueableId();
         }
         
         /**
@@ -18082,7 +19252,8 @@ namespace Webpatser\Countries {
         public static function getQueueableRelations()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getQueueableRelations();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getQueueableRelations();
         }
         
         /**
@@ -18094,7 +19265,8 @@ namespace Webpatser\Countries {
         public static function getQueueableConnection()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getQueueableConnection();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getQueueableConnection();
         }
         
         /**
@@ -18106,7 +19278,8 @@ namespace Webpatser\Countries {
         public static function getRouteKey()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getRouteKey();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getRouteKey();
         }
         
         /**
@@ -18118,7 +19291,8 @@ namespace Webpatser\Countries {
         public static function getRouteKeyName()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getRouteKeyName();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getRouteKeyName();
         }
         
         /**
@@ -18131,7 +19305,8 @@ namespace Webpatser\Countries {
         public static function resolveRouteBinding($value)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::resolveRouteBinding($value);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->resolveRouteBinding($value);
         }
         
         /**
@@ -18143,7 +19318,8 @@ namespace Webpatser\Countries {
         public static function getForeignKey()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getForeignKey();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getForeignKey();
         }
         
         /**
@@ -18155,20 +19331,22 @@ namespace Webpatser\Countries {
         public static function getPerPage()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getPerPage();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getPerPage();
         }
         
         /**
          * Set the number of models to return per page.
          *
          * @param int $perPage
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setPerPage($perPage)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setPerPage($perPage);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setPerPage($perPage);
         }
         
         /**
@@ -18181,7 +19359,8 @@ namespace Webpatser\Countries {
         public static function offsetExists($offset)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::offsetExists($offset);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->offsetExists($offset);
         }
         
         /**
@@ -18194,7 +19373,8 @@ namespace Webpatser\Countries {
         public static function offsetGet($offset)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::offsetGet($offset);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->offsetGet($offset);
         }
         
         /**
@@ -18208,7 +19388,8 @@ namespace Webpatser\Countries {
         public static function offsetSet($offset, $value)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::offsetSet($offset, $value);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        $instance->offsetSet($offset, $value);
         }
         
         /**
@@ -18221,7 +19402,8 @@ namespace Webpatser\Countries {
         public static function offsetUnset($offset)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::offsetUnset($offset);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        $instance->offsetUnset($offset);
         }
         
         /**
@@ -18233,7 +19415,8 @@ namespace Webpatser\Countries {
         public static function attributesToArray()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::attributesToArray();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->attributesToArray();
         }
         
         /**
@@ -18245,7 +19428,8 @@ namespace Webpatser\Countries {
         public static function relationsToArray()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::relationsToArray();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->relationsToArray();
         }
         
         /**
@@ -18258,7 +19442,8 @@ namespace Webpatser\Countries {
         public static function getAttribute($key)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getAttribute($key);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getAttribute($key);
         }
         
         /**
@@ -18271,7 +19456,8 @@ namespace Webpatser\Countries {
         public static function getAttributeValue($key)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getAttributeValue($key);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getAttributeValue($key);
         }
         
         /**
@@ -18284,7 +19470,8 @@ namespace Webpatser\Countries {
         public static function getRelationValue($key)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getRelationValue($key);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getRelationValue($key);
         }
         
         /**
@@ -18297,7 +19484,8 @@ namespace Webpatser\Countries {
         public static function hasGetMutator($key)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::hasGetMutator($key);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->hasGetMutator($key);
         }
         
         /**
@@ -18311,7 +19499,8 @@ namespace Webpatser\Countries {
         public static function setAttribute($key, $value)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setAttribute($key, $value);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setAttribute($key, $value);
         }
         
         /**
@@ -18324,7 +19513,8 @@ namespace Webpatser\Countries {
         public static function hasSetMutator($key)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::hasSetMutator($key);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->hasSetMutator($key);
         }
         
         /**
@@ -18332,53 +19522,57 @@ namespace Webpatser\Countries {
          *
          * @param string $key
          * @param mixed $value
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function fillJsonAttribute($key, $value)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::fillJsonAttribute($key, $value);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->fillJsonAttribute($key, $value);
         }
         
         /**
-         * Decode the given float.
+         * Decode the given JSON back into an array or object.
          *
-         * @param mixed $value
+         * @param string $value
+         * @param bool $asObject
          * @return mixed 
          * @static 
          */ 
-        public static function fromFloat($value)
+        public static function fromJson($value, $asObject = false)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::fromFloat($value);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->fromJson($value, $asObject);
         }
         
         /**
-         * Decode the given JSON back into an array or object.
+         * Decode the given float.
          *
-         * @param string $value
-         * @param bool $asObject
+         * @param mixed $value
          * @return mixed 
          * @static 
          */ 
-        public static function fromJson($value, $asObject = false)
+        public static function fromFloat($value)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::fromJson($value, $asObject);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->fromFloat($value);
         }
         
         /**
          * Convert a DateTime to a storable string.
          *
-         * @param \DateTime|int $value
-         * @return string 
+         * @param mixed $value
+         * @return string|null 
          * @static 
          */ 
         public static function fromDateTime($value)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::fromDateTime($value);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->fromDateTime($value);
         }
         
         /**
@@ -18390,7 +19584,8 @@ namespace Webpatser\Countries {
         public static function getDates()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getDates();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getDates();
         }
         
         /**
@@ -18402,20 +19597,22 @@ namespace Webpatser\Countries {
         public static function getDateFormat()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getDateFormat();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getDateFormat();
         }
         
         /**
          * Set the date format used by the model.
          *
          * @param string $format
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setDateFormat($format)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setDateFormat($format);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setDateFormat($format);
         }
         
         /**
@@ -18429,7 +19626,8 @@ namespace Webpatser\Countries {
         public static function hasCast($key, $types = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::hasCast($key, $types);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->hasCast($key, $types);
         }
         
         /**
@@ -18441,7 +19639,8 @@ namespace Webpatser\Countries {
         public static function getCasts()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getCasts();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getCasts();
         }
         
         /**
@@ -18453,7 +19652,8 @@ namespace Webpatser\Countries {
         public static function getAttributes()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getAttributes();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getAttributes();
         }
         
         /**
@@ -18461,13 +19661,14 @@ namespace Webpatser\Countries {
          *
          * @param array $attributes
          * @param bool $sync
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setRawAttributes($attributes, $sync = false)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setRawAttributes($attributes, $sync);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setRawAttributes($attributes, $sync);
         }
         
         /**
@@ -18481,7 +19682,8 @@ namespace Webpatser\Countries {
         public static function getOriginal($key = null, $default = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getOriginal($key, $default);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getOriginal($key, $default);
         }
         
         /**
@@ -18494,48 +19696,66 @@ namespace Webpatser\Countries {
         public static function only($attributes)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::only($attributes);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->only($attributes);
         }
         
         /**
          * Sync the original attributes with the current.
          *
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function syncOriginal()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::syncOriginal();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->syncOriginal();
         }
         
         /**
          * Sync a single original attribute with its current value.
          *
          * @param string $attribute
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function syncOriginalAttribute($attribute)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::syncOriginalAttribute($attribute);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->syncOriginalAttribute($attribute);
+        }
+        
+        /**
+         * Sync multiple original attribute with their current values.
+         *
+         * @param array|string $attributes
+         * @return \Webpatser\Countries\Countries 
+         * @static 
+         */ 
+        public static function syncOriginalAttributes($attributes)
+        {
+            //Method inherited from \Illuminate\Database\Eloquent\Model            
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->syncOriginalAttributes($attributes);
         }
         
         /**
          * Sync the changed attributes.
          *
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function syncChanges()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::syncChanges();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->syncChanges();
         }
         
         /**
-         * Determine if the model or given attribute(s) have been modified.
+         * Determine if the model or any of the given attribute(s) have been modified.
          *
          * @param array|string|null $attributes
          * @return bool 
@@ -18544,11 +19764,12 @@ namespace Webpatser\Countries {
         public static function isDirty($attributes = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::isDirty($attributes);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->isDirty($attributes);
         }
         
         /**
-         * Determine if the model or given attribute(s) have remained the same.
+         * Determine if the model and all the given attribute(s) have remained the same.
          *
          * @param array|string|null $attributes
          * @return bool 
@@ -18557,11 +19778,12 @@ namespace Webpatser\Countries {
         public static function isClean($attributes = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::isClean($attributes);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->isClean($attributes);
         }
         
         /**
-         * Determine if the model or given attribute(s) have been modified.
+         * Determine if the model or any of the given attribute(s) have been modified.
          *
          * @param array|string|null $attributes
          * @return bool 
@@ -18570,7 +19792,8 @@ namespace Webpatser\Countries {
         public static function wasChanged($attributes = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::wasChanged($attributes);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->wasChanged($attributes);
         }
         
         /**
@@ -18582,7 +19805,8 @@ namespace Webpatser\Countries {
         public static function getDirty()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getDirty();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getDirty();
         }
         
         /**
@@ -18594,33 +19818,51 @@ namespace Webpatser\Countries {
         public static function getChanges()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getChanges();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getChanges();
+        }
+        
+        /**
+         * Determine if the new and old values for a given key are equivalent.
+         *
+         * @param string $key
+         * @param mixed $current
+         * @return bool 
+         * @static 
+         */ 
+        public static function originalIsEquivalent($key, $current)
+        {
+            //Method inherited from \Illuminate\Database\Eloquent\Model            
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->originalIsEquivalent($key, $current);
         }
         
         /**
          * Append attributes to query when building a query.
          *
          * @param array|string $attributes
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function append($attributes)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::append($attributes);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->append($attributes);
         }
         
         /**
          * Set the accessors to append to model arrays.
          *
          * @param array $appends
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setAppends($appends)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setAppends($appends);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setAppends($appends);
         }
         
         /**
@@ -18632,7 +19874,8 @@ namespace Webpatser\Countries {
         public static function getMutatedAttributes()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getMutatedAttributes();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getMutatedAttributes();
         }
         
         /**
@@ -18645,7 +19888,7 @@ namespace Webpatser\Countries {
         public static function cacheMutatedAttributes($class)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::cacheMutatedAttributes($class);
+                        \Webpatser\Countries\Countries::cacheMutatedAttributes($class);
         }
         
         /**
@@ -18653,12 +19896,13 @@ namespace Webpatser\Countries {
          *
          * @param object|array|string $classes
          * @return void 
+         * @throws \RuntimeException
          * @static 
          */ 
         public static function observe($classes)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::observe($classes);
+                        \Webpatser\Countries\Countries::observe($classes);
         }
         
         /**
@@ -18670,20 +19914,22 @@ namespace Webpatser\Countries {
         public static function getObservableEvents()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getObservableEvents();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getObservableEvents();
         }
         
         /**
          * Set the observable event names.
          *
          * @param array $observables
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setObservableEvents($observables)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setObservableEvents($observables);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setObservableEvents($observables);
         }
         
         /**
@@ -18696,7 +19942,8 @@ namespace Webpatser\Countries {
         public static function addObservableEvents($observables)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::addObservableEvents($observables);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        $instance->addObservableEvents($observables);
         }
         
         /**
@@ -18709,7 +19956,8 @@ namespace Webpatser\Countries {
         public static function removeObservableEvents($observables)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::removeObservableEvents($observables);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        $instance->removeObservableEvents($observables);
         }
         
         /**
@@ -18722,7 +19970,7 @@ namespace Webpatser\Countries {
         public static function retrieved($callback)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::retrieved($callback);
+                        \Webpatser\Countries\Countries::retrieved($callback);
         }
         
         /**
@@ -18735,7 +19983,7 @@ namespace Webpatser\Countries {
         public static function saving($callback)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::saving($callback);
+                        \Webpatser\Countries\Countries::saving($callback);
         }
         
         /**
@@ -18748,7 +19996,7 @@ namespace Webpatser\Countries {
         public static function saved($callback)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::saved($callback);
+                        \Webpatser\Countries\Countries::saved($callback);
         }
         
         /**
@@ -18761,7 +20009,7 @@ namespace Webpatser\Countries {
         public static function updating($callback)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::updating($callback);
+                        \Webpatser\Countries\Countries::updating($callback);
         }
         
         /**
@@ -18774,7 +20022,7 @@ namespace Webpatser\Countries {
         public static function updated($callback)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::updated($callback);
+                        \Webpatser\Countries\Countries::updated($callback);
         }
         
         /**
@@ -18787,7 +20035,7 @@ namespace Webpatser\Countries {
         public static function creating($callback)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::creating($callback);
+                        \Webpatser\Countries\Countries::creating($callback);
         }
         
         /**
@@ -18800,7 +20048,7 @@ namespace Webpatser\Countries {
         public static function created($callback)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::created($callback);
+                        \Webpatser\Countries\Countries::created($callback);
         }
         
         /**
@@ -18813,7 +20061,7 @@ namespace Webpatser\Countries {
         public static function deleting($callback)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::deleting($callback);
+                        \Webpatser\Countries\Countries::deleting($callback);
         }
         
         /**
@@ -18826,7 +20074,7 @@ namespace Webpatser\Countries {
         public static function deleted($callback)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::deleted($callback);
+                        \Webpatser\Countries\Countries::deleted($callback);
         }
         
         /**
@@ -18838,7 +20086,7 @@ namespace Webpatser\Countries {
         public static function flushEventListeners()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::flushEventListeners();
+                        \Webpatser\Countries\Countries::flushEventListeners();
         }
         
         /**
@@ -18850,7 +20098,7 @@ namespace Webpatser\Countries {
         public static function getEventDispatcher()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getEventDispatcher();
+                        return \Webpatser\Countries\Countries::getEventDispatcher();
         }
         
         /**
@@ -18863,7 +20111,7 @@ namespace Webpatser\Countries {
         public static function setEventDispatcher($dispatcher)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::setEventDispatcher($dispatcher);
+                        \Webpatser\Countries\Countries::setEventDispatcher($dispatcher);
         }
         
         /**
@@ -18875,7 +20123,20 @@ namespace Webpatser\Countries {
         public static function unsetEventDispatcher()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::unsetEventDispatcher();
+                        \Webpatser\Countries\Countries::unsetEventDispatcher();
+        }
+        
+        /**
+         * Execute a callback without firing any model events for any model type.
+         *
+         * @param callable $callback
+         * @return mixed 
+         * @static 
+         */ 
+        public static function withoutEvents($callback)
+        {
+            //Method inherited from \Illuminate\Database\Eloquent\Model            
+                        return \Webpatser\Countries\Countries::withoutEvents($callback);
         }
         
         /**
@@ -18890,7 +20151,7 @@ namespace Webpatser\Countries {
         public static function addGlobalScope($scope, $implementation = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::addGlobalScope($scope, $implementation);
+                        return \Webpatser\Countries\Countries::addGlobalScope($scope, $implementation);
         }
         
         /**
@@ -18903,7 +20164,7 @@ namespace Webpatser\Countries {
         public static function hasGlobalScope($scope)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::hasGlobalScope($scope);
+                        return \Webpatser\Countries\Countries::hasGlobalScope($scope);
         }
         
         /**
@@ -18916,7 +20177,7 @@ namespace Webpatser\Countries {
         public static function getGlobalScope($scope)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getGlobalScope($scope);
+                        return \Webpatser\Countries\Countries::getGlobalScope($scope);
         }
         
         /**
@@ -18928,7 +20189,8 @@ namespace Webpatser\Countries {
         public static function getGlobalScopes()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getGlobalScopes();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getGlobalScopes();
         }
         
         /**
@@ -18943,7 +20205,27 @@ namespace Webpatser\Countries {
         public static function hasOne($related, $foreignKey = null, $localKey = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::hasOne($related, $foreignKey, $localKey);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->hasOne($related, $foreignKey, $localKey);
+        }
+        
+        /**
+         * Define a has-one-through relationship.
+         *
+         * @param string $related
+         * @param string $through
+         * @param string|null $firstKey
+         * @param string|null $secondKey
+         * @param string|null $localKey
+         * @param string|null $secondLocalKey
+         * @return \Illuminate\Database\Eloquent\Relations\HasOneThrough 
+         * @static 
+         */ 
+        public static function hasOneThrough($related, $through, $firstKey = null, $secondKey = null, $localKey = null, $secondLocalKey = null)
+        {
+            //Method inherited from \Illuminate\Database\Eloquent\Model            
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->hasOneThrough($related, $through, $firstKey, $secondKey, $localKey, $secondLocalKey);
         }
         
         /**
@@ -18960,7 +20242,8 @@ namespace Webpatser\Countries {
         public static function morphOne($related, $name, $type = null, $id = null, $localKey = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::morphOne($related, $name, $type, $id, $localKey);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->morphOne($related, $name, $type, $id, $localKey);
         }
         
         /**
@@ -18976,7 +20259,8 @@ namespace Webpatser\Countries {
         public static function belongsTo($related, $foreignKey = null, $ownerKey = null, $relation = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::belongsTo($related, $foreignKey, $ownerKey, $relation);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->belongsTo($related, $foreignKey, $ownerKey, $relation);
         }
         
         /**
@@ -18992,7 +20276,8 @@ namespace Webpatser\Countries {
         public static function morphTo($name = null, $type = null, $id = null, $ownerKey = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::morphTo($name, $type, $id, $ownerKey);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->morphTo($name, $type, $id, $ownerKey);
         }
         
         /**
@@ -19005,7 +20290,7 @@ namespace Webpatser\Countries {
         public static function getActualClassNameForMorph($class)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getActualClassNameForMorph($class);
+                        return \Webpatser\Countries\Countries::getActualClassNameForMorph($class);
         }
         
         /**
@@ -19020,7 +20305,8 @@ namespace Webpatser\Countries {
         public static function hasMany($related, $foreignKey = null, $localKey = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::hasMany($related, $foreignKey, $localKey);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->hasMany($related, $foreignKey, $localKey);
         }
         
         /**
@@ -19038,7 +20324,8 @@ namespace Webpatser\Countries {
         public static function hasManyThrough($related, $through, $firstKey = null, $secondKey = null, $localKey = null, $secondLocalKey = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::hasManyThrough($related, $through, $firstKey, $secondKey, $localKey, $secondLocalKey);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->hasManyThrough($related, $through, $firstKey, $secondKey, $localKey, $secondLocalKey);
         }
         
         /**
@@ -19055,7 +20342,8 @@ namespace Webpatser\Countries {
         public static function morphMany($related, $name, $type = null, $id = null, $localKey = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::morphMany($related, $name, $type, $id, $localKey);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->morphMany($related, $name, $type, $id, $localKey);
         }
         
         /**
@@ -19074,7 +20362,8 @@ namespace Webpatser\Countries {
         public static function belongsToMany($related, $table = null, $foreignPivotKey = null, $relatedPivotKey = null, $parentKey = null, $relatedKey = null, $relation = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::belongsToMany($related, $table, $foreignPivotKey, $relatedPivotKey, $parentKey, $relatedKey, $relation);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->belongsToMany($related, $table, $foreignPivotKey, $relatedPivotKey, $parentKey, $relatedKey, $relation);
         }
         
         /**
@@ -19094,7 +20383,8 @@ namespace Webpatser\Countries {
         public static function morphToMany($related, $name, $table = null, $foreignPivotKey = null, $relatedPivotKey = null, $parentKey = null, $relatedKey = null, $inverse = false)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::morphToMany($related, $name, $table, $foreignPivotKey, $relatedPivotKey, $parentKey, $relatedKey, $inverse);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->morphToMany($related, $name, $table, $foreignPivotKey, $relatedPivotKey, $parentKey, $relatedKey, $inverse);
         }
         
         /**
@@ -19113,7 +20403,8 @@ namespace Webpatser\Countries {
         public static function morphedByMany($related, $name, $table = null, $foreignPivotKey = null, $relatedPivotKey = null, $parentKey = null, $relatedKey = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::morphedByMany($related, $name, $table, $foreignPivotKey, $relatedPivotKey, $parentKey, $relatedKey);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->morphedByMany($related, $name, $table, $foreignPivotKey, $relatedPivotKey, $parentKey, $relatedKey);
         }
         
         /**
@@ -19127,7 +20418,8 @@ namespace Webpatser\Countries {
         public static function joiningTable($related, $instance = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::joiningTable($related, $instance);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->joiningTable($related, $instance);
         }
         
         /**
@@ -19139,7 +20431,8 @@ namespace Webpatser\Countries {
         public static function joiningTableSegment()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::joiningTableSegment();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->joiningTableSegment();
         }
         
         /**
@@ -19152,7 +20445,8 @@ namespace Webpatser\Countries {
         public static function touches($relation)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::touches($relation);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->touches($relation);
         }
         
         /**
@@ -19164,7 +20458,8 @@ namespace Webpatser\Countries {
         public static function touchOwners()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::touchOwners();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        $instance->touchOwners();
         }
         
         /**
@@ -19176,7 +20471,8 @@ namespace Webpatser\Countries {
         public static function getMorphClass()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getMorphClass();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getMorphClass();
         }
         
         /**
@@ -19188,7 +20484,8 @@ namespace Webpatser\Countries {
         public static function getRelations()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getRelations();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getRelations();
         }
         
         /**
@@ -19201,7 +20498,8 @@ namespace Webpatser\Countries {
         public static function getRelation($relation)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getRelation($relation);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getRelation($relation);
         }
         
         /**
@@ -19214,7 +20512,8 @@ namespace Webpatser\Countries {
         public static function relationLoaded($key)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::relationLoaded($key);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->relationLoaded($key);
         }
         
         /**
@@ -19222,39 +20521,42 @@ namespace Webpatser\Countries {
          *
          * @param string $relation
          * @param mixed $value
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setRelation($relation, $value)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setRelation($relation, $value);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setRelation($relation, $value);
         }
         
         /**
          * Unset a loaded relationship.
          *
          * @param string $relation
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function unsetRelation($relation)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::unsetRelation($relation);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->unsetRelation($relation);
         }
         
         /**
          * Set the entire relations array on the model.
          *
          * @param array $relations
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setRelations($relations)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setRelations($relations);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setRelations($relations);
         }
         
         /**
@@ -19266,20 +20568,22 @@ namespace Webpatser\Countries {
         public static function getTouchedRelations()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getTouchedRelations();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getTouchedRelations();
         }
         
         /**
          * Set the relationships that are touched on save.
          *
          * @param array $touches
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setTouchedRelations($touches)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setTouchedRelations($touches);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setTouchedRelations($touches);
         }
         
         /**
@@ -19291,33 +20595,36 @@ namespace Webpatser\Countries {
         public static function touch()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::touch();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->touch();
         }
         
         /**
          * Set the value of the "created at" attribute.
          *
          * @param mixed $value
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setCreatedAt($value)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setCreatedAt($value);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setCreatedAt($value);
         }
         
         /**
          * Set the value of the "updated at" attribute.
          *
          * @param mixed $value
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setUpdatedAt($value)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setUpdatedAt($value);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setUpdatedAt($value);
         }
         
         /**
@@ -19329,7 +20636,8 @@ namespace Webpatser\Countries {
         public static function freshTimestamp()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::freshTimestamp();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->freshTimestamp();
         }
         
         /**
@@ -19341,7 +20649,8 @@ namespace Webpatser\Countries {
         public static function freshTimestampString()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::freshTimestampString();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->freshTimestampString();
         }
         
         /**
@@ -19353,7 +20662,8 @@ namespace Webpatser\Countries {
         public static function usesTimestamps()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::usesTimestamps();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->usesTimestamps();
         }
         
         /**
@@ -19365,7 +20675,8 @@ namespace Webpatser\Countries {
         public static function getCreatedAtColumn()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getCreatedAtColumn();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getCreatedAtColumn();
         }
         
         /**
@@ -19377,7 +20688,8 @@ namespace Webpatser\Countries {
         public static function getUpdatedAtColumn()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getUpdatedAtColumn();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getUpdatedAtColumn();
         }
         
         /**
@@ -19389,20 +20701,22 @@ namespace Webpatser\Countries {
         public static function getHidden()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getHidden();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getHidden();
         }
         
         /**
          * Set the hidden attributes for the model.
          *
          * @param array $hidden
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setHidden($hidden)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setHidden($hidden);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setHidden($hidden);
         }
         
         /**
@@ -19415,7 +20729,8 @@ namespace Webpatser\Countries {
         public static function addHidden($attributes = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::addHidden($attributes);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        $instance->addHidden($attributes);
         }
         
         /**
@@ -19427,20 +20742,22 @@ namespace Webpatser\Countries {
         public static function getVisible()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getVisible();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getVisible();
         }
         
         /**
          * Set the visible attributes for the model.
          *
          * @param array $visible
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function setVisible($visible)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::setVisible($visible);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->setVisible($visible);
         }
         
         /**
@@ -19453,33 +20770,36 @@ namespace Webpatser\Countries {
         public static function addVisible($attributes = null)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::addVisible($attributes);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        $instance->addVisible($attributes);
         }
         
         /**
          * Make the given, typically hidden, attributes visible.
          *
          * @param array|string $attributes
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function makeVisible($attributes)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::makeVisible($attributes);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->makeVisible($attributes);
         }
         
         /**
          * Make the given, typically visible, attributes hidden.
          *
          * @param array|string $attributes
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function makeHidden($attributes)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::makeHidden($attributes);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->makeHidden($attributes);
         }
         
         /**
@@ -19491,20 +20811,22 @@ namespace Webpatser\Countries {
         public static function getFillable()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getFillable();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getFillable();
         }
         
         /**
          * Set the fillable attributes for the model.
          *
          * @param array $fillable
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function fillable($fillable)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::fillable($fillable);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->fillable($fillable);
         }
         
         /**
@@ -19516,20 +20838,22 @@ namespace Webpatser\Countries {
         public static function getGuarded()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::getGuarded();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->getGuarded();
         }
         
         /**
          * Set the guarded attributes for the model.
          *
          * @param array $guarded
-         * @return $this 
+         * @return \Webpatser\Countries\Countries 
          * @static 
          */ 
         public static function guard($guarded)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::guard($guarded);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->guard($guarded);
         }
         
         /**
@@ -19542,7 +20866,7 @@ namespace Webpatser\Countries {
         public static function unguard($state = true)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::unguard($state);
+                        \Webpatser\Countries\Countries::unguard($state);
         }
         
         /**
@@ -19554,7 +20878,7 @@ namespace Webpatser\Countries {
         public static function reguard()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            \Webpatser\Countries\Countries::reguard();
+                        \Webpatser\Countries\Countries::reguard();
         }
         
         /**
@@ -19566,7 +20890,7 @@ namespace Webpatser\Countries {
         public static function isUnguarded()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::isUnguarded();
+                        return \Webpatser\Countries\Countries::isUnguarded();
         }
         
         /**
@@ -19579,7 +20903,7 @@ namespace Webpatser\Countries {
         public static function unguarded($callback)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::unguarded($callback);
+                        return \Webpatser\Countries\Countries::unguarded($callback);
         }
         
         /**
@@ -19592,7 +20916,8 @@ namespace Webpatser\Countries {
         public static function isFillable($key)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::isFillable($key);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->isFillable($key);
         }
         
         /**
@@ -19605,7 +20930,8 @@ namespace Webpatser\Countries {
         public static function isGuarded($key)
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::isGuarded($key);
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->isGuarded($key);
         }
         
         /**
@@ -19617,7 +20943,8 @@ namespace Webpatser\Countries {
         public static function totallyGuarded()
         {
             //Method inherited from \Illuminate\Database\Eloquent\Model            
-            return \Webpatser\Countries\Countries::totallyGuarded();
+                        /** @var \Webpatser\Countries\Countries $instance */
+                        return $instance->totallyGuarded();
         }
          
     }
@@ -19641,7 +20968,8 @@ namespace Intervention\Image\Facades {
          */ 
         public static function configure($config = array())
         {
-            return \Intervention\Image\ImageManager::configure($config);
+                        /** @var \Intervention\Image\ImageManager $instance */
+                        return $instance->configure($config);
         }
         
         /**
@@ -19653,7 +20981,8 @@ namespace Intervention\Image\Facades {
          */ 
         public static function make($data)
         {
-            return \Intervention\Image\ImageManager::make($data);
+                        /** @var \Intervention\Image\ImageManager $instance */
+                        return $instance->make($data);
         }
         
         /**
@@ -19667,7 +20996,8 @@ namespace Intervention\Image\Facades {
          */ 
         public static function canvas($width, $height, $background = null)
         {
-            return \Intervention\Image\ImageManager::canvas($width, $height, $background);
+                        /** @var \Intervention\Image\ImageManager $instance */
+                        return $instance->canvas($width, $height, $background);
         }
         
         /**
@@ -19682,7 +21012,8 @@ namespace Intervention\Image\Facades {
          */ 
         public static function cache($callback, $lifetime = null, $returnObj = false)
         {
-            return \Intervention\Image\ImageManager::cache($callback, $lifetime, $returnObj);
+                        /** @var \Intervention\Image\ImageManager $instance */
+                        return $instance->cache($callback, $lifetime, $returnObj);
         }
          
     }
@@ -19704,7 +21035,8 @@ namespace anlutro\LaravelSettings {
          */ 
         public static function getDefaultDriver()
         {
-            return \anlutro\LaravelSettings\SettingsManager::getDefaultDriver();
+                        /** @var \anlutro\LaravelSettings\SettingsManager $instance */
+                        return $instance->getDefaultDriver();
         }
         
         /**
@@ -19714,7 +21046,8 @@ namespace anlutro\LaravelSettings {
          */ 
         public static function createJsonDriver()
         {
-            return \anlutro\LaravelSettings\SettingsManager::createJsonDriver();
+                        /** @var \anlutro\LaravelSettings\SettingsManager $instance */
+                        return $instance->createJsonDriver();
         }
         
         /**
@@ -19724,7 +21057,8 @@ namespace anlutro\LaravelSettings {
          */ 
         public static function createDatabaseDriver()
         {
-            return \anlutro\LaravelSettings\SettingsManager::createDatabaseDriver();
+                        /** @var \anlutro\LaravelSettings\SettingsManager $instance */
+                        return $instance->createDatabaseDriver();
         }
         
         /**
@@ -19734,7 +21068,8 @@ namespace anlutro\LaravelSettings {
          */ 
         public static function createMemoryDriver()
         {
-            return \anlutro\LaravelSettings\SettingsManager::createMemoryDriver();
+                        /** @var \anlutro\LaravelSettings\SettingsManager $instance */
+                        return $instance->createMemoryDriver();
         }
         
         /**
@@ -19744,7 +21079,8 @@ namespace anlutro\LaravelSettings {
          */ 
         public static function createArrayDriver()
         {
-            return \anlutro\LaravelSettings\SettingsManager::createArrayDriver();
+                        /** @var \anlutro\LaravelSettings\SettingsManager $instance */
+                        return $instance->createArrayDriver();
         }
         
         /**
@@ -19758,7 +21094,8 @@ namespace anlutro\LaravelSettings {
         public static function driver($driver = null)
         {
             //Method inherited from \Illuminate\Support\Manager            
-            return \anlutro\LaravelSettings\SettingsManager::driver($driver);
+                        /** @var \anlutro\LaravelSettings\SettingsManager $instance */
+                        return $instance->driver($driver);
         }
         
         /**
@@ -19766,13 +21103,14 @@ namespace anlutro\LaravelSettings {
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return $this 
+         * @return \anlutro\LaravelSettings\SettingsManager 
          * @static 
          */ 
         public static function extend($driver, $callback)
         {
             //Method inherited from \Illuminate\Support\Manager            
-            return \anlutro\LaravelSettings\SettingsManager::extend($driver, $callback);
+                        /** @var \anlutro\LaravelSettings\SettingsManager $instance */
+                        return $instance->extend($driver, $callback);
         }
         
         /**
@@ -19784,7 +21122,8 @@ namespace anlutro\LaravelSettings {
         public static function getDrivers()
         {
             //Method inherited from \Illuminate\Support\Manager            
-            return \anlutro\LaravelSettings\SettingsManager::getDrivers();
+                        /** @var \anlutro\LaravelSettings\SettingsManager $instance */
+                        return $instance->getDrivers();
         }
          
     }
@@ -19808,7 +21147,8 @@ namespace Vanguard\Services\Auth\TwoFactor {
          */ 
         public static function isEnabled($user)
         {
-            return \Vanguard\Services\Auth\TwoFactor\Authy::isEnabled($user);
+                        /** @var \Vanguard\Services\Auth\TwoFactor\Authy $instance */
+                        return $instance->isEnabled($user);
         }
         
         /**
@@ -19819,7 +21159,21 @@ namespace Vanguard\Services\Auth\TwoFactor {
          */ 
         public static function register($user)
         {
-            return \Vanguard\Services\Auth\TwoFactor\Authy::register($user);
+                        /** @var \Vanguard\Services\Auth\TwoFactor\Authy $instance */
+                        return $instance->register($user);
+        }
+        
+        /**
+         * Sends an SMS with a phone verification token.
+         *
+         * @param \Vanguard\Services\Auth\TwoFactor\Contracts\Authenticatable $user
+         * @return mixed 
+         * @static 
+         */ 
+        public static function sendTwoFactorVerificationToken($user)
+        {
+                        /** @var \Vanguard\Services\Auth\TwoFactor\Authy $instance */
+                        return $instance->sendTwoFactorVerificationToken($user);
         }
         
         /**
@@ -19832,7 +21186,8 @@ namespace Vanguard\Services\Auth\TwoFactor {
          */ 
         public static function tokenIsValid($user, $token)
         {
-            return \Vanguard\Services\Auth\TwoFactor\Authy::tokenIsValid($user, $token);
+                        /** @var \Vanguard\Services\Auth\TwoFactor\Authy $instance */
+                        return $instance->tokenIsValid($user, $token);
         }
         
         /**
@@ -19844,7 +21199,8 @@ namespace Vanguard\Services\Auth\TwoFactor {
          */ 
         public static function delete($user)
         {
-            return \Vanguard\Services\Auth\TwoFactor\Authy::delete($user);
+                        /** @var \Vanguard\Services\Auth\TwoFactor\Authy $instance */
+                        return $instance->delete($user);
         }
          
     }
@@ -19869,7 +21225,8 @@ namespace Tymon\JWTAuth\Facades {
         public static function attempt($credentials)
         {
             //Method inherited from \Tymon\JWTAuth\JWTAuth            
-            return \Vanguard\Services\Auth\Api\JWTAuth::attempt($credentials);
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->attempt($credentials);
         }
         
         /**
@@ -19881,7 +21238,8 @@ namespace Tymon\JWTAuth\Facades {
         public static function authenticate()
         {
             //Method inherited from \Tymon\JWTAuth\JWTAuth            
-            return \Vanguard\Services\Auth\Api\JWTAuth::authenticate();
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->authenticate();
         }
         
         /**
@@ -19893,7 +21251,8 @@ namespace Tymon\JWTAuth\Facades {
         public static function toUser()
         {
             //Method inherited from \Tymon\JWTAuth\JWTAuth            
-            return \Vanguard\Services\Auth\Api\JWTAuth::toUser();
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->toUser();
         }
         
         /**
@@ -19905,7 +21264,8 @@ namespace Tymon\JWTAuth\Facades {
         public static function user()
         {
             //Method inherited from \Tymon\JWTAuth\JWTAuth            
-            return \Vanguard\Services\Auth\Api\JWTAuth::user();
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->user();
         }
         
         /**
@@ -19918,7 +21278,8 @@ namespace Tymon\JWTAuth\Facades {
         public static function fromSubject($subject)
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::fromSubject($subject);
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->fromSubject($subject);
         }
         
         /**
@@ -19931,7 +21292,8 @@ namespace Tymon\JWTAuth\Facades {
         public static function fromUser($user)
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::fromUser($user);
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->fromUser($user);
         }
         
         /**
@@ -19945,19 +21307,21 @@ namespace Tymon\JWTAuth\Facades {
         public static function refresh($forceForever = false, $resetClaims = false)
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::refresh($forceForever, $resetClaims);
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->refresh($forceForever, $resetClaims);
         }
         
         /**
          * Invalidate a token (add it to the blacklist).
          *
          * @param bool $forceForever
-         * @return $this 
+         * @return \Vanguard\Services\Auth\Api\JWTAuth 
          * @static 
          */ 
         public static function invalidate($forceForever = true)
         {
-            return \Vanguard\Services\Auth\Api\JWTAuth::invalidate($forceForever);
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->invalidate($forceForever);
         }
         
         /**
@@ -19971,7 +21335,8 @@ namespace Tymon\JWTAuth\Facades {
         public static function checkOrFail()
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::checkOrFail();
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->checkOrFail();
         }
         
         /**
@@ -19984,7 +21349,8 @@ namespace Tymon\JWTAuth\Facades {
         public static function check($getPayload = false)
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::check($getPayload);
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->check($getPayload);
         }
         
         /**
@@ -19996,20 +21362,22 @@ namespace Tymon\JWTAuth\Facades {
         public static function getToken()
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::getToken();
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->getToken();
         }
         
         /**
          * Parse the token from the request.
          *
          * @throws \Tymon\JWTAuth\Exceptions\JWTException
-         * @return $this 
+         * @return \Vanguard\Services\Auth\Api\JWTAuth 
          * @static 
          */ 
         public static function parseToken()
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::parseToken();
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->parseToken();
         }
         
         /**
@@ -20020,7 +21388,8 @@ namespace Tymon\JWTAuth\Facades {
          */ 
         public static function getPayload()
         {
-            return \Vanguard\Services\Auth\Api\JWTAuth::getPayload();
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->getPayload();
         }
         
         /**
@@ -20032,7 +21401,8 @@ namespace Tymon\JWTAuth\Facades {
         public static function payload()
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::payload();
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->payload();
         }
         
         /**
@@ -20045,7 +21415,8 @@ namespace Tymon\JWTAuth\Facades {
         public static function getClaim($claim)
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::getClaim($claim);
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->getClaim($claim);
         }
         
         /**
@@ -20058,7 +21429,8 @@ namespace Tymon\JWTAuth\Facades {
         public static function makePayload($subject)
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::makePayload($subject);
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->makePayload($subject);
         }
         
         /**
@@ -20071,58 +21443,63 @@ namespace Tymon\JWTAuth\Facades {
         public static function checkSubjectModel($model)
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::checkSubjectModel($model);
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->checkSubjectModel($model);
         }
         
         /**
          * Set the token.
          *
          * @param \Tymon\JWTAuth\Token|string $token
-         * @return $this 
+         * @return \Vanguard\Services\Auth\Api\JWTAuth 
          * @static 
          */ 
         public static function setToken($token)
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::setToken($token);
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->setToken($token);
         }
         
         /**
          * Unset the current token.
          *
-         * @return $this 
+         * @return \Vanguard\Services\Auth\Api\JWTAuth 
          * @static 
          */ 
         public static function unsetToken()
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::unsetToken();
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->unsetToken();
         }
         
         /**
          * Set the request instance.
          *
          * @param \Illuminate\Http\Request $request
-         * @return $this 
+         * @return \Vanguard\Services\Auth\Api\JWTAuth 
          * @static 
          */ 
         public static function setRequest($request)
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::setRequest($request);
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->setRequest($request);
         }
         
         /**
          * Set whether the subject should be "locked".
          *
          * @param bool $lock
-         * @return $this 
+         * @return \Vanguard\Services\Auth\Api\JWTAuth 
          * @static 
          */ 
         public static function lockSubject($lock)
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::lockSubject($lock);
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->lockSubject($lock);
         }
         
         /**
@@ -20134,7 +21511,8 @@ namespace Tymon\JWTAuth\Facades {
         public static function manager()
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::manager();
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->manager();
         }
         
         /**
@@ -20146,7 +21524,8 @@ namespace Tymon\JWTAuth\Facades {
         public static function parser()
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::parser();
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->parser();
         }
         
         /**
@@ -20158,7 +21537,8 @@ namespace Tymon\JWTAuth\Facades {
         public static function factory()
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::factory();
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->factory();
         }
         
         /**
@@ -20170,33 +21550,36 @@ namespace Tymon\JWTAuth\Facades {
         public static function blacklist()
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::blacklist();
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->blacklist();
         }
         
         /**
          * Set the custom claims.
          *
          * @param array $customClaims
-         * @return $this 
+         * @return \Vanguard\Services\Auth\Api\JWTAuth 
          * @static 
          */ 
         public static function customClaims($customClaims)
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::customClaims($customClaims);
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->customClaims($customClaims);
         }
         
         /**
          * Alias to set the custom claims.
          *
          * @param array $customClaims
-         * @return $this 
+         * @return \Vanguard\Services\Auth\Api\JWTAuth 
          * @static 
          */ 
         public static function claims($customClaims)
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::claims($customClaims);
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->claims($customClaims);
         }
         
         /**
@@ -20208,7 +21591,8 @@ namespace Tymon\JWTAuth\Facades {
         public static function getCustomClaims()
         {
             //Method inherited from \Tymon\JWTAuth\JWT            
-            return \Vanguard\Services\Auth\Api\JWTAuth::getCustomClaims();
+                        /** @var \Vanguard\Services\Auth\Api\JWTAuth $instance */
+                        return $instance->getCustomClaims();
         }
          
     }
@@ -20228,18 +21612,20 @@ namespace Tymon\JWTAuth\Facades {
          */ 
         public static function make($resetClaims = false)
         {
-            return \Tymon\JWTAuth\Factory::make($resetClaims);
+                        /** @var \Tymon\JWTAuth\Factory $instance */
+                        return $instance->make($resetClaims);
         }
         
         /**
          * Empty the claims collection.
          *
-         * @return $this 
+         * @return \Tymon\JWTAuth\Factory 
          * @static 
          */ 
         public static function emptyClaims()
         {
-            return \Tymon\JWTAuth\Factory::emptyClaims();
+                        /** @var \Tymon\JWTAuth\Factory $instance */
+                        return $instance->emptyClaims();
         }
         
         /**
@@ -20250,7 +21636,8 @@ namespace Tymon\JWTAuth\Facades {
          */ 
         public static function buildClaimsCollection()
         {
-            return \Tymon\JWTAuth\Factory::buildClaimsCollection();
+                        /** @var \Tymon\JWTAuth\Factory $instance */
+                        return $instance->buildClaimsCollection();
         }
         
         /**
@@ -20262,31 +21649,34 @@ namespace Tymon\JWTAuth\Facades {
          */ 
         public static function withClaims($claims)
         {
-            return \Tymon\JWTAuth\Factory::withClaims($claims);
+                        /** @var \Tymon\JWTAuth\Factory $instance */
+                        return $instance->withClaims($claims);
         }
         
         /**
          * Set the default claims to be added to the Payload.
          *
          * @param array $claims
-         * @return $this 
+         * @return \Tymon\JWTAuth\Factory 
          * @static 
          */ 
         public static function setDefaultClaims($claims)
         {
-            return \Tymon\JWTAuth\Factory::setDefaultClaims($claims);
+                        /** @var \Tymon\JWTAuth\Factory $instance */
+                        return $instance->setDefaultClaims($claims);
         }
         
         /**
          * Helper to set the ttl.
          *
          * @param int $ttl
-         * @return $this 
+         * @return \Tymon\JWTAuth\Factory 
          * @static 
          */ 
         public static function setTTL($ttl)
         {
-            return \Tymon\JWTAuth\Factory::setTTL($ttl);
+                        /** @var \Tymon\JWTAuth\Factory $instance */
+                        return $instance->setTTL($ttl);
         }
         
         /**
@@ -20297,7 +21687,8 @@ namespace Tymon\JWTAuth\Facades {
          */ 
         public static function getTTL()
         {
-            return \Tymon\JWTAuth\Factory::getTTL();
+                        /** @var \Tymon\JWTAuth\Factory $instance */
+                        return $instance->getTTL();
         }
         
         /**
@@ -20308,7 +21699,8 @@ namespace Tymon\JWTAuth\Facades {
          */ 
         public static function getDefaultClaims()
         {
-            return \Tymon\JWTAuth\Factory::getDefaultClaims();
+                        /** @var \Tymon\JWTAuth\Factory $instance */
+                        return $instance->getDefaultClaims();
         }
         
         /**
@@ -20319,31 +21711,34 @@ namespace Tymon\JWTAuth\Facades {
          */ 
         public static function validator()
         {
-            return \Tymon\JWTAuth\Factory::validator();
+                        /** @var \Tymon\JWTAuth\Factory $instance */
+                        return $instance->validator();
         }
         
         /**
          * Set the custom claims.
          *
          * @param array $customClaims
-         * @return $this 
+         * @return \Tymon\JWTAuth\Factory 
          * @static 
          */ 
         public static function customClaims($customClaims)
         {
-            return \Tymon\JWTAuth\Factory::customClaims($customClaims);
+                        /** @var \Tymon\JWTAuth\Factory $instance */
+                        return $instance->customClaims($customClaims);
         }
         
         /**
          * Alias to set the custom claims.
          *
          * @param array $customClaims
-         * @return $this 
+         * @return \Tymon\JWTAuth\Factory 
          * @static 
          */ 
         public static function claims($customClaims)
         {
-            return \Tymon\JWTAuth\Factory::claims($customClaims);
+                        /** @var \Tymon\JWTAuth\Factory $instance */
+                        return $instance->claims($customClaims);
         }
         
         /**
@@ -20354,19 +21749,21 @@ namespace Tymon\JWTAuth\Facades {
          */ 
         public static function getCustomClaims()
         {
-            return \Tymon\JWTAuth\Factory::getCustomClaims();
+                        /** @var \Tymon\JWTAuth\Factory $instance */
+                        return $instance->getCustomClaims();
         }
         
         /**
          * Set the refresh flow flag.
          *
          * @param bool $refreshFlow
-         * @return $this 
+         * @return \Tymon\JWTAuth\Factory 
          * @static 
          */ 
         public static function setRefreshFlow($refreshFlow = true)
         {
-            return \Tymon\JWTAuth\Factory::setRefreshFlow($refreshFlow);
+                        /** @var \Tymon\JWTAuth\Factory $instance */
+                        return $instance->setRefreshFlow($refreshFlow);
         }
          
     }
@@ -20383,25 +21780,25 @@ namespace Jenssegers\Agent\Facades {
         
         /**
          * Get all detection rules. These rules include the additional
-         * platforms and browsers.
+         * platforms and browsers and utilities.
          *
          * @return array 
          * @static 
          */ 
         public static function getDetectionRulesExtended()
         {
-            return \Jenssegers\Agent\Agent::getDetectionRulesExtended();
+                        return \Jenssegers\Agent\Agent::getDetectionRulesExtended();
         }
         
         /**
          * 
          *
-         * @inheritdoc 
          * @static 
          */ 
         public static function getRules()
         {
-            return \Jenssegers\Agent\Agent::getRules();
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->getRules();
         }
         
         /**
@@ -20412,7 +21809,58 @@ namespace Jenssegers\Agent\Facades {
          */ 
         public static function getCrawlerDetect()
         {
-            return \Jenssegers\Agent\Agent::getCrawlerDetect();
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->getCrawlerDetect();
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function getBrowsers()
+        {
+                        return \Jenssegers\Agent\Agent::getBrowsers();
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function getOperatingSystems()
+        {
+                        return \Jenssegers\Agent\Agent::getOperatingSystems();
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function getPlatforms()
+        {
+                        return \Jenssegers\Agent\Agent::getPlatforms();
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function getDesktopDevices()
+        {
+                        return \Jenssegers\Agent\Agent::getDesktopDevices();
+        }
+        
+        /**
+         * 
+         *
+         * @static 
+         */ 
+        public static function getProperties()
+        {
+                        return \Jenssegers\Agent\Agent::getProperties();
         }
         
         /**
@@ -20424,104 +21872,112 @@ namespace Jenssegers\Agent\Facades {
          */ 
         public static function languages($acceptLanguage = null)
         {
-            return \Jenssegers\Agent\Agent::languages($acceptLanguage);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->languages($acceptLanguage);
         }
         
         /**
          * Get the browser name.
          *
-         * @param null $userAgent
+         * @param string|null $userAgent
          * @return string 
          * @static 
          */ 
         public static function browser($userAgent = null)
         {
-            return \Jenssegers\Agent\Agent::browser($userAgent);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->browser($userAgent);
         }
         
         /**
          * Get the platform name.
          *
-         * @param string $userAgent
+         * @param string|null $userAgent
          * @return string 
          * @static 
          */ 
         public static function platform($userAgent = null)
         {
-            return \Jenssegers\Agent\Agent::platform($userAgent);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->platform($userAgent);
         }
         
         /**
          * Get the device name.
          *
-         * @param string $userAgent
+         * @param string|null $userAgent
          * @return string 
          * @static 
          */ 
         public static function device($userAgent = null)
         {
-            return \Jenssegers\Agent\Agent::device($userAgent);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->device($userAgent);
         }
         
         /**
          * Check if the device is a desktop computer.
          *
-         * @param string $userAgent deprecated
+         * @param string|null $userAgent deprecated
          * @param array $httpHeaders deprecated
          * @return bool 
          * @static 
          */ 
         public static function isDesktop($userAgent = null, $httpHeaders = null)
         {
-            return \Jenssegers\Agent\Agent::isDesktop($userAgent, $httpHeaders);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->isDesktop($userAgent, $httpHeaders);
         }
         
         /**
          * Check if the device is a mobile phone.
          *
-         * @param string $userAgent deprecated
+         * @param string|null $userAgent deprecated
          * @param array $httpHeaders deprecated
          * @return bool 
          * @static 
          */ 
         public static function isPhone($userAgent = null, $httpHeaders = null)
         {
-            return \Jenssegers\Agent\Agent::isPhone($userAgent, $httpHeaders);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->isPhone($userAgent, $httpHeaders);
         }
         
         /**
          * Get the robot name.
          *
-         * @param string $userAgent
+         * @param string|null $userAgent
          * @return string|bool 
          * @static 
          */ 
         public static function robot($userAgent = null)
         {
-            return \Jenssegers\Agent\Agent::robot($userAgent);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->robot($userAgent);
         }
         
         /**
          * Check if device is a robot.
          *
-         * @param string $userAgent
+         * @param string|null $userAgent
          * @return bool 
          * @static 
          */ 
         public static function isRobot($userAgent = null)
         {
-            return \Jenssegers\Agent\Agent::isRobot($userAgent);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->isRobot($userAgent);
         }
         
         /**
          * 
          *
-         * @inheritdoc 
          * @static 
          */ 
         public static function version($propertyName, $type = 'text')
         {
-            return \Jenssegers\Agent\Agent::version($propertyName, $type);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->version($propertyName, $type);
         }
         
         /**
@@ -20537,7 +21993,7 @@ namespace Jenssegers\Agent\Facades {
         public static function getScriptVersion()
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getScriptVersion();
+                        return \Jenssegers\Agent\Agent::getScriptVersion();
         }
         
         /**
@@ -20550,7 +22006,8 @@ namespace Jenssegers\Agent\Facades {
         public static function setHttpHeaders($httpHeaders = null)
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::setHttpHeaders($httpHeaders);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->setHttpHeaders($httpHeaders);
         }
         
         /**
@@ -20562,7 +22019,8 @@ namespace Jenssegers\Agent\Facades {
         public static function getHttpHeaders()
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getHttpHeaders();
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->getHttpHeaders();
         }
         
         /**
@@ -20579,7 +22037,8 @@ namespace Jenssegers\Agent\Facades {
         public static function getHttpHeader($header)
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getHttpHeader($header);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->getHttpHeader($header);
         }
         
         /**
@@ -20590,7 +22049,8 @@ namespace Jenssegers\Agent\Facades {
         public static function getMobileHeaders()
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getMobileHeaders();
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->getMobileHeaders();
         }
         
         /**
@@ -20603,7 +22063,8 @@ namespace Jenssegers\Agent\Facades {
         public static function getUaHttpHeaders()
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getUaHttpHeaders();
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->getUaHttpHeaders();
         }
         
         /**
@@ -20617,7 +22078,8 @@ namespace Jenssegers\Agent\Facades {
         public static function setCfHeaders($cfHeaders = null)
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::setCfHeaders($cfHeaders);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->setCfHeaders($cfHeaders);
         }
         
         /**
@@ -20629,7 +22091,8 @@ namespace Jenssegers\Agent\Facades {
         public static function getCfHeaders()
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getCfHeaders();
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->getCfHeaders();
         }
         
         /**
@@ -20642,7 +22105,8 @@ namespace Jenssegers\Agent\Facades {
         public static function setUserAgent($userAgent = null)
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::setUserAgent($userAgent);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->setUserAgent($userAgent);
         }
         
         /**
@@ -20654,7 +22118,8 @@ namespace Jenssegers\Agent\Facades {
         public static function getUserAgent()
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getUserAgent();
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->getUserAgent();
         }
         
         /**
@@ -20669,7 +22134,8 @@ namespace Jenssegers\Agent\Facades {
         public static function setDetectionType($type = null)
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::setDetectionType($type);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->setDetectionType($type);
         }
         
         /**
@@ -20680,7 +22146,8 @@ namespace Jenssegers\Agent\Facades {
         public static function getMatchingRegex()
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getMatchingRegex();
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->getMatchingRegex();
         }
         
         /**
@@ -20691,7 +22158,8 @@ namespace Jenssegers\Agent\Facades {
         public static function getMatchesArray()
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getMatchesArray();
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->getMatchesArray();
         }
         
         /**
@@ -20703,7 +22171,7 @@ namespace Jenssegers\Agent\Facades {
         public static function getPhoneDevices()
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getPhoneDevices();
+                        return \Jenssegers\Agent\Agent::getPhoneDevices();
         }
         
         /**
@@ -20715,7 +22183,7 @@ namespace Jenssegers\Agent\Facades {
         public static function getTabletDevices()
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getTabletDevices();
+                        return \Jenssegers\Agent\Agent::getTabletDevices();
         }
         
         /**
@@ -20727,19 +22195,7 @@ namespace Jenssegers\Agent\Facades {
         public static function getUserAgents()
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getUserAgents();
-        }
-        
-        /**
-         * Retrieve the list of known browsers. Specifically, the user agents.
-         *
-         * @return array List of browsers / user agents.
-         * @static 
-         */ 
-        public static function getBrowsers()
-        {
-            //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getBrowsers();
+                        return \Jenssegers\Agent\Agent::getUserAgents();
         }
         
         /**
@@ -20751,7 +22207,7 @@ namespace Jenssegers\Agent\Facades {
         public static function getUtilities()
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getUtilities();
+                        return \Jenssegers\Agent\Agent::getUtilities();
         }
         
         /**
@@ -20764,7 +22220,7 @@ namespace Jenssegers\Agent\Facades {
         public static function getMobileDetectionRules()
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getMobileDetectionRules();
+                        return \Jenssegers\Agent\Agent::getMobileDetectionRules();
         }
         
         /**
@@ -20781,19 +22237,8 @@ namespace Jenssegers\Agent\Facades {
         public static function getMobileDetectionRulesExtended()
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getMobileDetectionRulesExtended();
-        }
-        
-        /**
-         * Retrieve the list of mobile operating systems.
-         *
-         * @return array The list of mobile operating systems.
-         * @static 
-         */ 
-        public static function getOperatingSystems()
-        {
-            //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getOperatingSystems();
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->getMobileDetectionRulesExtended();
         }
         
         /**
@@ -20808,7 +22253,8 @@ namespace Jenssegers\Agent\Facades {
         public static function checkHttpHeadersForMobile()
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::checkHttpHeadersForMobile();
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->checkHttpHeadersForMobile();
         }
         
         /**
@@ -20824,7 +22270,8 @@ namespace Jenssegers\Agent\Facades {
         public static function isMobile($userAgent = null, $httpHeaders = null)
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::isMobile($userAgent, $httpHeaders);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->isMobile($userAgent, $httpHeaders);
         }
         
         /**
@@ -20840,7 +22287,8 @@ namespace Jenssegers\Agent\Facades {
         public static function isTablet($userAgent = null, $httpHeaders = null)
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::isTablet($userAgent, $httpHeaders);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->isTablet($userAgent, $httpHeaders);
         }
         
         /**
@@ -20857,7 +22305,8 @@ namespace Jenssegers\Agent\Facades {
         public static function is($key, $userAgent = null, $httpHeaders = null)
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::is($key, $userAgent, $httpHeaders);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->is($key, $userAgent, $httpHeaders);
         }
         
         /**
@@ -20878,19 +22327,8 @@ namespace Jenssegers\Agent\Facades {
         public static function match($regex, $userAgent = null)
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::match($regex, $userAgent);
-        }
-        
-        /**
-         * Get the properties array.
-         *
-         * @return array 
-         * @static 
-         */ 
-        public static function getProperties()
-        {
-            //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::getProperties();
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->match($regex, $userAgent);
         }
         
         /**
@@ -20904,7 +22342,8 @@ namespace Jenssegers\Agent\Facades {
         public static function prepareVersionNo($ver)
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::prepareVersionNo($ver);
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->prepareVersionNo($ver);
         }
         
         /**
@@ -20916,7 +22355,8 @@ namespace Jenssegers\Agent\Facades {
         public static function mobileGrade()
         {
             //Method inherited from \Mobile_Detect            
-            return \Jenssegers\Agent\Agent::mobileGrade();
+                        /** @var \Jenssegers\Agent\Agent $instance */
+                        return $instance->mobileGrade();
         }
          
     }
@@ -20940,7 +22380,8 @@ namespace Anhskohbo\NoCaptcha\Facades {
          */ 
         public static function display($attributes = array())
         {
-            return \Anhskohbo\NoCaptcha\NoCaptcha::display($attributes);
+                        /** @var \Anhskohbo\NoCaptcha\NoCaptcha $instance */
+                        return $instance->display($attributes);
         }
         
         /**
@@ -20951,7 +22392,8 @@ namespace Anhskohbo\NoCaptcha\Facades {
          */ 
         public static function displayWidget($attributes = array())
         {
-            return \Anhskohbo\NoCaptcha\NoCaptcha::displayWidget($attributes);
+                        /** @var \Anhskohbo\NoCaptcha\NoCaptcha $instance */
+                        return $instance->displayWidget($attributes);
         }
         
         /**
@@ -20965,7 +22407,8 @@ namespace Anhskohbo\NoCaptcha\Facades {
          */ 
         public static function displaySubmit($formIdentifier, $text = 'submit', $attributes = array())
         {
-            return \Anhskohbo\NoCaptcha\NoCaptcha::displaySubmit($formIdentifier, $text, $attributes);
+                        /** @var \Anhskohbo\NoCaptcha\NoCaptcha $instance */
+                        return $instance->displaySubmit($formIdentifier, $text, $attributes);
         }
         
         /**
@@ -20979,7 +22422,8 @@ namespace Anhskohbo\NoCaptcha\Facades {
          */ 
         public static function renderJs($lang = null, $callback = false, $onLoadClass = 'onloadCallBack')
         {
-            return \Anhskohbo\NoCaptcha\NoCaptcha::renderJs($lang, $callback, $onLoadClass);
+                        /** @var \Anhskohbo\NoCaptcha\NoCaptcha $instance */
+                        return $instance->renderJs($lang, $callback, $onLoadClass);
         }
         
         /**
@@ -20992,7 +22436,8 @@ namespace Anhskohbo\NoCaptcha\Facades {
          */ 
         public static function verifyResponse($response, $clientIp = null)
         {
-            return \Anhskohbo\NoCaptcha\NoCaptcha::verifyResponse($response, $clientIp);
+                        /** @var \Anhskohbo\NoCaptcha\NoCaptcha $instance */
+                        return $instance->verifyResponse($response, $clientIp);
         }
         
         /**
@@ -21004,7 +22449,8 @@ namespace Anhskohbo\NoCaptcha\Facades {
          */ 
         public static function verifyRequest($request)
         {
-            return \Anhskohbo\NoCaptcha\NoCaptcha::verifyRequest($request);
+                        /** @var \Anhskohbo\NoCaptcha\NoCaptcha $instance */
+                        return $instance->verifyRequest($request);
         }
         
         /**
@@ -21018,7 +22464,8 @@ namespace Anhskohbo\NoCaptcha\Facades {
          */ 
         public static function getJsLink($lang = null, $callback = false, $onLoadClass = 'onloadCallBack')
         {
-            return \Anhskohbo\NoCaptcha\NoCaptcha::getJsLink($lang, $callback, $onLoadClass);
+                        /** @var \Anhskohbo\NoCaptcha\NoCaptcha $instance */
+                        return $instance->getJsLink($lang, $callback, $onLoadClass);
         }
          
     }
@@ -21030,6 +22477,16 @@ namespace Barryvdh\Debugbar {
     /**
      * 
      *
+     * @method static void alert(string $message)
+     * @method static void critical(string $message)
+     * @method static void debug(string $message)
+     * @method static void emergency(string $message)
+     * @method static void error(string $message)
+     * @method static void info(string $message)
+     * @method static void log(string $message)
+     * @method static void notice(string $message)
+     * @method static void warning(string $message)
+     * @see \Barryvdh\Debugbar\LaravelDebugbar
      */ 
     class Facade {
         
@@ -21040,7 +22497,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function enable()
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::enable();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->enable();
         }
         
         /**
@@ -21050,7 +22508,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function boot()
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::boot();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->boot();
         }
         
         /**
@@ -21060,7 +22519,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function shouldCollect($name, $default = false)
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::shouldCollect($name, $default);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->shouldCollect($name, $default);
         }
         
         /**
@@ -21068,12 +22528,13 @@ namespace Barryvdh\Debugbar {
          *
          * @param \Barryvdh\Debugbar\DataCollectorInterface $collector
          * @throws DebugBarException
-         * @return $this 
+         * @return \Barryvdh\Debugbar\LaravelDebugbar 
          * @static 
          */ 
         public static function addCollector($collector)
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::addCollector($collector);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->addCollector($collector);
         }
         
         /**
@@ -21089,7 +22550,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function handleError($level, $message, $file = '', $line = 0, $context = array())
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::handleError($level, $message, $file, $line, $context);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->handleError($level, $message, $file, $line, $context);
         }
         
         /**
@@ -21101,7 +22563,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function startMeasure($name, $label = null)
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::startMeasure($name, $label);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->startMeasure($name, $label);
         }
         
         /**
@@ -21112,7 +22575,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function stopMeasure($name)
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::stopMeasure($name);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->stopMeasure($name);
         }
         
         /**
@@ -21124,7 +22588,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function addException($e)
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::addException($e);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->addException($e);
         }
         
         /**
@@ -21135,7 +22600,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function addThrowable($e)
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::addThrowable($e);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->addThrowable($e);
         }
         
         /**
@@ -21148,7 +22614,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function getJavascriptRenderer($baseUrl = null, $basePath = null)
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::getJavascriptRenderer($baseUrl, $basePath);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getJavascriptRenderer($baseUrl, $basePath);
         }
         
         /**
@@ -21161,7 +22628,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function modifyResponse($request, $response)
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::modifyResponse($request, $response);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->modifyResponse($request, $response);
         }
         
         /**
@@ -21172,7 +22640,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function isEnabled()
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::isEnabled();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->isEnabled();
         }
         
         /**
@@ -21183,7 +22652,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function collect()
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::collect();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->collect();
         }
         
         /**
@@ -21195,7 +22665,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function injectDebugbar($response)
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::injectDebugbar($response);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->injectDebugbar($response);
         }
         
         /**
@@ -21205,7 +22676,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function disable()
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::disable();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->disable();
         }
         
         /**
@@ -21218,7 +22690,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function addMeasure($label, $start, $end)
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::addMeasure($label, $start, $end);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->addMeasure($label, $start, $end);
         }
         
         /**
@@ -21230,7 +22703,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function measure($label, $closure)
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::measure($label, $closure);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->measure($label, $closure);
         }
         
         /**
@@ -21241,7 +22715,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function collectConsole()
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::collectConsole();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->collectConsole();
         }
         
         /**
@@ -21255,7 +22730,8 @@ namespace Barryvdh\Debugbar {
          */ 
         public static function addMessage($message, $label = 'info')
         {
-            return \Barryvdh\Debugbar\LaravelDebugbar::addMessage($message, $label);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->addMessage($message, $label);
         }
         
         /**
@@ -21268,7 +22744,8 @@ namespace Barryvdh\Debugbar {
         public static function hasCollector($name)
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::hasCollector($name);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->hasCollector($name);
         }
         
         /**
@@ -21282,7 +22759,8 @@ namespace Barryvdh\Debugbar {
         public static function getCollector($name)
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::getCollector($name);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getCollector($name);
         }
         
         /**
@@ -21294,20 +22772,22 @@ namespace Barryvdh\Debugbar {
         public static function getCollectors()
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::getCollectors();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getCollectors();
         }
         
         /**
          * Sets the request id generator
          *
          * @param \DebugBar\RequestIdGeneratorInterface $generator
-         * @return $this 
+         * @return \Barryvdh\Debugbar\LaravelDebugbar 
          * @static 
          */ 
         public static function setRequestIdGenerator($generator)
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::setRequestIdGenerator($generator);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->setRequestIdGenerator($generator);
         }
         
         /**
@@ -21319,7 +22799,8 @@ namespace Barryvdh\Debugbar {
         public static function getRequestIdGenerator()
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::getRequestIdGenerator();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getRequestIdGenerator();
         }
         
         /**
@@ -21331,20 +22812,22 @@ namespace Barryvdh\Debugbar {
         public static function getCurrentRequestId()
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::getCurrentRequestId();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getCurrentRequestId();
         }
         
         /**
          * Sets the storage backend to use to store the collected data
          *
          * @param \DebugBar\StorageInterface $storage
-         * @return $this 
+         * @return \Barryvdh\Debugbar\LaravelDebugbar 
          * @static 
          */ 
         public static function setStorage($storage = null)
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::setStorage($storage);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->setStorage($storage);
         }
         
         /**
@@ -21356,7 +22839,8 @@ namespace Barryvdh\Debugbar {
         public static function getStorage()
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::getStorage();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getStorage();
         }
         
         /**
@@ -21368,20 +22852,22 @@ namespace Barryvdh\Debugbar {
         public static function isDataPersisted()
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::isDataPersisted();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->isDataPersisted();
         }
         
         /**
          * Sets the HTTP driver
          *
          * @param \DebugBar\HttpDriverInterface $driver
-         * @return $this 
+         * @return \Barryvdh\Debugbar\LaravelDebugbar 
          * @static 
          */ 
         public static function setHttpDriver($driver)
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::setHttpDriver($driver);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->setHttpDriver($driver);
         }
         
         /**
@@ -21395,7 +22881,8 @@ namespace Barryvdh\Debugbar {
         public static function getHttpDriver()
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::getHttpDriver();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getHttpDriver();
         }
         
         /**
@@ -21409,7 +22896,8 @@ namespace Barryvdh\Debugbar {
         public static function getData()
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::getData();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getData();
         }
         
         /**
@@ -21423,7 +22911,8 @@ namespace Barryvdh\Debugbar {
         public static function getDataAsHeaders($headerName = 'phpdebugbar', $maxHeaderLength = 4096, $maxTotalHeaderLength = 250000)
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::getDataAsHeaders($headerName, $maxHeaderLength, $maxTotalHeaderLength);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getDataAsHeaders($headerName, $maxHeaderLength, $maxTotalHeaderLength);
         }
         
         /**
@@ -21432,13 +22921,14 @@ namespace Barryvdh\Debugbar {
          * @param bool $useOpenHandler
          * @param string $headerName
          * @param integer $maxHeaderLength
-         * @return $this 
+         * @return \Barryvdh\Debugbar\LaravelDebugbar 
          * @static 
          */ 
         public static function sendDataInHeaders($useOpenHandler = null, $headerName = 'phpdebugbar', $maxHeaderLength = 4096)
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::sendDataInHeaders($useOpenHandler, $headerName, $maxHeaderLength);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->sendDataInHeaders($useOpenHandler, $headerName, $maxHeaderLength);
         }
         
         /**
@@ -21449,7 +22939,8 @@ namespace Barryvdh\Debugbar {
         public static function stackData()
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::stackData();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->stackData();
         }
         
         /**
@@ -21461,7 +22952,8 @@ namespace Barryvdh\Debugbar {
         public static function hasStackedData()
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::hasStackedData();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->hasStackedData();
         }
         
         /**
@@ -21474,20 +22966,22 @@ namespace Barryvdh\Debugbar {
         public static function getStackedData($delete = true)
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::getStackedData($delete);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getStackedData($delete);
         }
         
         /**
          * Sets the key to use in the $_SESSION array
          *
          * @param string $ns
-         * @return $this 
+         * @return \Barryvdh\Debugbar\LaravelDebugbar 
          * @static 
          */ 
         public static function setStackDataSessionNamespace($ns)
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::setStackDataSessionNamespace($ns);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->setStackDataSessionNamespace($ns);
         }
         
         /**
@@ -21499,7 +22993,8 @@ namespace Barryvdh\Debugbar {
         public static function getStackDataSessionNamespace()
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::getStackDataSessionNamespace();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->getStackDataSessionNamespace();
         }
         
         /**
@@ -21507,13 +23002,14 @@ namespace Barryvdh\Debugbar {
          * if a storage is enabled
          *
          * @param boolean $enabled
-         * @return $this 
+         * @return \Barryvdh\Debugbar\LaravelDebugbar 
          * @static 
          */ 
         public static function setStackAlwaysUseSessionStorage($enabled = true)
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::setStackAlwaysUseSessionStorage($enabled);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->setStackAlwaysUseSessionStorage($enabled);
         }
         
         /**
@@ -21526,7 +23022,8 @@ namespace Barryvdh\Debugbar {
         public static function isStackAlwaysUseSessionStorage()
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::isStackAlwaysUseSessionStorage();
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->isStackAlwaysUseSessionStorage();
         }
         
         /**
@@ -21537,7 +23034,8 @@ namespace Barryvdh\Debugbar {
         public static function offsetSet($key, $value)
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::offsetSet($key, $value);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->offsetSet($key, $value);
         }
         
         /**
@@ -21548,7 +23046,8 @@ namespace Barryvdh\Debugbar {
         public static function offsetGet($key)
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::offsetGet($key);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->offsetGet($key);
         }
         
         /**
@@ -21559,7 +23058,8 @@ namespace Barryvdh\Debugbar {
         public static function offsetExists($key)
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::offsetExists($key);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->offsetExists($key);
         }
         
         /**
@@ -21570,7 +23070,8 @@ namespace Barryvdh\Debugbar {
         public static function offsetUnset($key)
         {
             //Method inherited from \DebugBar\DebugBar            
-            return \Barryvdh\Debugbar\LaravelDebugbar::offsetUnset($key);
+                        /** @var \Barryvdh\Debugbar\LaravelDebugbar $instance */
+                        return $instance->offsetUnset($key);
         }
          
     }
@@ -21611,8 +23112,9 @@ namespace  {
              * @static 
              */ 
             public static function make($attributes = array())
-            {    
-                return \Illuminate\Database\Eloquent\Builder::make($attributes);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->make($attributes);
             }
          
             /**
@@ -21620,36 +23122,39 @@ namespace  {
              *
              * @param string $identifier
              * @param \Illuminate\Database\Eloquent\Scope|\Closure $scope
-             * @return $this 
+             * @return \Illuminate\Database\Eloquent\Builder 
              * @static 
              */ 
             public static function withGlobalScope($identifier, $scope)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::withGlobalScope($identifier, $scope);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->withGlobalScope($identifier, $scope);
             }
          
             /**
              * Remove a registered global scope.
              *
              * @param \Illuminate\Database\Eloquent\Scope|string $scope
-             * @return $this 
+             * @return \Illuminate\Database\Eloquent\Builder 
              * @static 
              */ 
             public static function withoutGlobalScope($scope)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::withoutGlobalScope($scope);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->withoutGlobalScope($scope);
             }
          
             /**
              * Remove all or passed registered global scopes.
              *
              * @param array|null $scopes
-             * @return $this 
+             * @return \Illuminate\Database\Eloquent\Builder 
              * @static 
              */ 
             public static function withoutGlobalScopes($scopes = null)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::withoutGlobalScopes($scopes);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->withoutGlobalScopes($scopes);
             }
          
             /**
@@ -21659,32 +23164,35 @@ namespace  {
              * @static 
              */ 
             public static function removedScopes()
-            {    
-                return \Illuminate\Database\Eloquent\Builder::removedScopes();
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->removedScopes();
             }
          
             /**
              * Add a where clause on the primary key to the query.
              *
              * @param mixed $id
-             * @return $this 
+             * @return \Illuminate\Database\Eloquent\Builder 
              * @static 
              */ 
             public static function whereKey($id)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::whereKey($id);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->whereKey($id);
             }
          
             /**
              * Add a where clause on the primary key to the query.
              *
              * @param mixed $id
-             * @return $this 
+             * @return \Illuminate\Database\Eloquent\Builder 
              * @static 
              */ 
             public static function whereKeyNot($id)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::whereKeyNot($id);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->whereKeyNot($id);
             }
          
             /**
@@ -21694,12 +23202,13 @@ namespace  {
              * @param mixed $operator
              * @param mixed $value
              * @param string $boolean
-             * @return $this 
+             * @return \Illuminate\Database\Eloquent\Builder 
              * @static 
              */ 
             public static function where($column, $operator = null, $value = null, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Eloquent\Builder::where($column, $operator, $value, $boolean);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->where($column, $operator, $value, $boolean);
             }
          
             /**
@@ -21712,32 +23221,35 @@ namespace  {
              * @static 
              */ 
             public static function orWhere($column, $operator = null, $value = null)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::orWhere($column, $operator, $value);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->orWhere($column, $operator, $value);
             }
          
             /**
              * Add an "order by" clause for a timestamp to the query.
              *
              * @param string $column
-             * @return $this 
+             * @return \Illuminate\Database\Eloquent\Builder 
              * @static 
              */ 
             public static function latest($column = null)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::latest($column);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->latest($column);
             }
          
             /**
              * Add an "order by" clause for a timestamp to the query.
              *
              * @param string $column
-             * @return $this 
+             * @return \Illuminate\Database\Eloquent\Builder 
              * @static 
              */ 
             public static function oldest($column = null)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::oldest($column);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->oldest($column);
             }
          
             /**
@@ -21748,8 +23260,9 @@ namespace  {
              * @static 
              */ 
             public static function hydrate($items)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::hydrate($items);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->hydrate($items);
             }
          
             /**
@@ -21761,8 +23274,9 @@ namespace  {
              * @static 
              */ 
             public static function fromQuery($query, $bindings = array())
-            {    
-                return \Illuminate\Database\Eloquent\Builder::fromQuery($query, $bindings);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->fromQuery($query, $bindings);
             }
          
             /**
@@ -21774,8 +23288,9 @@ namespace  {
              * @static 
              */ 
             public static function find($id, $columns = array())
-            {    
-                return \Illuminate\Database\Eloquent\Builder::find($id, $columns);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->find($id, $columns);
             }
          
             /**
@@ -21787,8 +23302,9 @@ namespace  {
              * @static 
              */ 
             public static function findMany($ids, $columns = array())
-            {    
-                return \Illuminate\Database\Eloquent\Builder::findMany($ids, $columns);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->findMany($ids, $columns);
             }
          
             /**
@@ -21801,8 +23317,9 @@ namespace  {
              * @static 
              */ 
             public static function findOrFail($id, $columns = array())
-            {    
-                return \Illuminate\Database\Eloquent\Builder::findOrFail($id, $columns);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->findOrFail($id, $columns);
             }
          
             /**
@@ -21814,8 +23331,9 @@ namespace  {
              * @static 
              */ 
             public static function findOrNew($id, $columns = array())
-            {    
-                return \Illuminate\Database\Eloquent\Builder::findOrNew($id, $columns);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->findOrNew($id, $columns);
             }
          
             /**
@@ -21827,8 +23345,9 @@ namespace  {
              * @static 
              */ 
             public static function firstOrNew($attributes, $values = array())
-            {    
-                return \Illuminate\Database\Eloquent\Builder::firstOrNew($attributes, $values);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->firstOrNew($attributes, $values);
             }
          
             /**
@@ -21840,8 +23359,9 @@ namespace  {
              * @static 
              */ 
             public static function firstOrCreate($attributes, $values = array())
-            {    
-                return \Illuminate\Database\Eloquent\Builder::firstOrCreate($attributes, $values);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->firstOrCreate($attributes, $values);
             }
          
             /**
@@ -21853,8 +23373,9 @@ namespace  {
              * @static 
              */ 
             public static function updateOrCreate($attributes, $values = array())
-            {    
-                return \Illuminate\Database\Eloquent\Builder::updateOrCreate($attributes, $values);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->updateOrCreate($attributes, $values);
             }
          
             /**
@@ -21866,8 +23387,9 @@ namespace  {
              * @static 
              */ 
             public static function firstOrFail($columns = array())
-            {    
-                return \Illuminate\Database\Eloquent\Builder::firstOrFail($columns);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->firstOrFail($columns);
             }
          
             /**
@@ -21879,8 +23401,9 @@ namespace  {
              * @static 
              */ 
             public static function firstOr($columns = array(), $callback = null)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::firstOr($columns, $callback);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->firstOr($columns, $callback);
             }
          
             /**
@@ -21891,8 +23414,9 @@ namespace  {
              * @static 
              */ 
             public static function value($column)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::value($column);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->value($column);
             }
          
             /**
@@ -21903,8 +23427,9 @@ namespace  {
              * @static 
              */ 
             public static function get($columns = array())
-            {    
-                return \Illuminate\Database\Eloquent\Builder::get($columns);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->get($columns);
             }
          
             /**
@@ -21915,8 +23440,9 @@ namespace  {
              * @static 
              */ 
             public static function getModels($columns = array())
-            {    
-                return \Illuminate\Database\Eloquent\Builder::getModels($columns);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->getModels($columns);
             }
          
             /**
@@ -21927,8 +23453,9 @@ namespace  {
              * @static 
              */ 
             public static function eagerLoadRelations($models)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::eagerLoadRelations($models);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->eagerLoadRelations($models);
             }
          
             /**
@@ -21938,8 +23465,9 @@ namespace  {
              * @static 
              */ 
             public static function cursor()
-            {    
-                return \Illuminate\Database\Eloquent\Builder::cursor();
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->cursor();
             }
          
             /**
@@ -21953,8 +23481,9 @@ namespace  {
              * @static 
              */ 
             public static function chunkById($count, $callback, $column = null, $alias = null)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::chunkById($count, $callback, $column, $alias);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->chunkById($count, $callback, $column, $alias);
             }
          
             /**
@@ -21966,8 +23495,9 @@ namespace  {
              * @static 
              */ 
             public static function pluck($column, $key = null)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::pluck($column, $key);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->pluck($column, $key);
             }
          
             /**
@@ -21982,8 +23512,9 @@ namespace  {
              * @static 
              */ 
             public static function paginate($perPage = null, $columns = array(), $pageName = 'page', $page = null)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::paginate($perPage, $columns, $pageName, $page);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->paginate($perPage, $columns, $pageName, $page);
             }
          
             /**
@@ -21997,8 +23528,9 @@ namespace  {
              * @static 
              */ 
             public static function simplePaginate($perPage = null, $columns = array(), $pageName = 'page', $page = null)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::simplePaginate($perPage, $columns, $pageName, $page);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->simplePaginate($perPage, $columns, $pageName, $page);
             }
          
             /**
@@ -22009,8 +23541,9 @@ namespace  {
              * @static 
              */ 
             public static function create($attributes = array())
-            {    
-                return \Illuminate\Database\Eloquent\Builder::create($attributes);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->create($attributes);
             }
          
             /**
@@ -22021,8 +23554,9 @@ namespace  {
              * @static 
              */ 
             public static function forceCreate($attributes)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::forceCreate($attributes);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->forceCreate($attributes);
             }
          
             /**
@@ -22033,43 +23567,47 @@ namespace  {
              * @static 
              */ 
             public static function onDelete($callback)
-            {    
-                \Illuminate\Database\Eloquent\Builder::onDelete($callback);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                $instance->onDelete($callback);
             }
          
             /**
              * Call the given local model scopes.
              *
              * @param array $scopes
-             * @return mixed 
+             * @return static|mixed 
              * @static 
              */ 
             public static function scopes($scopes)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::scopes($scopes);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->scopes($scopes);
             }
          
             /**
              * Apply the scopes to the Eloquent builder instance and return it.
              *
-             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @return static 
              * @static 
              */ 
             public static function applyScopes()
-            {    
-                return \Illuminate\Database\Eloquent\Builder::applyScopes();
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->applyScopes();
             }
          
             /**
              * Prevent the specified relations from being eager loaded.
              *
              * @param mixed $relations
-             * @return $this 
+             * @return \Illuminate\Database\Eloquent\Builder 
              * @static 
              */ 
             public static function without($relations)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::without($relations);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->without($relations);
             }
          
             /**
@@ -22080,8 +23618,9 @@ namespace  {
              * @static 
              */ 
             public static function newModelInstance($attributes = array())
-            {    
-                return \Illuminate\Database\Eloquent\Builder::newModelInstance($attributes);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->newModelInstance($attributes);
             }
          
             /**
@@ -22091,20 +23630,22 @@ namespace  {
              * @static 
              */ 
             public static function getQuery()
-            {    
-                return \Illuminate\Database\Eloquent\Builder::getQuery();
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->getQuery();
             }
          
             /**
              * Set the underlying query builder instance.
              *
              * @param \Illuminate\Database\Query\Builder $query
-             * @return $this 
+             * @return \Illuminate\Database\Eloquent\Builder 
              * @static 
              */ 
             public static function setQuery($query)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::setQuery($query);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->setQuery($query);
             }
          
             /**
@@ -22114,8 +23655,9 @@ namespace  {
              * @static 
              */ 
             public static function toBase()
-            {    
-                return \Illuminate\Database\Eloquent\Builder::toBase();
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->toBase();
             }
          
             /**
@@ -22125,20 +23667,22 @@ namespace  {
              * @static 
              */ 
             public static function getEagerLoads()
-            {    
-                return \Illuminate\Database\Eloquent\Builder::getEagerLoads();
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->getEagerLoads();
             }
          
             /**
              * Set the relationships being eagerly loaded.
              *
              * @param array $eagerLoad
-             * @return $this 
+             * @return \Illuminate\Database\Eloquent\Builder 
              * @static 
              */ 
             public static function setEagerLoads($eagerLoad)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::setEagerLoads($eagerLoad);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->setEagerLoads($eagerLoad);
             }
          
             /**
@@ -22148,20 +23692,22 @@ namespace  {
              * @static 
              */ 
             public static function getModel()
-            {    
-                return \Illuminate\Database\Eloquent\Builder::getModel();
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->getModel();
             }
          
             /**
              * Set a model instance for the model being queried.
              *
              * @param \Illuminate\Database\Eloquent\Model $model
-             * @return $this 
+             * @return \Illuminate\Database\Eloquent\Builder 
              * @static 
              */ 
             public static function setModel($model)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::setModel($model);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->setModel($model);
             }
          
             /**
@@ -22172,8 +23718,9 @@ namespace  {
              * @static 
              */ 
             public static function getMacro($name)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::getMacro($name);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->getMacro($name);
             }
          
             /**
@@ -22185,8 +23732,9 @@ namespace  {
              * @static 
              */ 
             public static function chunk($count, $callback)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::chunk($count, $callback);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->chunk($count, $callback);
             }
          
             /**
@@ -22198,8 +23746,9 @@ namespace  {
              * @static 
              */ 
             public static function each($callback, $count = 1000)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::each($callback, $count);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->each($callback, $count);
             }
          
             /**
@@ -22210,8 +23759,9 @@ namespace  {
              * @static 
              */ 
             public static function first($columns = array())
-            {    
-                return \Illuminate\Database\Eloquent\Builder::first($columns);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->first($columns);
             }
          
             /**
@@ -22224,20 +23774,22 @@ namespace  {
              * @static 
              */ 
             public static function when($value, $callback, $default = null)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::when($value, $callback, $default);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->when($value, $callback, $default);
             }
          
             /**
              * Pass the query to a given callback.
              *
-             * @param \Closure $callback
+             * @param callable $callback
              * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function tap($callback)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::tap($callback);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->tap($callback);
             }
          
             /**
@@ -22250,8 +23802,9 @@ namespace  {
              * @static 
              */ 
             public static function unless($value, $callback, $default = null)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::unless($value, $callback, $default);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->unless($value, $callback, $default);
             }
          
             /**
@@ -22266,8 +23819,9 @@ namespace  {
              * @static 
              */ 
             public static function has($relation, $operator = '>=', $count = 1, $boolean = 'and', $callback = null)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::has($relation, $operator, $count, $boolean, $callback);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->has($relation, $operator, $count, $boolean, $callback);
             }
          
             /**
@@ -22280,8 +23834,9 @@ namespace  {
              * @static 
              */ 
             public static function orHas($relation, $operator = '>=', $count = 1)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::orHas($relation, $operator, $count);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->orHas($relation, $operator, $count);
             }
          
             /**
@@ -22294,8 +23849,9 @@ namespace  {
              * @static 
              */ 
             public static function doesntHave($relation, $boolean = 'and', $callback = null)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::doesntHave($relation, $boolean, $callback);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->doesntHave($relation, $boolean, $callback);
             }
          
             /**
@@ -22306,8 +23862,9 @@ namespace  {
              * @static 
              */ 
             public static function orDoesntHave($relation)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::orDoesntHave($relation);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->orDoesntHave($relation);
             }
          
             /**
@@ -22321,8 +23878,9 @@ namespace  {
              * @static 
              */ 
             public static function whereHas($relation, $callback = null, $operator = '>=', $count = 1)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::whereHas($relation, $callback, $operator, $count);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->whereHas($relation, $callback, $operator, $count);
             }
          
             /**
@@ -22336,8 +23894,9 @@ namespace  {
              * @static 
              */ 
             public static function orWhereHas($relation, $callback = null, $operator = '>=', $count = 1)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::orWhereHas($relation, $callback, $operator, $count);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->orWhereHas($relation, $callback, $operator, $count);
             }
          
             /**
@@ -22349,8 +23908,9 @@ namespace  {
              * @static 
              */ 
             public static function whereDoesntHave($relation, $callback = null)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::whereDoesntHave($relation, $callback);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->whereDoesntHave($relation, $callback);
             }
          
             /**
@@ -22362,20 +23922,22 @@ namespace  {
              * @static 
              */ 
             public static function orWhereDoesntHave($relation, $callback = null)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::orWhereDoesntHave($relation, $callback);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->orWhereDoesntHave($relation, $callback);
             }
          
             /**
              * Add subselect queries to count the relations.
              *
              * @param mixed $relations
-             * @return $this 
+             * @return \Illuminate\Database\Eloquent\Builder 
              * @static 
              */ 
             public static function withCount($relations)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::withCount($relations);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->withCount($relations);
             }
          
             /**
@@ -22386,20 +23948,22 @@ namespace  {
              * @static 
              */ 
             public static function mergeConstraintsFrom($from)
-            {    
-                return \Illuminate\Database\Eloquent\Builder::mergeConstraintsFrom($from);
+            {
+                                /** @var \Illuminate\Database\Eloquent\Builder $instance */
+                                return $instance->mergeConstraintsFrom($from);
             }
          
             /**
              * Set the columns to be selected.
              *
              * @param array|mixed $columns
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function select($columns = array())
-            {    
-                return \Illuminate\Database\Query\Builder::select($columns);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->select($columns);
             }
          
             /**
@@ -22412,8 +23976,9 @@ namespace  {
              * @static 
              */ 
             public static function selectSub($query, $as)
-            {    
-                return \Illuminate\Database\Query\Builder::selectSub($query, $as);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->selectSub($query, $as);
             }
          
             /**
@@ -22425,8 +23990,9 @@ namespace  {
              * @static 
              */ 
             public static function selectRaw($expression, $bindings = array())
-            {    
-                return \Illuminate\Database\Query\Builder::selectRaw($expression, $bindings);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->selectRaw($expression, $bindings);
             }
          
             /**
@@ -22439,8 +24005,9 @@ namespace  {
              * @static 
              */ 
             public static function fromSub($query, $as)
-            {    
-                return \Illuminate\Database\Query\Builder::fromSub($query, $as);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->fromSub($query, $as);
             }
          
             /**
@@ -22452,43 +24019,47 @@ namespace  {
              * @static 
              */ 
             public static function fromRaw($expression, $bindings = array())
-            {    
-                return \Illuminate\Database\Query\Builder::fromRaw($expression, $bindings);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->fromRaw($expression, $bindings);
             }
          
             /**
              * Add a new select column to the query.
              *
              * @param array|mixed $column
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function addSelect($column)
-            {    
-                return \Illuminate\Database\Query\Builder::addSelect($column);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->addSelect($column);
             }
          
             /**
              * Force the query to only return distinct results.
              *
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function distinct()
-            {    
-                return \Illuminate\Database\Query\Builder::distinct();
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->distinct();
             }
          
             /**
              * Set the table which the query is targeting.
              *
              * @param string $table
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function from($table)
-            {    
-                return \Illuminate\Database\Query\Builder::from($table);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->from($table);
             }
          
             /**
@@ -22500,12 +24071,13 @@ namespace  {
              * @param string|null $second
              * @param string $type
              * @param bool $where
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function join($table, $first, $operator = null, $second = null, $type = 'inner', $where = false)
-            {    
-                return \Illuminate\Database\Query\Builder::join($table, $first, $operator, $second, $type, $where);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->join($table, $first, $operator, $second, $type, $where);
             }
          
             /**
@@ -22520,8 +24092,9 @@ namespace  {
              * @static 
              */ 
             public static function joinWhere($table, $first, $operator, $second, $type = 'inner')
-            {    
-                return \Illuminate\Database\Query\Builder::joinWhere($table, $first, $operator, $second, $type);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->joinWhere($table, $first, $operator, $second, $type);
             }
          
             /**
@@ -22539,8 +24112,9 @@ namespace  {
              * @static 
              */ 
             public static function joinSub($query, $as, $first, $operator = null, $second = null, $type = 'inner', $where = false)
-            {    
-                return \Illuminate\Database\Query\Builder::joinSub($query, $as, $first, $operator, $second, $type, $where);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->joinSub($query, $as, $first, $operator, $second, $type, $where);
             }
          
             /**
@@ -22554,23 +24128,25 @@ namespace  {
              * @static 
              */ 
             public static function leftJoin($table, $first, $operator = null, $second = null)
-            {    
-                return \Illuminate\Database\Query\Builder::leftJoin($table, $first, $operator, $second);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->leftJoin($table, $first, $operator, $second);
             }
          
             /**
              * Add a "join where" clause to the query.
              *
              * @param string $table
-             * @param string $first
+             * @param \Closure|string $first
              * @param string $operator
              * @param string $second
              * @return \Illuminate\Database\Query\Builder|static 
              * @static 
              */ 
             public static function leftJoinWhere($table, $first, $operator, $second)
-            {    
-                return \Illuminate\Database\Query\Builder::leftJoinWhere($table, $first, $operator, $second);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->leftJoinWhere($table, $first, $operator, $second);
             }
          
             /**
@@ -22578,15 +24154,16 @@ namespace  {
              *
              * @param \Closure|\Illuminate\Database\Query\Builder|string $query
              * @param string $as
-             * @param string $first
+             * @param \Closure|string $first
              * @param string|null $operator
              * @param string|null $second
              * @return \Illuminate\Database\Query\Builder|static 
              * @static 
              */ 
             public static function leftJoinSub($query, $as, $first, $operator = null, $second = null)
-            {    
-                return \Illuminate\Database\Query\Builder::leftJoinSub($query, $as, $first, $operator, $second);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->leftJoinSub($query, $as, $first, $operator, $second);
             }
          
             /**
@@ -22600,23 +24177,25 @@ namespace  {
              * @static 
              */ 
             public static function rightJoin($table, $first, $operator = null, $second = null)
-            {    
-                return \Illuminate\Database\Query\Builder::rightJoin($table, $first, $operator, $second);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->rightJoin($table, $first, $operator, $second);
             }
          
             /**
              * Add a "right join where" clause to the query.
              *
              * @param string $table
-             * @param string $first
+             * @param \Closure|string $first
              * @param string $operator
              * @param string $second
              * @return \Illuminate\Database\Query\Builder|static 
              * @static 
              */ 
             public static function rightJoinWhere($table, $first, $operator, $second)
-            {    
-                return \Illuminate\Database\Query\Builder::rightJoinWhere($table, $first, $operator, $second);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->rightJoinWhere($table, $first, $operator, $second);
             }
          
             /**
@@ -22624,15 +24203,16 @@ namespace  {
              *
              * @param \Closure|\Illuminate\Database\Query\Builder|string $query
              * @param string $as
-             * @param string $first
+             * @param \Closure|string $first
              * @param string|null $operator
              * @param string|null $second
              * @return \Illuminate\Database\Query\Builder|static 
              * @static 
              */ 
             public static function rightJoinSub($query, $as, $first, $operator = null, $second = null)
-            {    
-                return \Illuminate\Database\Query\Builder::rightJoinSub($query, $as, $first, $operator, $second);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->rightJoinSub($query, $as, $first, $operator, $second);
             }
          
             /**
@@ -22646,8 +24226,9 @@ namespace  {
              * @static 
              */ 
             public static function crossJoin($table, $first = null, $operator = null, $second = null)
-            {    
-                return \Illuminate\Database\Query\Builder::crossJoin($table, $first, $operator, $second);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->crossJoin($table, $first, $operator, $second);
             }
          
             /**
@@ -22659,8 +24240,9 @@ namespace  {
              * @static 
              */ 
             public static function mergeWheres($wheres, $bindings)
-            {    
-                \Illuminate\Database\Query\Builder::mergeWheres($wheres, $bindings);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                $instance->mergeWheres($wheres, $bindings);
             }
          
             /**
@@ -22674,8 +24256,9 @@ namespace  {
              * @static 
              */ 
             public static function prepareValueAndOperator($value, $operator, $useDefault = false)
-            {    
-                return \Illuminate\Database\Query\Builder::prepareValueAndOperator($value, $operator, $useDefault);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->prepareValueAndOperator($value, $operator, $useDefault);
             }
          
             /**
@@ -22689,8 +24272,9 @@ namespace  {
              * @static 
              */ 
             public static function whereColumn($first, $operator = null, $second = null, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::whereColumn($first, $operator, $second, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereColumn($first, $operator, $second, $boolean);
             }
          
             /**
@@ -22703,8 +24287,9 @@ namespace  {
              * @static 
              */ 
             public static function orWhereColumn($first, $operator = null, $second = null)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereColumn($first, $operator, $second);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereColumn($first, $operator, $second);
             }
          
             /**
@@ -22713,12 +24298,13 @@ namespace  {
              * @param string $sql
              * @param mixed $bindings
              * @param string $boolean
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function whereRaw($sql, $bindings = array(), $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::whereRaw($sql, $bindings, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereRaw($sql, $bindings, $boolean);
             }
          
             /**
@@ -22730,8 +24316,9 @@ namespace  {
              * @static 
              */ 
             public static function orWhereRaw($sql, $bindings = array())
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereRaw($sql, $bindings);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereRaw($sql, $bindings);
             }
          
             /**
@@ -22741,12 +24328,13 @@ namespace  {
              * @param mixed $values
              * @param string $boolean
              * @param bool $not
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function whereIn($column, $values, $boolean = 'and', $not = false)
-            {    
-                return \Illuminate\Database\Query\Builder::whereIn($column, $values, $boolean, $not);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereIn($column, $values, $boolean, $not);
             }
          
             /**
@@ -22758,8 +24346,9 @@ namespace  {
              * @static 
              */ 
             public static function orWhereIn($column, $values)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereIn($column, $values);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereIn($column, $values);
             }
          
             /**
@@ -22772,8 +24361,9 @@ namespace  {
              * @static 
              */ 
             public static function whereNotIn($column, $values, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::whereNotIn($column, $values, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereNotIn($column, $values, $boolean);
             }
          
             /**
@@ -22785,8 +24375,40 @@ namespace  {
              * @static 
              */ 
             public static function orWhereNotIn($column, $values)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereNotIn($column, $values);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereNotIn($column, $values);
+            }
+         
+            /**
+             * Add a "where in raw" clause for integer values to the query.
+             *
+             * @param string $column
+             * @param \Illuminate\Contracts\Support\Arrayable|array $values
+             * @param string $boolean
+             * @param bool $not
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function whereIntegerInRaw($column, $values, $boolean = 'and', $not = false)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereIntegerInRaw($column, $values, $boolean, $not);
+            }
+         
+            /**
+             * Add a "where not in raw" clause for integer values to the query.
+             *
+             * @param string $column
+             * @param \Illuminate\Contracts\Support\Arrayable|array $values
+             * @param string $boolean
+             * @return \Illuminate\Database\Query\Builder 
+             * @static 
+             */ 
+            public static function whereIntegerNotInRaw($column, $values, $boolean = 'and')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereIntegerNotInRaw($column, $values, $boolean);
             }
          
             /**
@@ -22795,12 +24417,13 @@ namespace  {
              * @param string $column
              * @param string $boolean
              * @param bool $not
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function whereNull($column, $boolean = 'and', $not = false)
-            {    
-                return \Illuminate\Database\Query\Builder::whereNull($column, $boolean, $not);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereNull($column, $boolean, $not);
             }
          
             /**
@@ -22811,8 +24434,9 @@ namespace  {
              * @static 
              */ 
             public static function orWhereNull($column)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereNull($column);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereNull($column);
             }
          
             /**
@@ -22824,8 +24448,9 @@ namespace  {
              * @static 
              */ 
             public static function whereNotNull($column, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::whereNotNull($column, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereNotNull($column, $boolean);
             }
          
             /**
@@ -22835,12 +24460,13 @@ namespace  {
              * @param array $values
              * @param string $boolean
              * @param bool $not
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function whereBetween($column, $values, $boolean = 'and', $not = false)
-            {    
-                return \Illuminate\Database\Query\Builder::whereBetween($column, $values, $boolean, $not);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereBetween($column, $values, $boolean, $not);
             }
          
             /**
@@ -22852,8 +24478,9 @@ namespace  {
              * @static 
              */ 
             public static function orWhereBetween($column, $values)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereBetween($column, $values);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereBetween($column, $values);
             }
          
             /**
@@ -22866,8 +24493,9 @@ namespace  {
              * @static 
              */ 
             public static function whereNotBetween($column, $values, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::whereNotBetween($column, $values, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereNotBetween($column, $values, $boolean);
             }
          
             /**
@@ -22879,8 +24507,9 @@ namespace  {
              * @static 
              */ 
             public static function orWhereNotBetween($column, $values)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereNotBetween($column, $values);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereNotBetween($column, $values);
             }
          
             /**
@@ -22891,8 +24520,9 @@ namespace  {
              * @static 
              */ 
             public static function orWhereNotNull($column)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereNotNull($column);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereNotNull($column);
             }
          
             /**
@@ -22906,8 +24536,9 @@ namespace  {
              * @static 
              */ 
             public static function whereDate($column, $operator, $value = null, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::whereDate($column, $operator, $value, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereDate($column, $operator, $value, $boolean);
             }
          
             /**
@@ -22920,8 +24551,9 @@ namespace  {
              * @static 
              */ 
             public static function orWhereDate($column, $operator, $value = null)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereDate($column, $operator, $value);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereDate($column, $operator, $value);
             }
          
             /**
@@ -22935,8 +24567,9 @@ namespace  {
              * @static 
              */ 
             public static function whereTime($column, $operator, $value = null, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::whereTime($column, $operator, $value, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereTime($column, $operator, $value, $boolean);
             }
          
             /**
@@ -22949,8 +24582,9 @@ namespace  {
              * @static 
              */ 
             public static function orWhereTime($column, $operator, $value = null)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereTime($column, $operator, $value);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereTime($column, $operator, $value);
             }
          
             /**
@@ -22964,8 +24598,9 @@ namespace  {
              * @static 
              */ 
             public static function whereDay($column, $operator, $value = null, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::whereDay($column, $operator, $value, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereDay($column, $operator, $value, $boolean);
             }
          
             /**
@@ -22978,8 +24613,9 @@ namespace  {
              * @static 
              */ 
             public static function orWhereDay($column, $operator, $value = null)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereDay($column, $operator, $value);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereDay($column, $operator, $value);
             }
          
             /**
@@ -22993,8 +24629,9 @@ namespace  {
              * @static 
              */ 
             public static function whereMonth($column, $operator, $value = null, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::whereMonth($column, $operator, $value, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereMonth($column, $operator, $value, $boolean);
             }
          
             /**
@@ -23007,8 +24644,9 @@ namespace  {
              * @static 
              */ 
             public static function orWhereMonth($column, $operator, $value = null)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereMonth($column, $operator, $value);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereMonth($column, $operator, $value);
             }
          
             /**
@@ -23022,8 +24660,9 @@ namespace  {
              * @static 
              */ 
             public static function whereYear($column, $operator, $value = null, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::whereYear($column, $operator, $value, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereYear($column, $operator, $value, $boolean);
             }
          
             /**
@@ -23036,8 +24675,9 @@ namespace  {
              * @static 
              */ 
             public static function orWhereYear($column, $operator, $value = null)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereYear($column, $operator, $value);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereYear($column, $operator, $value);
             }
          
             /**
@@ -23049,8 +24689,9 @@ namespace  {
              * @static 
              */ 
             public static function whereNested($callback, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::whereNested($callback, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereNested($callback, $boolean);
             }
          
             /**
@@ -23060,8 +24701,9 @@ namespace  {
              * @static 
              */ 
             public static function forNestedWhere()
-            {    
-                return \Illuminate\Database\Query\Builder::forNestedWhere();
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->forNestedWhere();
             }
          
             /**
@@ -23069,12 +24711,13 @@ namespace  {
              *
              * @param \Illuminate\Database\Query\Builder|static $query
              * @param string $boolean
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function addNestedWhereQuery($query, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::addNestedWhereQuery($query, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->addNestedWhereQuery($query, $boolean);
             }
          
             /**
@@ -23083,12 +24726,13 @@ namespace  {
              * @param \Closure $callback
              * @param string $boolean
              * @param bool $not
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function whereExists($callback, $boolean = 'and', $not = false)
-            {    
-                return \Illuminate\Database\Query\Builder::whereExists($callback, $boolean, $not);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereExists($callback, $boolean, $not);
             }
          
             /**
@@ -23100,8 +24744,9 @@ namespace  {
              * @static 
              */ 
             public static function orWhereExists($callback, $not = false)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereExists($callback, $not);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereExists($callback, $not);
             }
          
             /**
@@ -23113,8 +24758,9 @@ namespace  {
              * @static 
              */ 
             public static function whereNotExists($callback, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::whereNotExists($callback, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereNotExists($callback, $boolean);
             }
          
             /**
@@ -23125,8 +24771,9 @@ namespace  {
              * @static 
              */ 
             public static function orWhereNotExists($callback)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereNotExists($callback);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereNotExists($callback);
             }
          
             /**
@@ -23135,12 +24782,13 @@ namespace  {
              * @param \Illuminate\Database\Query\Builder $query
              * @param string $boolean
              * @param bool $not
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function addWhereExistsQuery($query, $boolean = 'and', $not = false)
-            {    
-                return \Illuminate\Database\Query\Builder::addWhereExistsQuery($query, $boolean, $not);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->addWhereExistsQuery($query, $boolean, $not);
             }
          
             /**
@@ -23150,12 +24798,13 @@ namespace  {
              * @param string $operator
              * @param array $values
              * @param string $boolean
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function whereRowValues($columns, $operator, $values, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::whereRowValues($columns, $operator, $values, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereRowValues($columns, $operator, $values, $boolean);
             }
          
             /**
@@ -23164,12 +24813,13 @@ namespace  {
              * @param array $columns
              * @param string $operator
              * @param array $values
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function orWhereRowValues($columns, $operator, $values)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereRowValues($columns, $operator, $values);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereRowValues($columns, $operator, $values);
             }
          
             /**
@@ -23179,12 +24829,13 @@ namespace  {
              * @param mixed $value
              * @param string $boolean
              * @param bool $not
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function whereJsonContains($column, $value, $boolean = 'and', $not = false)
-            {    
-                return \Illuminate\Database\Query\Builder::whereJsonContains($column, $value, $boolean, $not);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereJsonContains($column, $value, $boolean, $not);
             }
          
             /**
@@ -23192,12 +24843,13 @@ namespace  {
              *
              * @param string $column
              * @param mixed $value
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function orWhereJsonContains($column, $value)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereJsonContains($column, $value);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereJsonContains($column, $value);
             }
          
             /**
@@ -23206,12 +24858,13 @@ namespace  {
              * @param string $column
              * @param mixed $value
              * @param string $boolean
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function whereJsonDoesntContain($column, $value, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::whereJsonDoesntContain($column, $value, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereJsonDoesntContain($column, $value, $boolean);
             }
          
             /**
@@ -23219,12 +24872,13 @@ namespace  {
              *
              * @param string $column
              * @param mixed $value
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function orWhereJsonDoesntContain($column, $value)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereJsonDoesntContain($column, $value);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereJsonDoesntContain($column, $value);
             }
          
             /**
@@ -23234,12 +24888,13 @@ namespace  {
              * @param mixed $operator
              * @param mixed $value
              * @param string $boolean
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function whereJsonLength($column, $operator, $value = null, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::whereJsonLength($column, $operator, $value, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->whereJsonLength($column, $operator, $value, $boolean);
             }
          
             /**
@@ -23248,12 +24903,13 @@ namespace  {
              * @param string $column
              * @param mixed $operator
              * @param mixed $value
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function orWhereJsonLength($column, $operator, $value = null)
-            {    
-                return \Illuminate\Database\Query\Builder::orWhereJsonLength($column, $operator, $value);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orWhereJsonLength($column, $operator, $value);
             }
          
             /**
@@ -23261,24 +24917,26 @@ namespace  {
              *
              * @param string $method
              * @param string $parameters
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function dynamicWhere($method, $parameters)
-            {    
-                return \Illuminate\Database\Query\Builder::dynamicWhere($method, $parameters);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->dynamicWhere($method, $parameters);
             }
          
             /**
              * Add a "group by" clause to the query.
              *
              * @param array $groups
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function groupBy($groups = null)
-            {    
-                return \Illuminate\Database\Query\Builder::groupBy($groups);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->groupBy($groups);
             }
          
             /**
@@ -23288,12 +24946,13 @@ namespace  {
              * @param string|null $operator
              * @param string|null $value
              * @param string $boolean
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function having($column, $operator = null, $value = null, $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::having($column, $operator, $value, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->having($column, $operator, $value, $boolean);
             }
          
             /**
@@ -23306,8 +24965,25 @@ namespace  {
              * @static 
              */ 
             public static function orHaving($column, $operator = null, $value = null)
-            {    
-                return \Illuminate\Database\Query\Builder::orHaving($column, $operator, $value);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orHaving($column, $operator, $value);
+            }
+         
+            /**
+             * Add a "having between " clause to the query.
+             *
+             * @param string $column
+             * @param array $values
+             * @param string $boolean
+             * @param bool $not
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function havingBetween($column, $values, $boolean = 'and', $not = false)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->havingBetween($column, $values, $boolean, $not);
             }
          
             /**
@@ -23316,12 +24992,13 @@ namespace  {
              * @param string $sql
              * @param array $bindings
              * @param string $boolean
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function havingRaw($sql, $bindings = array(), $boolean = 'and')
-            {    
-                return \Illuminate\Database\Query\Builder::havingRaw($sql, $bindings, $boolean);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->havingRaw($sql, $bindings, $boolean);
             }
          
             /**
@@ -23333,8 +25010,9 @@ namespace  {
              * @static 
              */ 
             public static function orHavingRaw($sql, $bindings = array())
-            {    
-                return \Illuminate\Database\Query\Builder::orHavingRaw($sql, $bindings);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orHavingRaw($sql, $bindings);
             }
          
             /**
@@ -23342,36 +25020,40 @@ namespace  {
              *
              * @param string $column
              * @param string $direction
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
+             * @throws \InvalidArgumentException
              * @static 
              */ 
             public static function orderBy($column, $direction = 'asc')
-            {    
-                return \Illuminate\Database\Query\Builder::orderBy($column, $direction);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orderBy($column, $direction);
             }
          
             /**
              * Add a descending "order by" clause to the query.
              *
              * @param string $column
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function orderByDesc($column)
-            {    
-                return \Illuminate\Database\Query\Builder::orderByDesc($column);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orderByDesc($column);
             }
          
             /**
              * Put the query's results in random order.
              *
              * @param string $seed
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function inRandomOrder($seed = '')
-            {    
-                return \Illuminate\Database\Query\Builder::inRandomOrder($seed);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->inRandomOrder($seed);
             }
          
             /**
@@ -23379,12 +25061,13 @@ namespace  {
              *
              * @param string $sql
              * @param array $bindings
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function orderByRaw($sql, $bindings = array())
-            {    
-                return \Illuminate\Database\Query\Builder::orderByRaw($sql, $bindings);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->orderByRaw($sql, $bindings);
             }
          
             /**
@@ -23395,20 +25078,22 @@ namespace  {
              * @static 
              */ 
             public static function skip($value)
-            {    
-                return \Illuminate\Database\Query\Builder::skip($value);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->skip($value);
             }
          
             /**
              * Set the "offset" value of the query.
              *
              * @param int $value
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function offset($value)
-            {    
-                return \Illuminate\Database\Query\Builder::offset($value);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->offset($value);
             }
          
             /**
@@ -23419,20 +25104,22 @@ namespace  {
              * @static 
              */ 
             public static function take($value)
-            {    
-                return \Illuminate\Database\Query\Builder::take($value);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->take($value);
             }
          
             /**
              * Set the "limit" value of the query.
              *
              * @param int $value
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function limit($value)
-            {    
-                return \Illuminate\Database\Query\Builder::limit($value);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->limit($value);
             }
          
             /**
@@ -23444,8 +25131,24 @@ namespace  {
              * @static 
              */ 
             public static function forPage($page, $perPage = 15)
-            {    
-                return \Illuminate\Database\Query\Builder::forPage($page, $perPage);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->forPage($page, $perPage);
+            }
+         
+            /**
+             * Constrain the query to the previous "page" of results before a given ID.
+             *
+             * @param int $perPage
+             * @param int|null $lastId
+             * @param string $column
+             * @return \Illuminate\Database\Query\Builder|static 
+             * @static 
+             */ 
+            public static function forPageBeforeId($perPage = 15, $lastId = 0, $column = 'id')
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->forPageBeforeId($perPage, $lastId, $column);
             }
          
             /**
@@ -23458,8 +25161,9 @@ namespace  {
              * @static 
              */ 
             public static function forPageAfterId($perPage = 15, $lastId = 0, $column = 'id')
-            {    
-                return \Illuminate\Database\Query\Builder::forPageAfterId($perPage, $lastId, $column);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->forPageAfterId($perPage, $lastId, $column);
             }
          
             /**
@@ -23471,8 +25175,9 @@ namespace  {
              * @static 
              */ 
             public static function union($query, $all = false)
-            {    
-                return \Illuminate\Database\Query\Builder::union($query, $all);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->union($query, $all);
             }
          
             /**
@@ -23483,20 +25188,22 @@ namespace  {
              * @static 
              */ 
             public static function unionAll($query)
-            {    
-                return \Illuminate\Database\Query\Builder::unionAll($query);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->unionAll($query);
             }
          
             /**
              * Lock the selected rows in the table.
              *
              * @param string|bool $value
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function lock($value = true)
-            {    
-                return \Illuminate\Database\Query\Builder::lock($value);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->lock($value);
             }
          
             /**
@@ -23506,8 +25213,9 @@ namespace  {
              * @static 
              */ 
             public static function lockForUpdate()
-            {    
-                return \Illuminate\Database\Query\Builder::lockForUpdate();
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->lockForUpdate();
             }
          
             /**
@@ -23517,8 +25225,9 @@ namespace  {
              * @static 
              */ 
             public static function sharedLock()
-            {    
-                return \Illuminate\Database\Query\Builder::sharedLock();
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->sharedLock();
             }
          
             /**
@@ -23528,8 +25237,9 @@ namespace  {
              * @static 
              */ 
             public static function toSql()
-            {    
-                return \Illuminate\Database\Query\Builder::toSql();
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->toSql();
             }
          
             /**
@@ -23540,8 +25250,9 @@ namespace  {
              * @static 
              */ 
             public static function getCountForPagination($columns = array())
-            {    
-                return \Illuminate\Database\Query\Builder::getCountForPagination($columns);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->getCountForPagination($columns);
             }
          
             /**
@@ -23553,8 +25264,9 @@ namespace  {
              * @static 
              */ 
             public static function implode($column, $glue = '')
-            {    
-                return \Illuminate\Database\Query\Builder::implode($column, $glue);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->implode($column, $glue);
             }
          
             /**
@@ -23564,8 +25276,9 @@ namespace  {
              * @static 
              */ 
             public static function exists()
-            {    
-                return \Illuminate\Database\Query\Builder::exists();
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->exists();
             }
          
             /**
@@ -23575,8 +25288,9 @@ namespace  {
              * @static 
              */ 
             public static function doesntExist()
-            {    
-                return \Illuminate\Database\Query\Builder::doesntExist();
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->doesntExist();
             }
          
             /**
@@ -23587,8 +25301,9 @@ namespace  {
              * @static 
              */ 
             public static function count($columns = '*')
-            {    
-                return \Illuminate\Database\Query\Builder::count($columns);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->count($columns);
             }
          
             /**
@@ -23599,8 +25314,9 @@ namespace  {
              * @static 
              */ 
             public static function min($column)
-            {    
-                return \Illuminate\Database\Query\Builder::min($column);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->min($column);
             }
          
             /**
@@ -23611,8 +25327,9 @@ namespace  {
              * @static 
              */ 
             public static function max($column)
-            {    
-                return \Illuminate\Database\Query\Builder::max($column);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->max($column);
             }
          
             /**
@@ -23623,8 +25340,9 @@ namespace  {
              * @static 
              */ 
             public static function sum($column)
-            {    
-                return \Illuminate\Database\Query\Builder::sum($column);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->sum($column);
             }
          
             /**
@@ -23635,8 +25353,9 @@ namespace  {
              * @static 
              */ 
             public static function avg($column)
-            {    
-                return \Illuminate\Database\Query\Builder::avg($column);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->avg($column);
             }
          
             /**
@@ -23647,8 +25366,9 @@ namespace  {
              * @static 
              */ 
             public static function average($column)
-            {    
-                return \Illuminate\Database\Query\Builder::average($column);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->average($column);
             }
          
             /**
@@ -23660,8 +25380,9 @@ namespace  {
              * @static 
              */ 
             public static function aggregate($function, $columns = array())
-            {    
-                return \Illuminate\Database\Query\Builder::aggregate($function, $columns);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->aggregate($function, $columns);
             }
          
             /**
@@ -23673,8 +25394,9 @@ namespace  {
              * @static 
              */ 
             public static function numericAggregate($function, $columns = array())
-            {    
-                return \Illuminate\Database\Query\Builder::numericAggregate($function, $columns);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->numericAggregate($function, $columns);
             }
          
             /**
@@ -23685,8 +25407,9 @@ namespace  {
              * @static 
              */ 
             public static function insert($values)
-            {    
-                return \Illuminate\Database\Query\Builder::insert($values);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->insert($values);
             }
          
             /**
@@ -23698,8 +25421,23 @@ namespace  {
              * @static 
              */ 
             public static function insertGetId($values, $sequence = null)
-            {    
-                return \Illuminate\Database\Query\Builder::insertGetId($values, $sequence);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->insertGetId($values, $sequence);
+            }
+         
+            /**
+             * Insert new records into the table using a subquery.
+             *
+             * @param array $columns
+             * @param \Closure|\Illuminate\Database\Query\Builder|string $query
+             * @return bool 
+             * @static 
+             */ 
+            public static function insertUsing($columns, $query)
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->insertUsing($columns, $query);
             }
          
             /**
@@ -23711,8 +25449,9 @@ namespace  {
              * @static 
              */ 
             public static function updateOrInsert($attributes, $values = array())
-            {    
-                return \Illuminate\Database\Query\Builder::updateOrInsert($attributes, $values);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->updateOrInsert($attributes, $values);
             }
          
             /**
@@ -23722,8 +25461,9 @@ namespace  {
              * @static 
              */ 
             public static function truncate()
-            {    
-                \Illuminate\Database\Query\Builder::truncate();
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                $instance->truncate();
             }
          
             /**
@@ -23734,8 +25474,9 @@ namespace  {
              * @static 
              */ 
             public static function raw($value)
-            {    
-                return \Illuminate\Database\Query\Builder::raw($value);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->raw($value);
             }
          
             /**
@@ -23745,8 +25486,9 @@ namespace  {
              * @static 
              */ 
             public static function getBindings()
-            {    
-                return \Illuminate\Database\Query\Builder::getBindings();
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->getBindings();
             }
          
             /**
@@ -23756,8 +25498,9 @@ namespace  {
              * @static 
              */ 
             public static function getRawBindings()
-            {    
-                return \Illuminate\Database\Query\Builder::getRawBindings();
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->getRawBindings();
             }
          
             /**
@@ -23765,13 +25508,14 @@ namespace  {
              *
              * @param array $bindings
              * @param string $type
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @throws \InvalidArgumentException
              * @static 
              */ 
             public static function setBindings($bindings, $type = 'where')
-            {    
-                return \Illuminate\Database\Query\Builder::setBindings($bindings, $type);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->setBindings($bindings, $type);
             }
          
             /**
@@ -23779,25 +25523,27 @@ namespace  {
              *
              * @param mixed $value
              * @param string $type
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @throws \InvalidArgumentException
              * @static 
              */ 
             public static function addBinding($value, $type = 'where')
-            {    
-                return \Illuminate\Database\Query\Builder::addBinding($value, $type);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->addBinding($value, $type);
             }
          
             /**
              * Merge an array of bindings into our bindings.
              *
              * @param \Illuminate\Database\Query\Builder $query
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function mergeBindings($query)
-            {    
-                return \Illuminate\Database\Query\Builder::mergeBindings($query);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->mergeBindings($query);
             }
          
             /**
@@ -23807,8 +25553,9 @@ namespace  {
              * @static 
              */ 
             public static function getProcessor()
-            {    
-                return \Illuminate\Database\Query\Builder::getProcessor();
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->getProcessor();
             }
          
             /**
@@ -23818,19 +25565,21 @@ namespace  {
              * @static 
              */ 
             public static function getGrammar()
-            {    
-                return \Illuminate\Database\Query\Builder::getGrammar();
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->getGrammar();
             }
          
             /**
              * Use the write pdo for query.
              *
-             * @return $this 
+             * @return \Illuminate\Database\Query\Builder 
              * @static 
              */ 
             public static function useWritePdo()
-            {    
-                return \Illuminate\Database\Query\Builder::useWritePdo();
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->useWritePdo();
             }
          
             /**
@@ -23841,8 +25590,9 @@ namespace  {
              * @static 
              */ 
             public static function cloneWithout($properties)
-            {    
-                return \Illuminate\Database\Query\Builder::cloneWithout($properties);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->cloneWithout($properties);
             }
          
             /**
@@ -23853,8 +25603,9 @@ namespace  {
              * @static 
              */ 
             public static function cloneWithoutBindings($except)
-            {    
-                return \Illuminate\Database\Query\Builder::cloneWithoutBindings($except);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->cloneWithoutBindings($except);
             }
          
             /**
@@ -23866,21 +25617,22 @@ namespace  {
              * @static 
              */ 
             public static function macro($name, $macro)
-            {    
-                \Illuminate\Database\Query\Builder::macro($name, $macro);
+            {
+                                \Illuminate\Database\Query\Builder::macro($name, $macro);
             }
          
             /**
              * Mix another object into the class.
              *
              * @param object $mixin
+             * @param bool $replace
              * @return void 
              * @throws \ReflectionException
              * @static 
              */ 
-            public static function mixin($mixin)
-            {    
-                \Illuminate\Database\Query\Builder::mixin($mixin);
+            public static function mixin($mixin, $replace = true)
+            {
+                                \Illuminate\Database\Query\Builder::mixin($mixin, $replace);
             }
          
             /**
@@ -23891,8 +25643,8 @@ namespace  {
              * @static 
              */ 
             public static function hasMacro($name)
-            {    
-                return \Illuminate\Database\Query\Builder::hasMacro($name);
+            {
+                                return \Illuminate\Database\Query\Builder::hasMacro($name);
             }
          
             /**
@@ -23905,8 +25657,9 @@ namespace  {
              * @static 
              */ 
             public static function macroCall($method, $parameters)
-            {    
-                return \Illuminate\Database\Query\Builder::macroCall($method, $parameters);
+            {
+                                /** @var \Illuminate\Database\Query\Builder $instance */
+                                return $instance->macroCall($method, $parameters);
             }
         }
 
diff --git a/app/Http/Controllers/Web/Auth/AuthController.php b/app/Http/Controllers/Web/Auth/AuthController.php
index 85b2346..719fedf 100644
--- a/app/Http/Controllers/Web/Auth/AuthController.php
+++ b/app/Http/Controllers/Web/Auth/AuthController.php
@@ -56,6 +56,7 @@ class AuthController extends Controller
      *
      * @param LoginRequest $request
      * @return \Illuminate\Http\RedirectResponse|\Illuminate\Http\Response|AuthController
+     * @throws \Illuminate\Contracts\Container\BindingResolutionException
      */
     public function postLogin(LoginRequest $request)
     {
@@ -210,14 +211,14 @@ class AuthController extends Controller
     /**
      * Increment the login attempts for the user.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @return int
+     * @param \Illuminate\Http\Request $request
+     * @return void
      */
     protected function incrementLoginAttempts(Request $request)
     {
         app(RateLimiter::class)->hit(
             $request->input($this->loginUsername()).$request->ip(),
-            $this->lockoutTime() / 60
+            $this->lockoutTime()
         );
     }
 
diff --git a/app/Http/Controllers/Web/PermissionsController.php b/app/Http/Controllers/Web/PermissionsController.php
index 50bc37c..45fd6dc 100644
--- a/app/Http/Controllers/Web/PermissionsController.php
+++ b/app/Http/Controllers/Web/PermissionsController.php
@@ -2,6 +2,7 @@
 
 namespace Vanguard\Http\Controllers\Web;
 
+use Illuminate\Support\Arr;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Vanguard\Events\Role\PermissionsUpdated;
 use Vanguard\Http\Controllers\Controller;
@@ -139,7 +140,7 @@ class PermissionsController extends Controller
         $allRoles = $this->roles->lists('id');
 
         foreach ($allRoles as $roleId) {
-            $permissions = array_get($roles, $roleId, []);
+            $permissions = Arr::get($roles, $roleId, []);
             $this->roles->updatePermissions($roleId, $permissions);
         }
 
diff --git a/app/Http/Controllers/Web/ProfileController.php b/app/Http/Controllers/Web/ProfileController.php
index 393a6b2..b319eaa 100644
--- a/app/Http/Controllers/Web/ProfileController.php
+++ b/app/Http/Controllers/Web/ProfileController.php
@@ -12,6 +12,7 @@ use Vanguard\Repositories\Country\CountryRepository;
 use Vanguard\Repositories\Role\RoleRepository;
 use Vanguard\Repositories\Session\SessionRepository;
 use Vanguard\Repositories\User\UserRepository;
+use Vanguard\Role;
 use Vanguard\Services\Upload\UserAvatarManager;
 use Vanguard\Support\Enum\UserStatus;
 use Vanguard\User;
@@ -60,17 +61,18 @@ class ProfileController extends Controller
      */
     public function index(RoleRepository $rolesRepo, CountryRepository $countryRepository)
     {
-        $user = $this->theUser;
-        $edit = true;
-        $roles = $rolesRepo->lists();
-        $countries = [0 => 'Select a Country'] + $countryRepository->lists()->toArray();
-        $socialLogins = $this->users->getUserSocialLogins($this->theUser->id);
-        $statuses = UserStatus::lists();
-
-        return view(
-            'user/profile',
-            compact('user', 'edit', 'roles', 'countries', 'socialLogins', 'statuses')
-        );
+        $roles = $rolesRepo->all()->filter(function ($role) {
+            return $role->id == $this->theUser->role_id;
+        })->pluck('name', 'id');
+
+        return view('user/profile', [
+            'user' => $this->theUser,
+            'edit' => true,
+            'roles' => $roles,
+            'countries' => [0 => 'Select a Country'] + $countryRepository->lists()->toArray(),
+            'socialLogins' => $this->users->getUserSocialLogins($this->theUser->id),
+            'statuses' => UserStatus::lists()
+        ]);
     }
 
     /**
diff --git a/app/Http/Controllers/Web/UsersController.php b/app/Http/Controllers/Web/UsersController.php
index 1aab6a7..d67943b 100644
--- a/app/Http/Controllers/Web/UsersController.php
+++ b/app/Http/Controllers/Web/UsersController.php
@@ -2,6 +2,7 @@
 
 namespace Vanguard\Http\Controllers\Web;
 
+use Illuminate\Support\Arr;
 use Vanguard\Events\User\Banned;
 use Vanguard\Events\User\Deleted;
 use Vanguard\Events\User\UpdatedByAdmin;
@@ -116,7 +117,7 @@ class UsersController extends Controller
         // status to Active by default.
         $data = $request->all() + ['status' => UserStatus::ACTIVE];
 
-        if (! array_get($data, 'country_id')) {
+        if (! Arr::get($data, 'country_id')) {
             $data['country_id'] = null;
         }
 
@@ -165,7 +166,7 @@ class UsersController extends Controller
     {
         $data = $request->all();
 
-        if (! array_get($data, 'country_id')) {
+        if (! Arr::get($data, 'country_id')) {
             $data['country_id'] = null;
         }
 
diff --git a/app/Http/Requests/Auth/LoginRequest.php b/app/Http/Requests/Auth/LoginRequest.php
index f4279d6..360814e 100644
--- a/app/Http/Requests/Auth/LoginRequest.php
+++ b/app/Http/Requests/Auth/LoginRequest.php
@@ -24,6 +24,7 @@ class LoginRequest extends Request
      * Get the needed authorization credentials from the request.
      *
      * @return array
+     * @throws \Illuminate\Contracts\Container\BindingResolutionException
      */
     public function getCredentials()
     {
@@ -48,6 +49,7 @@ class LoginRequest extends Request
      *
      * @param $param
      * @return bool
+     * @throws \Illuminate\Contracts\Container\BindingResolutionException
      */
     private function isEmail($param)
     {
diff --git a/app/Http/Requests/Auth/PasswordResetRequest.php b/app/Http/Requests/Auth/PasswordResetRequest.php
index 7a11b16..5798284 100644
--- a/app/Http/Requests/Auth/PasswordResetRequest.php
+++ b/app/Http/Requests/Auth/PasswordResetRequest.php
@@ -16,7 +16,7 @@ class PasswordResetRequest extends Request
         return [
             'token' => 'required',
             'email' => 'required|email',
-            'password' => 'required|confirmed|min:6'
+            'password' => 'required|confirmed|min:8'
         ];
     }
 }
diff --git a/app/Http/Requests/Auth/RegisterRequest.php b/app/Http/Requests/Auth/RegisterRequest.php
index 731d8e5..135e427 100644
--- a/app/Http/Requests/Auth/RegisterRequest.php
+++ b/app/Http/Requests/Auth/RegisterRequest.php
@@ -16,7 +16,7 @@ class RegisterRequest extends Request
         $rules = [
             'email' => 'required|email|unique:users,email',
             'username' => 'required|unique:users,username',
-            'password' => 'required|confirmed|min:6',
+            'password' => 'required|confirmed|min:8',
         ];
 
         if (settings('registration.captcha.enabled')) {
diff --git a/app/Http/Requests/BinaryFileUploadRequest.php b/app/Http/Requests/BinaryFileUploadRequest.php
index 86ee243..6c4ad91 100644
--- a/app/Http/Requests/BinaryFileUploadRequest.php
+++ b/app/Http/Requests/BinaryFileUploadRequest.php
@@ -5,6 +5,7 @@ namespace Vanguard\Http\Requests;
 use Illuminate\Contracts\Filesystem\Filesystem;
 use Illuminate\Http\UploadedFile;
 use Illuminate\Contracts\Validation\Validator;
+use Illuminate\Support\Str;
 
 abstract class BinaryFileUploadRequest extends Request
 {
@@ -47,9 +48,7 @@ abstract class BinaryFileUploadRequest extends Request
      */
     protected function getUploadedFile()
     {
-        $this->fileName = str_random(20);
-
-
+        $this->fileName = Str::random(20);
 
         $this->fs->put($this->fileName, $this->getContent());
 
diff --git a/app/Http/Requests/User/UpdateLoginDetailsRequest.php b/app/Http/Requests/User/UpdateLoginDetailsRequest.php
index 9eb4996..f46f149 100644
--- a/app/Http/Requests/User/UpdateLoginDetailsRequest.php
+++ b/app/Http/Requests/User/UpdateLoginDetailsRequest.php
@@ -19,7 +19,7 @@ class UpdateLoginDetailsRequest extends Request
         return [
             'email' => 'required|email|unique:users,email,' . $user->id,
             'username' => 'nullable|unique:users,username,' . $user->id,
-            'password' => 'nullable|min:6|confirmed'
+            'password' => 'nullable|min:8|confirmed'
         ];
     }
 
diff --git a/app/Listeners/Registration/SendConfirmationEmail.php b/app/Listeners/Registration/SendConfirmationEmail.php
index b1674f3..cdcbe45 100644
--- a/app/Listeners/Registration/SendConfirmationEmail.php
+++ b/app/Listeners/Registration/SendConfirmationEmail.php
@@ -2,6 +2,7 @@
 
 namespace Vanguard\Listeners\Registration;
 
+use Illuminate\Support\Str;
 use Vanguard\Events\User\Registered;
 use Vanguard\Notifications\EmailConfirmation;
 use Vanguard\Repositories\User\UserRepository;
@@ -32,7 +33,7 @@ class SendConfirmationEmail
 
         $user = $event->getRegisteredUser();
 
-        $token = str_random(60);
+        $token = Str::random(60);
         $this->users->update($user->id, [
             'confirmation_token' => $token
         ]);
diff --git a/app/Providers/HtmlServiceProvider.php b/app/Providers/HtmlServiceProvider.php
index 387f098..39544d6 100644
--- a/app/Providers/HtmlServiceProvider.php
+++ b/app/Providers/HtmlServiceProvider.php
@@ -10,8 +10,7 @@ class HtmlServiceProvider extends BaseHtmlServiceProvider
 {
     protected function registerHtmlBuilder()
     {
-        $this->app->singleton('html', function($app) {
-
+        $this->app->singleton('html', function ($app) {
             if (env('FORCE_SSL')) {
                 $app['url']->forceScheme('https');
             }
@@ -22,8 +21,7 @@ class HtmlServiceProvider extends BaseHtmlServiceProvider
 
     protected function registerFormBuilder()
     {
-        $this->app->singleton('form', function($app) {
-
+        $this->app->singleton('form', function ($app) {
             if (env('FORCE_SSL')) {
                 $app['url']->forceScheme('https');
             }
@@ -33,4 +31,4 @@ class HtmlServiceProvider extends BaseHtmlServiceProvider
             return $form->setSessionStore($app['session.store']);
         });
     }
-}
\ No newline at end of file
+}
diff --git a/app/Repositories/Role/EloquentRole.php b/app/Repositories/Role/EloquentRole.php
index 88b15d7..ac9da82 100644
--- a/app/Repositories/Role/EloquentRole.php
+++ b/app/Repositories/Role/EloquentRole.php
@@ -6,8 +6,6 @@ use Vanguard\Events\Role\Created;
 use Vanguard\Events\Role\Deleted;
 use Vanguard\Events\Role\Updated;
 use Vanguard\Role;
-use Vanguard\Support\Authorization\CacheFlusherTrait;
-use DB;
 
 class EloquentRole implements RoleRepository
 {
diff --git a/app/Services/Auth/Api/TokenFactory.php b/app/Services/Auth/Api/TokenFactory.php
index 2306323..35b2122 100644
--- a/app/Services/Auth/Api/TokenFactory.php
+++ b/app/Services/Auth/Api/TokenFactory.php
@@ -4,6 +4,7 @@ namespace Vanguard\Services\Auth\Api;
 
 use Carbon\Carbon;
 use Illuminate\Http\Request;
+use Illuminate\Support\Str;
 use Vanguard\User;
 use Illuminate\Contracts\Config\Repository as ConfigContract;
 
@@ -40,7 +41,7 @@ class TokenFactory
         $ttl = $this->config->get('jwt.ttl');
 
         $token = (new Token)->forceFill([
-            'id' => str_random(40),
+            'id' => Str::random(40),
             'user_id' => $user->id,
             'ip_address' => $this->request->ip(),
             'user_agent' => $this->getUserAgent(),
diff --git a/app/Services/Auth/Social/SocialManager.php b/app/Services/Auth/Social/SocialManager.php
index e5c88b2..bf3d80c 100644
--- a/app/Services/Auth/Social/SocialManager.php
+++ b/app/Services/Auth/Social/SocialManager.php
@@ -2,6 +2,7 @@
 
 namespace Vanguard\Services\Auth\Social;
 
+use Illuminate\Support\Str;
 use Laravel\Socialite\Contracts\User as SocialUser;
 use Vanguard\Repositories\Role\RoleRepository;
 use Vanguard\Repositories\User\UserRepository;
@@ -53,7 +54,7 @@ class SocialManager
 
             $user = $this->users->create([
                 'email' => $socialUser->getEmail(),
-                'password' => str_random(10),
+                'password' => Str::random(10),
                 'first_name' => $firstName,
                 'last_name' => $lastName,
                 'status' => UserStatus::ACTIVE,
diff --git a/app/Services/Upload/UserAvatarManager.php b/app/Services/Upload/UserAvatarManager.php
index 7bc2c23..f5eda59 100644
--- a/app/Services/Upload/UserAvatarManager.php
+++ b/app/Services/Upload/UserAvatarManager.php
@@ -3,6 +3,7 @@
 namespace Vanguard\Services\Upload;
 
 use Illuminate\Http\UploadedFile;
+use Illuminate\Support\Str;
 use Vanguard\User;
 use Illuminate\Filesystem\Filesystem;
 use Intervention\Image\ImageManager;
@@ -68,7 +69,7 @@ class UserAvatarManager
      */
     private function userHasUploadedAvatar(User $user)
     {
-        return $user->avatar && ! str_contains($user->avatar, ['http', 'gravatar']);
+        return $user->avatar && ! Str::contains($user->avatar, ['http', 'gravatar']);
     }
 
     /**
@@ -124,7 +125,7 @@ class UserAvatarManager
      */
     private function generateAvatarName()
     {
-        return sprintf("%s.png", str_random());
+        return sprintf("%s.png", Str::random());
     }
 
     /**
diff --git a/app/Support/Authorization/AuthorizationRoleTrait.php b/app/Support/Authorization/AuthorizationRoleTrait.php
index 2a21c91..7777f41 100644
--- a/app/Support/Authorization/AuthorizationRoleTrait.php
+++ b/app/Support/Authorization/AuthorizationRoleTrait.php
@@ -32,6 +32,7 @@ trait AuthorizationRoleTrait
     /**
      * Override "delete" role method to clear role cache.
      * @param array $options
+     * @throws \Exception
      */
     public function delete(array $options = [])
     {
@@ -177,7 +178,7 @@ trait AuthorizationRoleTrait
      */
     private function getCacheKey()
     {
-        return 'entrust_permissions_for_role_'.$this->{$this->primaryKey};
+        return 'permissions_for_role_'.$this->{$this->primaryKey};
     }
 
     /**
diff --git a/composer.json b/composer.json
index 6fd2d63..5ca0a25 100644
--- a/composer.json
+++ b/composer.json
@@ -18,23 +18,23 @@
         "jenssegers/agent": "^2.5",
         "lab404/laravel-impersonate": "^1.2",
         "laracasts/presenter": "^0.2.1",
-        "laravel/framework": "5.7.*",
-        "laravel/socialite": "^3.0",
+        "laravel/framework": "5.8.*",
+        "laravel/socialite": "^4.0",
         "laravelcollective/html": "^5.1",
         "league/fractal": "^0.16.0",
-        "proengsoft/laravel-jsvalidation": "2.3.*",
-        "tymon/jwt-auth": "1.0.0-rc.3",
+        "proengsoft/laravel-jsvalidation": "2.4.*",
+        "tymon/jwt-auth": "1.0.0-rc.4.1",
         "webpatser/laravel-countries": "dev-master"
     },
     "require-dev": {
         "symfony/css-selector": "~4.0",
         "symfony/dom-crawler": "~4.0",
         "fzaninotto/faker": "~1.4",
-        "mockery/mockery": "0.9.*",
+        "mockery/mockery": "^1.0",
         "phpunit/phpunit": "~7.0",
-        "barryvdh/laravel-ide-helper": "2.5.*",
+        "barryvdh/laravel-ide-helper": "2.6.*",
         "barryvdh/laravel-debugbar": "3.2.*",
-        "laravel/browser-kit-testing": "^4.0",
+        "laravel/browser-kit-testing": "^5.0",
         "filp/whoops": "~2.0"
     },
     "autoload": {
diff --git a/composer.lock b/composer.lock
index d18c8a9..99c5acf 100644
--- a/composer.lock
+++ b/composer.lock
@@ -1,28 +1,28 @@
 {
     "_readme": [
         "This file locks the dependencies of your project to a known state",
-        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file",
+        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
         "This file is @generated automatically"
     ],
-    "content-hash": "1eb1f86ea2d8984dde7c330efac94100",
+    "content-hash": "7f7ee39ea7ddd66a1b8d1bb2b4fb8183",
     "packages": [
         {
             "name": "anhskohbo/no-captcha",
-            "version": "3.0.3",
+            "version": "3.0.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/anhskohbo/no-captcha.git",
-                "reference": "164715a2de0fded5979e7a9b7721785d72a4a7d3"
+                "reference": "fd08c84bd0e05f4a048a9bba800ab64ada9fadfc"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/anhskohbo/no-captcha/zipball/164715a2de0fded5979e7a9b7721785d72a4a7d3",
-                "reference": "164715a2de0fded5979e7a9b7721785d72a4a7d3",
+                "url": "https://api.github.com/repos/anhskohbo/no-captcha/zipball/fd08c84bd0e05f4a048a9bba800ab64ada9fadfc",
+                "reference": "fd08c84bd0e05f4a048a9bba800ab64ada9fadfc",
                 "shasum": ""
             },
             "require": {
                 "guzzlehttp/guzzle": "^6.2",
-                "illuminate/support": "5.0.*|5.1.*|5.2.*|5.3.*|5.4.*|5.5.*|5.6.*|5.7.*",
+                "illuminate/support": "5.0.*|5.1.*|5.2.*|5.3.*|5.4.*|5.5.*|5.6.*|5.7.*|5.8.*",
                 "php": ">=5.5.5"
             },
             "require-dev": {
@@ -63,7 +63,7 @@
                 "no-captcha",
                 "recaptcha"
             ],
-            "time": "2018-08-27T02:16:31+00:00"
+            "time": "2019-02-25T10:51:21+00:00"
         },
         {
             "name": "anlutro/l4-settings",
@@ -283,16 +283,16 @@
         },
         {
             "name": "egulias/email-validator",
-            "version": "2.1.6",
+            "version": "2.1.7",
             "source": {
                 "type": "git",
                 "url": "https://github.com/egulias/EmailValidator.git",
-                "reference": "0578b32b30b22de3e8664f797cf846fc9246f786"
+                "reference": "709f21f92707308cdf8f9bcfa1af4cb26586521e"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/egulias/EmailValidator/zipball/0578b32b30b22de3e8664f797cf846fc9246f786",
-                "reference": "0578b32b30b22de3e8664f797cf846fc9246f786",
+                "url": "https://api.github.com/repos/egulias/EmailValidator/zipball/709f21f92707308cdf8f9bcfa1af4cb26586521e",
+                "reference": "709f21f92707308cdf8f9bcfa1af4cb26586521e",
                 "shasum": ""
             },
             "require": {
@@ -336,20 +336,20 @@
                 "validation",
                 "validator"
             ],
-            "time": "2018-09-25T20:47:26+00:00"
+            "time": "2018-12-04T22:38:24+00:00"
         },
         {
             "name": "erusev/parsedown",
-            "version": "1.7.1",
+            "version": "v1.7.2",
             "source": {
                 "type": "git",
                 "url": "https://github.com/erusev/parsedown.git",
-                "reference": "92e9c27ba0e74b8b028b111d1b6f956a15c01fc1"
+                "reference": "d60bcdc46978357759ecb13cb4b078da783f8faf"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/erusev/parsedown/zipball/92e9c27ba0e74b8b028b111d1b6f956a15c01fc1",
-                "reference": "92e9c27ba0e74b8b028b111d1b6f956a15c01fc1",
+                "url": "https://api.github.com/repos/erusev/parsedown/zipball/d60bcdc46978357759ecb13cb4b078da783f8faf",
+                "reference": "d60bcdc46978357759ecb13cb4b078da783f8faf",
                 "shasum": ""
             },
             "require": {
@@ -382,20 +382,20 @@
                 "markdown",
                 "parser"
             ],
-            "time": "2018-03-08T01:11:30+00:00"
+            "time": "2019-03-17T17:19:46+00:00"
         },
         {
             "name": "fideloper/proxy",
-            "version": "4.0.0",
+            "version": "4.1.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/fideloper/TrustedProxy.git",
-                "reference": "cf8a0ca4b85659b9557e206c90110a6a4dba980a"
+                "reference": "177c79a2d1f9970f89ee2fb4c12b429af38b6dfb"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/fideloper/TrustedProxy/zipball/cf8a0ca4b85659b9557e206c90110a6a4dba980a",
-                "reference": "cf8a0ca4b85659b9557e206c90110a6a4dba980a",
+                "url": "https://api.github.com/repos/fideloper/TrustedProxy/zipball/177c79a2d1f9970f89ee2fb4c12b429af38b6dfb",
+                "reference": "177c79a2d1f9970f89ee2fb4c12b429af38b6dfb",
                 "shasum": ""
             },
             "require": {
@@ -436,7 +436,7 @@
                 "proxy",
                 "trusted proxy"
             ],
-            "time": "2018-02-07T20:20:57+00:00"
+            "time": "2019-01-10T14:06:47+00:00"
         },
         {
             "name": "guzzlehttp/guzzle",
@@ -556,32 +556,33 @@
         },
         {
             "name": "guzzlehttp/psr7",
-            "version": "1.4.2",
+            "version": "1.5.2",
             "source": {
                 "type": "git",
                 "url": "https://github.com/guzzle/psr7.git",
-                "reference": "f5b8a8512e2b58b0071a7280e39f14f72e05d87c"
+                "reference": "9f83dded91781a01c63574e387eaa769be769115"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/guzzle/psr7/zipball/f5b8a8512e2b58b0071a7280e39f14f72e05d87c",
-                "reference": "f5b8a8512e2b58b0071a7280e39f14f72e05d87c",
+                "url": "https://api.github.com/repos/guzzle/psr7/zipball/9f83dded91781a01c63574e387eaa769be769115",
+                "reference": "9f83dded91781a01c63574e387eaa769be769115",
                 "shasum": ""
             },
             "require": {
                 "php": ">=5.4.0",
-                "psr/http-message": "~1.0"
+                "psr/http-message": "~1.0",
+                "ralouphie/getallheaders": "^2.0.5"
             },
             "provide": {
                 "psr/http-message-implementation": "1.0"
             },
             "require-dev": {
-                "phpunit/phpunit": "~4.0"
+                "phpunit/phpunit": "~4.8.36 || ^5.7.27 || ^6.5.8"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "1.4-dev"
+                    "dev-master": "1.5-dev"
                 }
             },
             "autoload": {
@@ -611,13 +612,14 @@
             "keywords": [
                 "http",
                 "message",
+                "psr-7",
                 "request",
                 "response",
                 "stream",
                 "uri",
                 "url"
             ],
-            "time": "2017-03-20T17:10:46+00:00"
+            "time": "2018-12-04T20:46:45+00:00"
         },
         {
             "name": "intervention/image",
@@ -691,16 +693,16 @@
         },
         {
             "name": "jaybizzle/crawler-detect",
-            "version": "v1.2.72",
+            "version": "v1.2.79",
             "source": {
                 "type": "git",
                 "url": "https://github.com/JayBizzle/Crawler-Detect.git",
-                "reference": "92805a35b1fc0fbce7fe390df96891ba10e4a12e"
+                "reference": "e6ce66e9c892c42898cf84a35ecbfec5b4ab481c"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/JayBizzle/Crawler-Detect/zipball/92805a35b1fc0fbce7fe390df96891ba10e4a12e",
-                "reference": "92805a35b1fc0fbce7fe390df96891ba10e4a12e",
+                "url": "https://api.github.com/repos/JayBizzle/Crawler-Detect/zipball/e6ce66e9c892c42898cf84a35ecbfec5b4ab481c",
+                "reference": "e6ce66e9c892c42898cf84a35ecbfec5b4ab481c",
                 "shasum": ""
             },
             "require": {
@@ -736,30 +738,33 @@
                 "crawlerdetect",
                 "php crawler detect"
             ],
-            "time": "2018-10-23T19:00:40+00:00"
+            "time": "2019-03-04T19:10:41+00:00"
         },
         {
             "name": "jenssegers/agent",
-            "version": "v2.6.0",
+            "version": "v2.6.3",
             "source": {
                 "type": "git",
                 "url": "https://github.com/jenssegers/agent.git",
-                "reference": "df71082ed2a95fc8a82ba30832ccf72df939f02a"
+                "reference": "bcb895395e460478e101f41cdab139c48dc721ce"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/jenssegers/agent/zipball/df71082ed2a95fc8a82ba30832ccf72df939f02a",
-                "reference": "df71082ed2a95fc8a82ba30832ccf72df939f02a",
+                "url": "https://api.github.com/repos/jenssegers/agent/zipball/bcb895395e460478e101f41cdab139c48dc721ce",
+                "reference": "bcb895395e460478e101f41cdab139c48dc721ce",
                 "shasum": ""
             },
             "require": {
                 "jaybizzle/crawler-detect": "^1.2",
                 "mobiledetect/mobiledetectlib": "^2.7.6",
-                "php": ">=5.4.0"
+                "php": ">=5.6"
             },
             "require-dev": {
-                "phpunit/phpunit": "^4.0|^5.0|^6.0",
-                "satooshi/php-coveralls": "^1.0"
+                "php-coveralls/php-coveralls": "^2.1",
+                "phpunit/phpunit": "^5.0|^6.0|^7.0"
+            },
+            "suggest": {
+                "illuminate/support": "^4.0|^5.0"
             },
             "type": "library",
             "extra": {
@@ -802,30 +807,30 @@
                 "user agent",
                 "useragent"
             ],
-            "time": "2017-11-10T10:35:35+00:00"
+            "time": "2019-01-19T21:32:55+00:00"
         },
         {
             "name": "lab404/laravel-impersonate",
-            "version": "1.2.3",
+            "version": "1.3.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/404labfr/laravel-impersonate.git",
-                "reference": "16b7204f9efde1275897a9d58931f9e6d1be36f5"
+                "reference": "05fc39ff90430aaec35553c12d94121356a6af7a"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/404labfr/laravel-impersonate/zipball/16b7204f9efde1275897a9d58931f9e6d1be36f5",
-                "reference": "16b7204f9efde1275897a9d58931f9e6d1be36f5",
+                "url": "https://api.github.com/repos/404labfr/laravel-impersonate/zipball/05fc39ff90430aaec35553c12d94121356a6af7a",
+                "reference": "05fc39ff90430aaec35553c12d94121356a6af7a",
                 "shasum": ""
             },
             "require": {
-                "laravel/framework": ">=5.5",
-                "php": ">=7.0"
+                "laravel/framework": ">=5.8",
+                "php": "^7.1.3"
             },
             "require-dev": {
-                "orchestra/database": "~3.4.0",
-                "orchestra/testbench": "~3.4.0",
-                "phpunit/phpunit": "^5.7"
+                "orchestra/database": "~3.8.0",
+                "orchestra/testbench": "~3.8.0",
+                "phpunit/phpunit": "^7.5 || ^8.0"
             },
             "type": "library",
             "extra": {
@@ -862,7 +867,7 @@
                 "plugin",
                 "user"
             ],
-            "time": "2018-09-03T13:05:19+00:00"
+            "time": "2019-02-28T22:01:20+00:00"
         },
         {
             "name": "laracasts/presenter",
@@ -912,43 +917,45 @@
         },
         {
             "name": "laravel/framework",
-            "version": "v5.7.11",
+            "version": "v5.8.8",
             "source": {
                 "type": "git",
                 "url": "https://github.com/laravel/framework.git",
-                "reference": "52ee19c53c4fcd7fea8a83aacae5b8bc212ae19b"
+                "reference": "3f0a5744a866ae3ae0ca84f47080501714af01ba"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/laravel/framework/zipball/52ee19c53c4fcd7fea8a83aacae5b8bc212ae19b",
-                "reference": "52ee19c53c4fcd7fea8a83aacae5b8bc212ae19b",
+                "url": "https://api.github.com/repos/laravel/framework/zipball/3f0a5744a866ae3ae0ca84f47080501714af01ba",
+                "reference": "3f0a5744a866ae3ae0ca84f47080501714af01ba",
                 "shasum": ""
             },
             "require": {
                 "doctrine/inflector": "^1.1",
                 "dragonmantank/cron-expression": "^2.0",
+                "egulias/email-validator": "^2.0",
                 "erusev/parsedown": "^1.7",
+                "ext-json": "*",
                 "ext-mbstring": "*",
                 "ext-openssl": "*",
                 "league/flysystem": "^1.0.8",
                 "monolog/monolog": "^1.12",
-                "nesbot/carbon": "^1.26.3",
+                "nesbot/carbon": "^1.26.3 || ^2.0",
                 "opis/closure": "^3.1",
                 "php": "^7.1.3",
                 "psr/container": "^1.0",
                 "psr/simple-cache": "^1.0",
                 "ramsey/uuid": "^3.7",
                 "swiftmailer/swiftmailer": "^6.0",
-                "symfony/console": "^4.1",
-                "symfony/debug": "^4.1",
-                "symfony/finder": "^4.1",
-                "symfony/http-foundation": "^4.1",
-                "symfony/http-kernel": "^4.1",
-                "symfony/process": "^4.1",
-                "symfony/routing": "^4.1",
-                "symfony/var-dumper": "^4.1",
+                "symfony/console": "^4.2",
+                "symfony/debug": "^4.2",
+                "symfony/finder": "^4.2",
+                "symfony/http-foundation": "^4.2",
+                "symfony/http-kernel": "^4.2",
+                "symfony/process": "^4.2",
+                "symfony/routing": "^4.2",
+                "symfony/var-dumper": "^4.2",
                 "tijsverkoyen/css-to-inline-styles": "^2.2.1",
-                "vlucas/phpdotenv": "^2.2"
+                "vlucas/phpdotenv": "^3.3"
             },
             "conflict": {
                 "tightenco/collect": "<5.5.33"
@@ -987,15 +994,16 @@
                 "aws/aws-sdk-php": "^3.0",
                 "doctrine/dbal": "^2.6",
                 "filp/whoops": "^2.1.4",
+                "guzzlehttp/guzzle": "^6.3",
                 "league/flysystem-cached-adapter": "^1.0",
                 "mockery/mockery": "^1.0",
                 "moontoast/math": "^1.1",
-                "orchestra/testbench-core": "3.7.*",
-                "pda/pheanstalk": "^3.0",
-                "phpunit/phpunit": "^7.0",
+                "orchestra/testbench-core": "3.8.*",
+                "pda/pheanstalk": "^4.0",
+                "phpunit/phpunit": "^7.5|^8.0",
                 "predis/predis": "^1.1.1",
-                "symfony/css-selector": "^4.1",
-                "symfony/dom-crawler": "^4.1",
+                "symfony/css-selector": "^4.2",
+                "symfony/dom-crawler": "^4.2",
                 "true/punycode": "^2.1"
             },
             "suggest": {
@@ -1013,17 +1021,18 @@
                 "league/flysystem-sftp": "Required to use the Flysystem SFTP driver (^1.0).",
                 "moontoast/math": "Required to use ordered UUIDs (^1.1).",
                 "nexmo/client": "Required to use the Nexmo transport (^1.0).",
-                "pda/pheanstalk": "Required to use the beanstalk queue driver (^3.0).",
+                "pda/pheanstalk": "Required to use the beanstalk queue driver (^4.0).",
                 "predis/predis": "Required to use the redis cache and queue drivers (^1.0).",
                 "pusher/pusher-php-server": "Required to use the Pusher broadcast driver (^3.0).",
-                "symfony/css-selector": "Required to use some of the crawler integration testing tools (^4.1).",
-                "symfony/dom-crawler": "Required to use most of the crawler integration testing tools (^4.1).",
-                "symfony/psr-http-message-bridge": "Required to psr7 bridging features (^1.0)."
+                "symfony/css-selector": "Required to use some of the crawler integration testing tools (^4.2).",
+                "symfony/dom-crawler": "Required to use most of the crawler integration testing tools (^4.2).",
+                "symfony/psr-http-message-bridge": "Required to use PSR-7 bridging features (^1.1).",
+                "wildbit/swiftmailer-postmark": "Required to use Postmark mail driver (^3.0)."
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "5.7-dev"
+                    "dev-master": "5.8-dev"
                 }
             },
             "autoload": {
@@ -1051,38 +1060,39 @@
                 "framework",
                 "laravel"
             ],
-            "time": "2018-10-24T12:50:20+00:00"
+            "time": "2019-03-26T17:19:10+00:00"
         },
         {
             "name": "laravel/socialite",
-            "version": "v3.2.0",
+            "version": "v4.1.2",
             "source": {
                 "type": "git",
                 "url": "https://github.com/laravel/socialite.git",
-                "reference": "7194c0cd9fb2ce449669252b8ec316b85b7de481"
+                "reference": "0bb624e7e52c1858240c783a5418b8dcc5a7c2d1"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/laravel/socialite/zipball/7194c0cd9fb2ce449669252b8ec316b85b7de481",
-                "reference": "7194c0cd9fb2ce449669252b8ec316b85b7de481",
+                "url": "https://api.github.com/repos/laravel/socialite/zipball/0bb624e7e52c1858240c783a5418b8dcc5a7c2d1",
+                "reference": "0bb624e7e52c1858240c783a5418b8dcc5a7c2d1",
                 "shasum": ""
             },
             "require": {
+                "ext-json": "*",
                 "guzzlehttp/guzzle": "~6.0",
-                "illuminate/contracts": "~5.4",
-                "illuminate/http": "~5.4",
-                "illuminate/support": "~5.4",
+                "illuminate/contracts": "~5.7.0|~5.8.0",
+                "illuminate/http": "~5.7.0|~5.8.0",
+                "illuminate/support": "~5.7.0|~5.8.0",
                 "league/oauth1-client": "~1.0",
-                "php": ">=5.6.4"
+                "php": "^7.1.3"
             },
             "require-dev": {
-                "mockery/mockery": "~0.9",
-                "phpunit/phpunit": "~4.0|~5.0"
+                "mockery/mockery": "~1.0",
+                "phpunit/phpunit": "~7.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "3.0-dev"
+                    "dev-master": "4.0-dev"
                 },
                 "laravel": {
                     "providers": [
@@ -1114,39 +1124,39 @@
                 "laravel",
                 "oauth"
             ],
-            "time": "2018-10-18T03:39:04+00:00"
+            "time": "2019-03-15T12:39:01+00:00"
         },
         {
             "name": "laravelcollective/html",
-            "version": "v5.7.1",
+            "version": "v5.8.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/LaravelCollective/html.git",
-                "reference": "777b6d390811ba249255ed5750bf17a019cd88a5"
+                "reference": "0e360143d3476fe4141d267a260c140569fa207b"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/LaravelCollective/html/zipball/777b6d390811ba249255ed5750bf17a019cd88a5",
-                "reference": "777b6d390811ba249255ed5750bf17a019cd88a5",
+                "url": "https://api.github.com/repos/LaravelCollective/html/zipball/0e360143d3476fe4141d267a260c140569fa207b",
+                "reference": "0e360143d3476fe4141d267a260c140569fa207b",
                 "shasum": ""
             },
             "require": {
-                "illuminate/http": "5.7.*",
-                "illuminate/routing": "5.7.*",
-                "illuminate/session": "5.7.*",
-                "illuminate/support": "5.7.*",
-                "illuminate/view": "5.7.*",
+                "illuminate/http": "5.8.*",
+                "illuminate/routing": "5.8.*",
+                "illuminate/session": "5.8.*",
+                "illuminate/support": "5.8.*",
+                "illuminate/view": "5.8.*",
                 "php": ">=7.1.3"
             },
             "require-dev": {
-                "illuminate/database": "5.7.*",
+                "illuminate/database": "5.8.*",
                 "mockery/mockery": "~1.0",
                 "phpunit/phpunit": "~7.1"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "5.7-dev"
+                    "dev-master": "5.8-dev"
                 },
                 "laravel": {
                     "providers": [
@@ -1182,20 +1192,20 @@
             ],
             "description": "HTML and Form Builders for the Laravel Framework",
             "homepage": "https://laravelcollective.com",
-            "time": "2018-09-05T18:32:53+00:00"
+            "time": "2019-03-01T22:53:41+00:00"
         },
         {
             "name": "lcobucci/jwt",
-            "version": "3.2.4",
+            "version": "3.2.5",
             "source": {
                 "type": "git",
                 "url": "https://github.com/lcobucci/jwt.git",
-                "reference": "c9704b751315d21735dc98d78d4f37bd73596da7"
+                "reference": "82be04b4753f8b7693b62852b7eab30f97524f9b"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/lcobucci/jwt/zipball/c9704b751315d21735dc98d78d4f37bd73596da7",
-                "reference": "c9704b751315d21735dc98d78d4f37bd73596da7",
+                "url": "https://api.github.com/repos/lcobucci/jwt/zipball/82be04b4753f8b7693b62852b7eab30f97524f9b",
+                "reference": "82be04b4753f8b7693b62852b7eab30f97524f9b",
                 "shasum": ""
             },
             "require": {
@@ -1232,7 +1242,7 @@
                 {
                     "name": "Luís Otávio Cobucci Oblonczyk",
                     "email": "lcobucci@gmail.com",
-                    "role": "developer"
+                    "role": "Developer"
                 }
             ],
             "description": "A simple library to work with JSON Web Token and JSON Web Signature",
@@ -1240,20 +1250,20 @@
                 "JWS",
                 "jwt"
             ],
-            "time": "2018-08-03T11:23:50+00:00"
+            "time": "2018-11-11T12:22:26+00:00"
         },
         {
             "name": "league/flysystem",
-            "version": "1.0.48",
+            "version": "1.0.50",
             "source": {
                 "type": "git",
                 "url": "https://github.com/thephpleague/flysystem.git",
-                "reference": "a6ded5b2f6055e2db97b4b859fdfca2b952b78aa"
+                "reference": "dab4e7624efa543a943be978008f439c333f2249"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/thephpleague/flysystem/zipball/a6ded5b2f6055e2db97b4b859fdfca2b952b78aa",
-                "reference": "a6ded5b2f6055e2db97b4b859fdfca2b952b78aa",
+                "url": "https://api.github.com/repos/thephpleague/flysystem/zipball/dab4e7624efa543a943be978008f439c333f2249",
+                "reference": "dab4e7624efa543a943be978008f439c333f2249",
                 "shasum": ""
             },
             "require": {
@@ -1324,7 +1334,7 @@
                 "sftp",
                 "storage"
             ],
-            "time": "2018-10-15T13:53:10+00:00"
+            "time": "2019-02-01T08:50:36+00:00"
         },
         {
             "name": "league/fractal",
@@ -1507,16 +1517,16 @@
         },
         {
             "name": "monolog/monolog",
-            "version": "1.23.0",
+            "version": "1.24.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/Seldaek/monolog.git",
-                "reference": "fd8c787753b3a2ad11bc60c063cff1358a32a3b4"
+                "reference": "bfc9ebb28f97e7a24c45bdc3f0ff482e47bb0266"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/fd8c787753b3a2ad11bc60c063cff1358a32a3b4",
-                "reference": "fd8c787753b3a2ad11bc60c063cff1358a32a3b4",
+                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/bfc9ebb28f97e7a24c45bdc3f0ff482e47bb0266",
+                "reference": "bfc9ebb28f97e7a24c45bdc3f0ff482e47bb0266",
                 "shasum": ""
             },
             "require": {
@@ -1581,7 +1591,7 @@
                 "logging",
                 "psr-3"
             ],
-            "time": "2017-06-19T01:22:40+00:00"
+            "time": "2018-11-05T09:00:11+00:00"
         },
         {
             "name": "namshi/jose",
@@ -1648,25 +1658,30 @@
         },
         {
             "name": "nesbot/carbon",
-            "version": "1.34.0",
+            "version": "2.16.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/briannesbitt/Carbon.git",
-                "reference": "1dbd3cb01c5645f3e7deda7aa46ef780d95fcc33"
+                "reference": "b509524136d579f6b15ad9af4e5bd4533d1ab6c2"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/briannesbitt/Carbon/zipball/1dbd3cb01c5645f3e7deda7aa46ef780d95fcc33",
-                "reference": "1dbd3cb01c5645f3e7deda7aa46ef780d95fcc33",
+                "url": "https://api.github.com/repos/briannesbitt/Carbon/zipball/b509524136d579f6b15ad9af4e5bd4533d1ab6c2",
+                "reference": "b509524136d579f6b15ad9af4e5bd4533d1ab6c2",
                 "shasum": ""
             },
             "require": {
-                "php": ">=5.3.9",
-                "symfony/translation": "~2.6 || ~3.0 || ~4.0"
+                "ext-json": "*",
+                "php": "^7.1.8 || ^8.0",
+                "symfony/translation": "^3.4 || ^4.0"
             },
             "require-dev": {
-                "friendsofphp/php-cs-fixer": "~2",
-                "phpunit/phpunit": "^4.8.35 || ^5.7"
+                "friendsofphp/php-cs-fixer": "^2.14 || ^3.0",
+                "kylekatarnls/multi-tester": "^0.1",
+                "phpmd/phpmd": "^2.6",
+                "phpstan/phpstan": "^0.10.8",
+                "phpunit/phpunit": "^7.5 || ^8.0",
+                "squizlabs/php_codesniffer": "^3.4"
             },
             "type": "library",
             "extra": {
@@ -1678,7 +1693,7 @@
             },
             "autoload": {
                 "psr-4": {
-                    "": "src/"
+                    "Carbon\\": "src/Carbon/"
                 }
             },
             "notification-url": "https://packagist.org/downloads/",
@@ -1699,20 +1714,20 @@
                 "datetime",
                 "time"
             ],
-            "time": "2018-09-20T19:36:25+00:00"
+            "time": "2019-03-20T12:20:01+00:00"
         },
         {
             "name": "opis/closure",
-            "version": "3.1.1",
+            "version": "3.1.6",
             "source": {
                 "type": "git",
                 "url": "https://github.com/opis/closure.git",
-                "reference": "d3209e46ad6c69a969b705df0738fd0dbe26ef9e"
+                "reference": "ccb8e3928c5c8181c76cdd0ed9366c5bcaafd91b"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/opis/closure/zipball/d3209e46ad6c69a969b705df0738fd0dbe26ef9e",
-                "reference": "d3209e46ad6c69a969b705df0738fd0dbe26ef9e",
+                "url": "https://api.github.com/repos/opis/closure/zipball/ccb8e3928c5c8181c76cdd0ed9366c5bcaafd91b",
+                "reference": "ccb8e3928c5c8181c76cdd0ed9366c5bcaafd91b",
                 "shasum": ""
             },
             "require": {
@@ -1720,12 +1735,12 @@
             },
             "require-dev": {
                 "jeremeamia/superclosure": "^2.0",
-                "phpunit/phpunit": "^4.0"
+                "phpunit/phpunit": "^4.0|^5.0|^6.0|^7.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "3.0.x-dev"
+                    "dev-master": "3.1.x-dev"
                 }
             },
             "autoload": {
@@ -1760,7 +1775,7 @@
                 "serialization",
                 "serialize"
             ],
-            "time": "2018-10-02T13:36:53+00:00"
+            "time": "2019-02-22T10:30:00+00:00"
         },
         {
             "name": "paragonie/random_compat",
@@ -1807,28 +1822,78 @@
             ],
             "time": "2018-07-02T15:55:56+00:00"
         },
+        {
+            "name": "phpoption/phpoption",
+            "version": "1.5.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/schmittjoh/php-option.git",
+                "reference": "94e644f7d2051a5f0fcf77d81605f152eecff0ed"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/schmittjoh/php-option/zipball/94e644f7d2051a5f0fcf77d81605f152eecff0ed",
+                "reference": "94e644f7d2051a5f0fcf77d81605f152eecff0ed",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "4.7.*"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.3-dev"
+                }
+            },
+            "autoload": {
+                "psr-0": {
+                    "PhpOption\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "Apache2"
+            ],
+            "authors": [
+                {
+                    "name": "Johannes M. Schmitt",
+                    "email": "schmittjoh@gmail.com"
+                }
+            ],
+            "description": "Option Type for PHP",
+            "keywords": [
+                "language",
+                "option",
+                "php",
+                "type"
+            ],
+            "time": "2015-07-25T16:39:46+00:00"
+        },
         {
             "name": "proengsoft/laravel-jsvalidation",
-            "version": "2.3.2",
+            "version": "2.4.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/proengsoft/laravel-jsvalidation.git",
-                "reference": "ea2c15825a877d4d37a75db3fdcd4bf50c27b8bb"
+                "reference": "b2dfa9ec5f15b26b9dbdc69c1c6215a0ac4b83a8"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/proengsoft/laravel-jsvalidation/zipball/ea2c15825a877d4d37a75db3fdcd4bf50c27b8bb",
-                "reference": "ea2c15825a877d4d37a75db3fdcd4bf50c27b8bb",
+                "url": "https://api.github.com/repos/proengsoft/laravel-jsvalidation/zipball/b2dfa9ec5f15b26b9dbdc69c1c6215a0ac4b83a8",
+                "reference": "b2dfa9ec5f15b26b9dbdc69c1c6215a0ac4b83a8",
                 "shasum": ""
             },
             "require": {
-                "illuminate/config": "5.4.*|5.5.*|5.6.*|5.7.*",
-                "illuminate/contracts": "5.4.*|5.5.*|5.6.*|5.7.*",
-                "illuminate/http": "5.4.*|5.5.*|5.6.*|5.7.*",
-                "illuminate/support": "5.4.*|5.5.*|5.6.*|5.7.*",
-                "illuminate/translation": "5.4.*|5.5.*|5.6.*|5.7.*",
-                "illuminate/validation": "5.4.*|5.5.*|5.6.*|5.7.*",
-                "illuminate/view": "5.4.*|5.5.*|5.6.*|5.7.*",
+                "illuminate/config": "5.4.*|5.5.*|5.6.*|5.7.*|5.8.*",
+                "illuminate/contracts": "5.4.*|5.5.*|5.6.*|5.7.*|5.8.*",
+                "illuminate/http": "5.4.*|5.5.*|5.6.*|5.7.*|5.8.*",
+                "illuminate/support": "5.4.*|5.5.*|5.6.*|5.7.*|5.8.*",
+                "illuminate/translation": "5.4.*|5.5.*|5.6.*|5.7.*|5.8.*",
+                "illuminate/validation": "5.4.*|5.5.*|5.6.*|5.7.*|5.8.*",
+                "illuminate/view": "5.4.*|5.5.*|5.6.*|5.7.*|5.8.*",
                 "php": ">=5.6.4"
             },
             "require-dev": {
@@ -1879,7 +1944,7 @@
                 "validation",
                 "validator"
             ],
-            "time": "2018-10-06T07:57:07+00:00"
+            "time": "2019-03-12T10:02:04+00:00"
         },
         {
             "name": "psr/container",
@@ -1982,16 +2047,16 @@
         },
         {
             "name": "psr/log",
-            "version": "1.0.2",
+            "version": "1.1.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/php-fig/log.git",
-                "reference": "4ebe3a8bf773a19edfe0a84b6585ba3d401b724d"
+                "reference": "6c001f1daafa3a3ac1d8ff69ee4db8e799a654dd"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/php-fig/log/zipball/4ebe3a8bf773a19edfe0a84b6585ba3d401b724d",
-                "reference": "4ebe3a8bf773a19edfe0a84b6585ba3d401b724d",
+                "url": "https://api.github.com/repos/php-fig/log/zipball/6c001f1daafa3a3ac1d8ff69ee4db8e799a654dd",
+                "reference": "6c001f1daafa3a3ac1d8ff69ee4db8e799a654dd",
                 "shasum": ""
             },
             "require": {
@@ -2025,7 +2090,7 @@
                 "psr",
                 "psr-3"
             ],
-            "time": "2016-10-10T12:19:37+00:00"
+            "time": "2018-11-20T15:27:04+00:00"
         },
         {
             "name": "psr/simple-cache",
@@ -2075,6 +2140,46 @@
             ],
             "time": "2017-10-23T01:57:42+00:00"
         },
+        {
+            "name": "ralouphie/getallheaders",
+            "version": "2.0.5",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/ralouphie/getallheaders.git",
+                "reference": "5601c8a83fbba7ef674a7369456d12f1e0d0eafa"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/ralouphie/getallheaders/zipball/5601c8a83fbba7ef674a7369456d12f1e0d0eafa",
+                "reference": "5601c8a83fbba7ef674a7369456d12f1e0d0eafa",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "~3.7.0",
+                "satooshi/php-coveralls": ">=1.0"
+            },
+            "type": "library",
+            "autoload": {
+                "files": [
+                    "src/getallheaders.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Ralph Khattar",
+                    "email": "ralph.khattar@gmail.com"
+                }
+            ],
+            "description": "A polyfill for getallheaders.",
+            "time": "2016-02-11T07:05:27+00:00"
+        },
         {
             "name": "ramsey/uuid",
             "version": "3.8.0",
@@ -2159,25 +2264,28 @@
         },
         {
             "name": "swiftmailer/swiftmailer",
-            "version": "v6.1.3",
+            "version": "v6.2.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/swiftmailer/swiftmailer.git",
-                "reference": "8ddcb66ac10c392d3beb54829eef8ac1438595f4"
+                "reference": "6fa3232ff9d3f8237c0fae4b7ff05e1baa4cd707"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/swiftmailer/swiftmailer/zipball/8ddcb66ac10c392d3beb54829eef8ac1438595f4",
-                "reference": "8ddcb66ac10c392d3beb54829eef8ac1438595f4",
+                "url": "https://api.github.com/repos/swiftmailer/swiftmailer/zipball/6fa3232ff9d3f8237c0fae4b7ff05e1baa4cd707",
+                "reference": "6fa3232ff9d3f8237c0fae4b7ff05e1baa4cd707",
                 "shasum": ""
             },
             "require": {
                 "egulias/email-validator": "~2.0",
-                "php": ">=7.0.0"
+                "php": ">=7.0.0",
+                "symfony/polyfill-iconv": "^1.0",
+                "symfony/polyfill-intl-idn": "^1.10",
+                "symfony/polyfill-mbstring": "^1.0"
             },
             "require-dev": {
                 "mockery/mockery": "~0.9.1",
-                "symfony/phpunit-bridge": "~3.3@dev"
+                "symfony/phpunit-bridge": "^3.4.19|^4.1.8"
             },
             "suggest": {
                 "ext-intl": "Needed to support internationalized email addresses",
@@ -2186,7 +2294,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "6.1-dev"
+                    "dev-master": "6.2-dev"
                 }
             },
             "autoload": {
@@ -2214,30 +2322,34 @@
                 "mail",
                 "mailer"
             ],
-            "time": "2018-09-11T07:12:52+00:00"
+            "time": "2019-03-10T07:52:41+00:00"
         },
         {
             "name": "symfony/console",
-            "version": "v4.1.6",
+            "version": "v4.2.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/console.git",
-                "reference": "dc7122fe5f6113cfaba3b3de575d31112c9aa60b"
+                "reference": "9dc2299a016497f9ee620be94524e6c0af0280a9"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/console/zipball/dc7122fe5f6113cfaba3b3de575d31112c9aa60b",
-                "reference": "dc7122fe5f6113cfaba3b3de575d31112c9aa60b",
+                "url": "https://api.github.com/repos/symfony/console/zipball/9dc2299a016497f9ee620be94524e6c0af0280a9",
+                "reference": "9dc2299a016497f9ee620be94524e6c0af0280a9",
                 "shasum": ""
             },
             "require": {
                 "php": "^7.1.3",
+                "symfony/contracts": "^1.0",
                 "symfony/polyfill-mbstring": "~1.0"
             },
             "conflict": {
                 "symfony/dependency-injection": "<3.4",
                 "symfony/process": "<3.3"
             },
+            "provide": {
+                "psr/log-implementation": "1.0"
+            },
             "require-dev": {
                 "psr/log": "~1.0",
                 "symfony/config": "~3.4|~4.0",
@@ -2247,7 +2359,7 @@
                 "symfony/process": "~3.4|~4.0"
             },
             "suggest": {
-                "psr/log-implementation": "For using the console logger",
+                "psr/log": "For using the console logger",
                 "symfony/event-dispatcher": "",
                 "symfony/lock": "",
                 "symfony/process": ""
@@ -2255,7 +2367,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.1-dev"
+                    "dev-master": "4.2-dev"
                 }
             },
             "autoload": {
@@ -2282,20 +2394,88 @@
             ],
             "description": "Symfony Console Component",
             "homepage": "https://symfony.com",
-            "time": "2018-10-03T08:15:46+00:00"
+            "time": "2019-02-23T15:17:42+00:00"
+        },
+        {
+            "name": "symfony/contracts",
+            "version": "v1.0.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/contracts.git",
+                "reference": "1aa7ab2429c3d594dd70689604b5cf7421254cdf"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/contracts/zipball/1aa7ab2429c3d594dd70689604b5cf7421254cdf",
+                "reference": "1aa7ab2429c3d594dd70689604b5cf7421254cdf",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.1.3"
+            },
+            "require-dev": {
+                "psr/cache": "^1.0",
+                "psr/container": "^1.0"
+            },
+            "suggest": {
+                "psr/cache": "When using the Cache contracts",
+                "psr/container": "When using the Service contracts",
+                "symfony/cache-contracts-implementation": "",
+                "symfony/service-contracts-implementation": "",
+                "symfony/translation-contracts-implementation": ""
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Contracts\\": ""
+                },
+                "exclude-from-classmap": [
+                    "**/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "A set of abstractions extracted out of the Symfony components",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "abstractions",
+                "contracts",
+                "decoupling",
+                "interfaces",
+                "interoperability",
+                "standards"
+            ],
+            "time": "2018-12-05T08:06:11+00:00"
         },
         {
             "name": "symfony/css-selector",
-            "version": "v4.1.6",
+            "version": "v4.2.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/css-selector.git",
-                "reference": "d67de79a70a27d93c92c47f37ece958bf8de4d8a"
+                "reference": "48eddf66950fa57996e1be4a55916d65c10c604a"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/css-selector/zipball/d67de79a70a27d93c92c47f37ece958bf8de4d8a",
-                "reference": "d67de79a70a27d93c92c47f37ece958bf8de4d8a",
+                "url": "https://api.github.com/repos/symfony/css-selector/zipball/48eddf66950fa57996e1be4a55916d65c10c604a",
+                "reference": "48eddf66950fa57996e1be4a55916d65c10c604a",
                 "shasum": ""
             },
             "require": {
@@ -2304,7 +2484,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.1-dev"
+                    "dev-master": "4.2-dev"
                 }
             },
             "autoload": {
@@ -2335,20 +2515,20 @@
             ],
             "description": "Symfony CssSelector Component",
             "homepage": "https://symfony.com",
-            "time": "2018-10-02T16:36:10+00:00"
+            "time": "2019-01-16T20:31:39+00:00"
         },
         {
             "name": "symfony/debug",
-            "version": "v4.1.6",
+            "version": "v4.2.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/debug.git",
-                "reference": "e3f76ce6198f81994e019bb2b4e533e9de1b9b90"
+                "reference": "de73f48977b8eaf7ce22814d66e43a1662cc864f"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/debug/zipball/e3f76ce6198f81994e019bb2b4e533e9de1b9b90",
-                "reference": "e3f76ce6198f81994e019bb2b4e533e9de1b9b90",
+                "url": "https://api.github.com/repos/symfony/debug/zipball/de73f48977b8eaf7ce22814d66e43a1662cc864f",
+                "reference": "de73f48977b8eaf7ce22814d66e43a1662cc864f",
                 "shasum": ""
             },
             "require": {
@@ -2364,7 +2544,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.1-dev"
+                    "dev-master": "4.2-dev"
                 }
             },
             "autoload": {
@@ -2391,24 +2571,25 @@
             ],
             "description": "Symfony Debug Component",
             "homepage": "https://symfony.com",
-            "time": "2018-10-02T16:36:10+00:00"
+            "time": "2019-03-03T18:11:24+00:00"
         },
         {
             "name": "symfony/event-dispatcher",
-            "version": "v4.1.6",
+            "version": "v4.2.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/event-dispatcher.git",
-                "reference": "bfb30c2ad377615a463ebbc875eba64a99f6aa3e"
+                "reference": "3354d2e6af986dd71f68b4e5cf4a933ab58697fb"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/event-dispatcher/zipball/bfb30c2ad377615a463ebbc875eba64a99f6aa3e",
-                "reference": "bfb30c2ad377615a463ebbc875eba64a99f6aa3e",
+                "url": "https://api.github.com/repos/symfony/event-dispatcher/zipball/3354d2e6af986dd71f68b4e5cf4a933ab58697fb",
+                "reference": "3354d2e6af986dd71f68b4e5cf4a933ab58697fb",
                 "shasum": ""
             },
             "require": {
-                "php": "^7.1.3"
+                "php": "^7.1.3",
+                "symfony/contracts": "^1.0"
             },
             "conflict": {
                 "symfony/dependency-injection": "<3.4"
@@ -2427,7 +2608,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.1-dev"
+                    "dev-master": "4.2-dev"
                 }
             },
             "autoload": {
@@ -2454,20 +2635,20 @@
             ],
             "description": "Symfony EventDispatcher Component",
             "homepage": "https://symfony.com",
-            "time": "2018-07-26T09:10:45+00:00"
+            "time": "2019-02-23T15:17:42+00:00"
         },
         {
             "name": "symfony/finder",
-            "version": "v4.1.6",
+            "version": "v4.2.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/finder.git",
-                "reference": "1f17195b44543017a9c9b2d437c670627e96ad06"
+                "reference": "267b7002c1b70ea80db0833c3afe05f0fbde580a"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/finder/zipball/1f17195b44543017a9c9b2d437c670627e96ad06",
-                "reference": "1f17195b44543017a9c9b2d437c670627e96ad06",
+                "url": "https://api.github.com/repos/symfony/finder/zipball/267b7002c1b70ea80db0833c3afe05f0fbde580a",
+                "reference": "267b7002c1b70ea80db0833c3afe05f0fbde580a",
                 "shasum": ""
             },
             "require": {
@@ -2476,7 +2657,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.1-dev"
+                    "dev-master": "4.2-dev"
                 }
             },
             "autoload": {
@@ -2503,20 +2684,20 @@
             ],
             "description": "Symfony Finder Component",
             "homepage": "https://symfony.com",
-            "time": "2018-10-03T08:47:56+00:00"
+            "time": "2019-02-23T15:42:05+00:00"
         },
         {
             "name": "symfony/http-foundation",
-            "version": "v4.1.6",
+            "version": "v4.2.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/http-foundation.git",
-                "reference": "d528136617ff24f530e70df9605acc1b788b08d4"
+                "reference": "850a667d6254ccf6c61d853407b16f21c4579c77"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/http-foundation/zipball/d528136617ff24f530e70df9605acc1b788b08d4",
-                "reference": "d528136617ff24f530e70df9605acc1b788b08d4",
+                "url": "https://api.github.com/repos/symfony/http-foundation/zipball/850a667d6254ccf6c61d853407b16f21c4579c77",
+                "reference": "850a667d6254ccf6c61d853407b16f21c4579c77",
                 "shasum": ""
             },
             "require": {
@@ -2530,7 +2711,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.1-dev"
+                    "dev-master": "4.2-dev"
                 }
             },
             "autoload": {
@@ -2557,25 +2738,26 @@
             ],
             "description": "Symfony HttpFoundation Component",
             "homepage": "https://symfony.com",
-            "time": "2018-10-03T08:48:45+00:00"
+            "time": "2019-02-26T08:03:39+00:00"
         },
         {
             "name": "symfony/http-kernel",
-            "version": "v4.1.6",
+            "version": "v4.2.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/http-kernel.git",
-                "reference": "f5e7c15a5d010be0e16ce798594c5960451d4220"
+                "reference": "895ceccaa8149f9343e6134e607c21da42d73b7a"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/http-kernel/zipball/f5e7c15a5d010be0e16ce798594c5960451d4220",
-                "reference": "f5e7c15a5d010be0e16ce798594c5960451d4220",
+                "url": "https://api.github.com/repos/symfony/http-kernel/zipball/895ceccaa8149f9343e6134e607c21da42d73b7a",
+                "reference": "895ceccaa8149f9343e6134e607c21da42d73b7a",
                 "shasum": ""
             },
             "require": {
                 "php": "^7.1.3",
                 "psr/log": "~1.0",
+                "symfony/contracts": "^1.0.2",
                 "symfony/debug": "~3.4|~4.0",
                 "symfony/event-dispatcher": "~4.1",
                 "symfony/http-foundation": "^4.1.1",
@@ -2583,7 +2765,8 @@
             },
             "conflict": {
                 "symfony/config": "<3.4",
-                "symfony/dependency-injection": "<4.1",
+                "symfony/dependency-injection": "<4.2",
+                "symfony/translation": "<4.2",
                 "symfony/var-dumper": "<4.1.1",
                 "twig/twig": "<1.34|<2.4,>=2"
             },
@@ -2596,7 +2779,7 @@
                 "symfony/config": "~3.4|~4.0",
                 "symfony/console": "~3.4|~4.0",
                 "symfony/css-selector": "~3.4|~4.0",
-                "symfony/dependency-injection": "^4.1",
+                "symfony/dependency-injection": "^4.2",
                 "symfony/dom-crawler": "~3.4|~4.0",
                 "symfony/expression-language": "~3.4|~4.0",
                 "symfony/finder": "~3.4|~4.0",
@@ -2604,7 +2787,7 @@
                 "symfony/routing": "~3.4|~4.0",
                 "symfony/stopwatch": "~3.4|~4.0",
                 "symfony/templating": "~3.4|~4.0",
-                "symfony/translation": "~3.4|~4.0",
+                "symfony/translation": "~4.2",
                 "symfony/var-dumper": "^4.1.1"
             },
             "suggest": {
@@ -2617,7 +2800,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.1-dev"
+                    "dev-master": "4.2-dev"
                 }
             },
             "autoload": {
@@ -2644,20 +2827,20 @@
             ],
             "description": "Symfony HttpKernel Component",
             "homepage": "https://symfony.com",
-            "time": "2018-10-03T12:53:38+00:00"
+            "time": "2019-03-03T19:38:09+00:00"
         },
         {
             "name": "symfony/polyfill-ctype",
-            "version": "v1.9.0",
+            "version": "v1.11.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-ctype.git",
-                "reference": "e3d826245268269cd66f8326bd8bc066687b4a19"
+                "reference": "82ebae02209c21113908c229e9883c419720738a"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/e3d826245268269cd66f8326bd8bc066687b4a19",
-                "reference": "e3d826245268269cd66f8326bd8bc066687b4a19",
+                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/82ebae02209c21113908c229e9883c419720738a",
+                "reference": "82ebae02209c21113908c229e9883c419720738a",
                 "shasum": ""
             },
             "require": {
@@ -2669,7 +2852,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "1.9-dev"
+                    "dev-master": "1.11-dev"
                 }
             },
             "autoload": {
@@ -2691,7 +2874,7 @@
                 },
                 {
                     "name": "Gert de Pagter",
-                    "email": "BackEndTea@gmail.com"
+                    "email": "backendtea@gmail.com"
                 }
             ],
             "description": "Symfony polyfill for ctype functions",
@@ -2702,20 +2885,141 @@
                 "polyfill",
                 "portable"
             ],
-            "time": "2018-08-06T14:22:27+00:00"
+            "time": "2019-02-06T07:57:58+00:00"
+        },
+        {
+            "name": "symfony/polyfill-iconv",
+            "version": "v1.11.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/polyfill-iconv.git",
+                "reference": "f037ea22acfaee983e271dd9c3b8bb4150bd8ad7"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/polyfill-iconv/zipball/f037ea22acfaee983e271dd9c3b8bb4150bd8ad7",
+                "reference": "f037ea22acfaee983e271dd9c3b8bb4150bd8ad7",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "suggest": {
+                "ext-iconv": "For best performance"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.11-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Polyfill\\Iconv\\": ""
+                },
+                "files": [
+                    "bootstrap.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Nicolas Grekas",
+                    "email": "p@tchwork.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Symfony polyfill for the Iconv extension",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "compatibility",
+                "iconv",
+                "polyfill",
+                "portable",
+                "shim"
+            ],
+            "time": "2019-02-06T07:57:58+00:00"
+        },
+        {
+            "name": "symfony/polyfill-intl-idn",
+            "version": "v1.11.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/polyfill-intl-idn.git",
+                "reference": "c766e95bec706cdd89903b1eda8afab7d7a6b7af"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/polyfill-intl-idn/zipball/c766e95bec706cdd89903b1eda8afab7d7a6b7af",
+                "reference": "c766e95bec706cdd89903b1eda8afab7d7a6b7af",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3",
+                "symfony/polyfill-mbstring": "^1.3",
+                "symfony/polyfill-php72": "^1.9"
+            },
+            "suggest": {
+                "ext-intl": "For best performance"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.9-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Polyfill\\Intl\\Idn\\": ""
+                },
+                "files": [
+                    "bootstrap.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                },
+                {
+                    "name": "Laurent Bassin",
+                    "email": "laurent@bassin.info"
+                }
+            ],
+            "description": "Symfony polyfill for intl's idn_to_ascii and idn_to_utf8 functions",
+            "homepage": "https://symfony.com",
+            "keywords": [
+                "compatibility",
+                "idn",
+                "intl",
+                "polyfill",
+                "portable",
+                "shim"
+            ],
+            "time": "2019-03-04T13:44:35+00:00"
         },
         {
             "name": "symfony/polyfill-mbstring",
-            "version": "v1.9.0",
+            "version": "v1.11.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-mbstring.git",
-                "reference": "d0cd638f4634c16d8df4508e847f14e9e43168b8"
+                "reference": "fe5e94c604826c35a32fa832f35bd036b6799609"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/d0cd638f4634c16d8df4508e847f14e9e43168b8",
-                "reference": "d0cd638f4634c16d8df4508e847f14e9e43168b8",
+                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/fe5e94c604826c35a32fa832f35bd036b6799609",
+                "reference": "fe5e94c604826c35a32fa832f35bd036b6799609",
                 "shasum": ""
             },
             "require": {
@@ -2727,7 +3031,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "1.9-dev"
+                    "dev-master": "1.11-dev"
                 }
             },
             "autoload": {
@@ -2761,20 +3065,20 @@
                 "portable",
                 "shim"
             ],
-            "time": "2018-08-06T14:22:27+00:00"
+            "time": "2019-02-06T07:57:58+00:00"
         },
         {
             "name": "symfony/polyfill-php56",
-            "version": "v1.9.0",
+            "version": "v1.11.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-php56.git",
-                "reference": "7b4fc009172cc0196535b0328bd1226284a28000"
+                "reference": "f4dddbc5c3471e1b700a147a20ae17cdb72dbe42"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-php56/zipball/7b4fc009172cc0196535b0328bd1226284a28000",
-                "reference": "7b4fc009172cc0196535b0328bd1226284a28000",
+                "url": "https://api.github.com/repos/symfony/polyfill-php56/zipball/f4dddbc5c3471e1b700a147a20ae17cdb72dbe42",
+                "reference": "f4dddbc5c3471e1b700a147a20ae17cdb72dbe42",
                 "shasum": ""
             },
             "require": {
@@ -2784,7 +3088,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "1.9-dev"
+                    "dev-master": "1.11-dev"
                 }
             },
             "autoload": {
@@ -2817,20 +3121,20 @@
                 "portable",
                 "shim"
             ],
-            "time": "2018-08-06T14:22:27+00:00"
+            "time": "2019-02-06T07:57:58+00:00"
         },
         {
             "name": "symfony/polyfill-php72",
-            "version": "v1.9.0",
+            "version": "v1.11.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-php72.git",
-                "reference": "95c50420b0baed23852452a7f0c7b527303ed5ae"
+                "reference": "ab50dcf166d5f577978419edd37aa2bb8eabce0c"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-php72/zipball/95c50420b0baed23852452a7f0c7b527303ed5ae",
-                "reference": "95c50420b0baed23852452a7f0c7b527303ed5ae",
+                "url": "https://api.github.com/repos/symfony/polyfill-php72/zipball/ab50dcf166d5f577978419edd37aa2bb8eabce0c",
+                "reference": "ab50dcf166d5f577978419edd37aa2bb8eabce0c",
                 "shasum": ""
             },
             "require": {
@@ -2839,7 +3143,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "1.9-dev"
+                    "dev-master": "1.11-dev"
                 }
             },
             "autoload": {
@@ -2872,20 +3176,20 @@
                 "portable",
                 "shim"
             ],
-            "time": "2018-08-06T14:22:27+00:00"
+            "time": "2019-02-06T07:57:58+00:00"
         },
         {
             "name": "symfony/polyfill-util",
-            "version": "v1.9.0",
+            "version": "v1.11.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-util.git",
-                "reference": "8e15d04ba3440984d23e7964b2ee1d25c8de1581"
+                "reference": "b46c6cae28a3106735323f00a0c38eccf2328897"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-util/zipball/8e15d04ba3440984d23e7964b2ee1d25c8de1581",
-                "reference": "8e15d04ba3440984d23e7964b2ee1d25c8de1581",
+                "url": "https://api.github.com/repos/symfony/polyfill-util/zipball/b46c6cae28a3106735323f00a0c38eccf2328897",
+                "reference": "b46c6cae28a3106735323f00a0c38eccf2328897",
                 "shasum": ""
             },
             "require": {
@@ -2894,7 +3198,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "1.9-dev"
+                    "dev-master": "1.11-dev"
                 }
             },
             "autoload": {
@@ -2924,20 +3228,20 @@
                 "polyfill",
                 "shim"
             ],
-            "time": "2018-08-06T14:22:27+00:00"
+            "time": "2019-02-08T14:16:39+00:00"
         },
         {
             "name": "symfony/process",
-            "version": "v4.1.6",
+            "version": "v4.2.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/process.git",
-                "reference": "ee33c0322a8fee0855afcc11fff81e6b1011b529"
+                "reference": "6c05edb11fbeff9e2b324b4270ecb17911a8b7ad"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/process/zipball/ee33c0322a8fee0855afcc11fff81e6b1011b529",
-                "reference": "ee33c0322a8fee0855afcc11fff81e6b1011b529",
+                "url": "https://api.github.com/repos/symfony/process/zipball/6c05edb11fbeff9e2b324b4270ecb17911a8b7ad",
+                "reference": "6c05edb11fbeff9e2b324b4270ecb17911a8b7ad",
                 "shasum": ""
             },
             "require": {
@@ -2946,7 +3250,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.1-dev"
+                    "dev-master": "4.2-dev"
                 }
             },
             "autoload": {
@@ -2973,34 +3277,34 @@
             ],
             "description": "Symfony Process Component",
             "homepage": "https://symfony.com",
-            "time": "2018-10-02T12:40:59+00:00"
+            "time": "2019-01-24T22:05:03+00:00"
         },
         {
             "name": "symfony/routing",
-            "version": "v4.1.6",
+            "version": "v4.2.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/routing.git",
-                "reference": "537803f0bdfede36b9acef052d2e4d447d9fa0e9"
+                "reference": "ff03eae644e6b1e26d4a04b2385fe3a1a7f04e42"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/routing/zipball/537803f0bdfede36b9acef052d2e4d447d9fa0e9",
-                "reference": "537803f0bdfede36b9acef052d2e4d447d9fa0e9",
+                "url": "https://api.github.com/repos/symfony/routing/zipball/ff03eae644e6b1e26d4a04b2385fe3a1a7f04e42",
+                "reference": "ff03eae644e6b1e26d4a04b2385fe3a1a7f04e42",
                 "shasum": ""
             },
             "require": {
                 "php": "^7.1.3"
             },
             "conflict": {
-                "symfony/config": "<3.4",
+                "symfony/config": "<4.2",
                 "symfony/dependency-injection": "<3.4",
                 "symfony/yaml": "<3.4"
             },
             "require-dev": {
                 "doctrine/annotations": "~1.0",
                 "psr/log": "~1.0",
-                "symfony/config": "~3.4|~4.0",
+                "symfony/config": "~4.2",
                 "symfony/dependency-injection": "~3.4|~4.0",
                 "symfony/expression-language": "~3.4|~4.0",
                 "symfony/http-foundation": "~3.4|~4.0",
@@ -3017,7 +3321,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.1-dev"
+                    "dev-master": "4.2-dev"
                 }
             },
             "autoload": {
@@ -3050,24 +3354,25 @@
                 "uri",
                 "url"
             ],
-            "time": "2018-10-02T12:40:59+00:00"
+            "time": "2019-02-23T15:17:42+00:00"
         },
         {
             "name": "symfony/translation",
-            "version": "v4.1.6",
+            "version": "v4.2.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/translation.git",
-                "reference": "9f0b61e339160a466ebcde167a6c5521c810e304"
+                "reference": "748464177a77011f8f4cdd076773862ce4915f8f"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/translation/zipball/9f0b61e339160a466ebcde167a6c5521c810e304",
-                "reference": "9f0b61e339160a466ebcde167a6c5521c810e304",
+                "url": "https://api.github.com/repos/symfony/translation/zipball/748464177a77011f8f4cdd076773862ce4915f8f",
+                "reference": "748464177a77011f8f4cdd076773862ce4915f8f",
                 "shasum": ""
             },
             "require": {
                 "php": "^7.1.3",
+                "symfony/contracts": "^1.0.2",
                 "symfony/polyfill-mbstring": "~1.0"
             },
             "conflict": {
@@ -3075,6 +3380,9 @@
                 "symfony/dependency-injection": "<3.4",
                 "symfony/yaml": "<3.4"
             },
+            "provide": {
+                "symfony/translation-contracts-implementation": "1.0"
+            },
             "require-dev": {
                 "psr/log": "~1.0",
                 "symfony/config": "~3.4|~4.0",
@@ -3092,7 +3400,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.1-dev"
+                    "dev-master": "4.2-dev"
                 }
             },
             "autoload": {
@@ -3119,20 +3427,20 @@
             ],
             "description": "Symfony Translation Component",
             "homepage": "https://symfony.com",
-            "time": "2018-10-02T16:36:10+00:00"
+            "time": "2019-02-27T03:31:50+00:00"
         },
         {
             "name": "symfony/var-dumper",
-            "version": "v4.1.6",
+            "version": "v4.2.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/var-dumper.git",
-                "reference": "60319b45653580b0cdacca499344577d87732f16"
+                "reference": "9f87189ac10b42edf7fb8edc846f1937c6d157cf"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/var-dumper/zipball/60319b45653580b0cdacca499344577d87732f16",
-                "reference": "60319b45653580b0cdacca499344577d87732f16",
+                "url": "https://api.github.com/repos/symfony/var-dumper/zipball/9f87189ac10b42edf7fb8edc846f1937c6d157cf",
+                "reference": "9f87189ac10b42edf7fb8edc846f1937c6d157cf",
                 "shasum": ""
             },
             "require": {
@@ -3146,6 +3454,7 @@
             },
             "require-dev": {
                 "ext-iconv": "*",
+                "symfony/console": "~3.4|~4.0",
                 "symfony/process": "~3.4|~4.0",
                 "twig/twig": "~1.34|~2.4"
             },
@@ -3160,7 +3469,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.1-dev"
+                    "dev-master": "4.2-dev"
                 }
             },
             "autoload": {
@@ -3194,7 +3503,7 @@
                 "debug",
                 "dump"
             ],
-            "time": "2018-10-02T16:36:10+00:00"
+            "time": "2019-02-23T15:17:42+00:00"
         },
         {
             "name": "tijsverkoyen/css-to-inline-styles",
@@ -3245,33 +3554,33 @@
         },
         {
             "name": "tymon/jwt-auth",
-            "version": "1.0.0-rc.3",
+            "version": "1.0.0-rc.4.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/tymondesigns/jwt-auth.git",
-                "reference": "e190b6a75372e7e5e3a6d2cf0e4456313412299f"
+                "reference": "63698d304554e5d0bc3eb481cc260a9fc900e151"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/tymondesigns/jwt-auth/zipball/e190b6a75372e7e5e3a6d2cf0e4456313412299f",
-                "reference": "e190b6a75372e7e5e3a6d2cf0e4456313412299f",
+                "url": "https://api.github.com/repos/tymondesigns/jwt-auth/zipball/63698d304554e5d0bc3eb481cc260a9fc900e151",
+                "reference": "63698d304554e5d0bc3eb481cc260a9fc900e151",
                 "shasum": ""
             },
             "require": {
-                "illuminate/auth": "5.1.* || 5.2.* || 5.3.* || 5.4.* || 5.5.* || 5.6.* || 5.7.*",
-                "illuminate/contracts": "5.1.* || 5.2.* || 5.3.* || 5.4.* || 5.5.* || 5.6.* || 5.7.*",
-                "illuminate/http": "5.1.* || 5.2.* || 5.3.* || 5.4.* || 5.5.* || 5.6.* || 5.7.*",
-                "illuminate/support": "5.1.* || 5.2.* || 5.3.* || 5.4.* || 5.5.* || 5.6.* || 5.7.*",
+                "illuminate/auth": "^5.1",
+                "illuminate/contracts": "^5.1",
+                "illuminate/http": "^5.1",
+                "illuminate/support": "^5.1",
                 "lcobucci/jwt": "^3.2",
                 "namshi/jose": "^7.0",
-                "nesbot/carbon": "^1.0",
+                "nesbot/carbon": "^1.0 || ^2.0",
                 "php": "^5.5.9 || ^7.0"
             },
             "require-dev": {
                 "cartalyst/sentinel": "2.0.*",
-                "illuminate/console": "5.1.* || 5.2.* || 5.3.* || 5.4.* || 5.5.* || 5.6.* || 5.7.*",
-                "illuminate/database": "5.1.* || 5.2.* || 5.3.* || 5.4.* || 5.5.* || 5.6.* || 5.7.*",
-                "illuminate/routing": "5.1.* || 5.2.* || 5.3.* || 5.4.* || 5.5.* || 5.6.* || 5.7.*",
+                "illuminate/console": "^5.1",
+                "illuminate/database": "^5.1",
+                "illuminate/routing": "^5.1",
                 "mockery/mockery": ">=0.9.9",
                 "phpunit/phpunit": "~4.8 || ~6.0"
             },
@@ -3316,32 +3625,34 @@
                 "jwt",
                 "laravel"
             ],
-            "time": "2018-09-04T19:48:02+00:00"
+            "time": "2019-03-14T20:29:20+00:00"
         },
         {
             "name": "vlucas/phpdotenv",
-            "version": "v2.5.1",
+            "version": "v3.3.3",
             "source": {
                 "type": "git",
                 "url": "https://github.com/vlucas/phpdotenv.git",
-                "reference": "8abb4f9aa89ddea9d52112c65bbe8d0125e2fa8e"
+                "reference": "dbcc609971dd9b55f48b8008b553d79fd372ddde"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/vlucas/phpdotenv/zipball/8abb4f9aa89ddea9d52112c65bbe8d0125e2fa8e",
-                "reference": "8abb4f9aa89ddea9d52112c65bbe8d0125e2fa8e",
+                "url": "https://api.github.com/repos/vlucas/phpdotenv/zipball/dbcc609971dd9b55f48b8008b553d79fd372ddde",
+                "reference": "dbcc609971dd9b55f48b8008b553d79fd372ddde",
                 "shasum": ""
             },
             "require": {
-                "php": ">=5.3.9"
+                "php": "^5.4 || ^7.0",
+                "phpoption/phpoption": "^1.5",
+                "symfony/polyfill-ctype": "^1.9"
             },
             "require-dev": {
-                "phpunit/phpunit": "^4.8.35 || ^5.0"
+                "phpunit/phpunit": "^4.8.35 || ^5.0 || ^6.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "2.5-dev"
+                    "dev-master": "3.3-dev"
                 }
             },
             "autoload": {
@@ -3366,7 +3677,7 @@
                 "env",
                 "environment"
             ],
-            "time": "2018-07-29T20:33:41+00:00"
+            "time": "2019-03-06T09:39:45+00:00"
         },
         {
             "name": "webpatser/laravel-countries",
@@ -3437,22 +3748,22 @@
     "packages-dev": [
         {
             "name": "barryvdh/laravel-debugbar",
-            "version": "v3.2.0",
+            "version": "v3.2.3",
             "source": {
                 "type": "git",
                 "url": "https://github.com/barryvdh/laravel-debugbar.git",
-                "reference": "5b68f3972083a7eeec0d6f161962fcda71a127c0"
+                "reference": "5fcba4cc8e92a230b13b99c1083fc22ba8a5c479"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/barryvdh/laravel-debugbar/zipball/5b68f3972083a7eeec0d6f161962fcda71a127c0",
-                "reference": "5b68f3972083a7eeec0d6f161962fcda71a127c0",
+                "url": "https://api.github.com/repos/barryvdh/laravel-debugbar/zipball/5fcba4cc8e92a230b13b99c1083fc22ba8a5c479",
+                "reference": "5fcba4cc8e92a230b13b99c1083fc22ba8a5c479",
                 "shasum": ""
             },
             "require": {
-                "illuminate/routing": "5.5.x|5.6.x|5.7.x",
-                "illuminate/session": "5.5.x|5.6.x|5.7.x",
-                "illuminate/support": "5.5.x|5.6.x|5.7.x",
+                "illuminate/routing": "5.5.x|5.6.x|5.7.x|5.8.x",
+                "illuminate/session": "5.5.x|5.6.x|5.7.x|5.8.x",
+                "illuminate/support": "5.5.x|5.6.x|5.7.x|5.8.x",
                 "maximebf/debugbar": "~1.15.0",
                 "php": ">=7.0",
                 "symfony/debug": "^3|^4",
@@ -3501,34 +3812,34 @@
                 "profiler",
                 "webprofiler"
             ],
-            "time": "2018-08-22T11:06:19+00:00"
+            "time": "2019-02-26T18:01:54+00:00"
         },
         {
             "name": "barryvdh/laravel-ide-helper",
-            "version": "v2.5.1",
+            "version": "v2.6.2",
             "source": {
                 "type": "git",
                 "url": "https://github.com/barryvdh/laravel-ide-helper.git",
-                "reference": "7db1843473e1562d8e0490b51db847d3a1415140"
+                "reference": "39c148ad4273f5b8c49d0a363ddbc0462f1f2eec"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/barryvdh/laravel-ide-helper/zipball/7db1843473e1562d8e0490b51db847d3a1415140",
-                "reference": "7db1843473e1562d8e0490b51db847d3a1415140",
+                "url": "https://api.github.com/repos/barryvdh/laravel-ide-helper/zipball/39c148ad4273f5b8c49d0a363ddbc0462f1f2eec",
+                "reference": "39c148ad4273f5b8c49d0a363ddbc0462f1f2eec",
                 "shasum": ""
             },
             "require": {
-                "barryvdh/reflection-docblock": "^2.0.4",
+                "barryvdh/reflection-docblock": "^2.0.6",
                 "composer/composer": "^1.6",
-                "illuminate/console": "^5.5,<5.8",
-                "illuminate/filesystem": "^5.5,<5.8",
-                "illuminate/support": "^5.5,<5.8",
+                "illuminate/console": "^5.5,<5.9",
+                "illuminate/filesystem": "^5.5,<5.9",
+                "illuminate/support": "^5.5,<5.9",
                 "php": ">=7"
             },
             "require-dev": {
                 "doctrine/dbal": "~2.3",
-                "illuminate/config": "^5.1,<5.8",
-                "illuminate/view": "^5.1,<5.8",
+                "illuminate/config": "^5.1,<5.9",
+                "illuminate/view": "^5.1,<5.9",
                 "phpro/grumphp": "^0.14",
                 "phpunit/phpunit": "4.*",
                 "scrutinizer/ocular": "~1.1",
@@ -3540,7 +3851,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "2.5-dev"
+                    "dev-master": "2.6-dev"
                 },
                 "laravel": {
                     "providers": [
@@ -3575,20 +3886,20 @@
                 "phpstorm",
                 "sublime"
             ],
-            "time": "2018-09-06T18:41:09+00:00"
+            "time": "2019-03-26T10:38:22+00:00"
         },
         {
             "name": "barryvdh/reflection-docblock",
-            "version": "v2.0.4",
+            "version": "v2.0.6",
             "source": {
                 "type": "git",
                 "url": "https://github.com/barryvdh/ReflectionDocBlock.git",
-                "reference": "3dcbd98b5d9384a5357266efba8fd29884458e5c"
+                "reference": "6b69015d83d3daf9004a71a89f26e27d27ef6a16"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/barryvdh/ReflectionDocBlock/zipball/3dcbd98b5d9384a5357266efba8fd29884458e5c",
-                "reference": "3dcbd98b5d9384a5357266efba8fd29884458e5c",
+                "url": "https://api.github.com/repos/barryvdh/ReflectionDocBlock/zipball/6b69015d83d3daf9004a71a89f26e27d27ef6a16",
+                "reference": "6b69015d83d3daf9004a71a89f26e27d27ef6a16",
                 "shasum": ""
             },
             "require": {
@@ -3624,20 +3935,20 @@
                     "email": "mike.vanriel@naenius.com"
                 }
             ],
-            "time": "2016-06-13T19:28:20+00:00"
+            "time": "2018-12-13T10:34:14+00:00"
         },
         {
             "name": "composer/ca-bundle",
-            "version": "1.1.3",
+            "version": "1.1.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/composer/ca-bundle.git",
-                "reference": "8afa52cd417f4ec417b4bfe86b68106538a87660"
+                "reference": "558f321c52faeb4828c03e7dc0cfe39a09e09a2d"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/composer/ca-bundle/zipball/8afa52cd417f4ec417b4bfe86b68106538a87660",
-                "reference": "8afa52cd417f4ec417b4bfe86b68106538a87660",
+                "url": "https://api.github.com/repos/composer/ca-bundle/zipball/558f321c52faeb4828c03e7dc0cfe39a09e09a2d",
+                "reference": "558f321c52faeb4828c03e7dc0cfe39a09e09a2d",
                 "shasum": ""
             },
             "require": {
@@ -3680,20 +3991,20 @@
                 "ssl",
                 "tls"
             ],
-            "time": "2018-10-18T06:09:13+00:00"
+            "time": "2019-01-28T09:30:10+00:00"
         },
         {
             "name": "composer/composer",
-            "version": "1.7.2",
+            "version": "1.8.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/composer/composer.git",
-                "reference": "576aab9b5abb2ed11a1c52353a759363216a4ad2"
+                "reference": "bc364c2480c17941e2135cfc568fa41794392534"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/composer/composer/zipball/576aab9b5abb2ed11a1c52353a759363216a4ad2",
-                "reference": "576aab9b5abb2ed11a1c52353a759363216a4ad2",
+                "url": "https://api.github.com/repos/composer/composer/zipball/bc364c2480c17941e2135cfc568fa41794392534",
+                "reference": "bc364c2480c17941e2135cfc568fa41794392534",
                 "shasum": ""
             },
             "require": {
@@ -3729,7 +4040,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "1.7-dev"
+                    "dev-master": "1.8-dev"
                 }
             },
             "autoload": {
@@ -3760,20 +4071,20 @@
                 "dependency",
                 "package"
             ],
-            "time": "2018-08-16T14:57:12+00:00"
+            "time": "2019-02-11T09:52:10+00:00"
         },
         {
             "name": "composer/semver",
-            "version": "1.4.2",
+            "version": "1.5.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/composer/semver.git",
-                "reference": "c7cb9a2095a074d131b65a8a0cd294479d785573"
+                "reference": "46d9139568ccb8d9e7cdd4539cab7347568a5e2e"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/composer/semver/zipball/c7cb9a2095a074d131b65a8a0cd294479d785573",
-                "reference": "c7cb9a2095a074d131b65a8a0cd294479d785573",
+                "url": "https://api.github.com/repos/composer/semver/zipball/46d9139568ccb8d9e7cdd4539cab7347568a5e2e",
+                "reference": "46d9139568ccb8d9e7cdd4539cab7347568a5e2e",
                 "shasum": ""
             },
             "require": {
@@ -3822,28 +4133,27 @@
                 "validation",
                 "versioning"
             ],
-            "time": "2016-08-30T16:08:34+00:00"
+            "time": "2019-03-19T17:25:45+00:00"
         },
         {
             "name": "composer/spdx-licenses",
-            "version": "1.4.0",
+            "version": "1.5.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/composer/spdx-licenses.git",
-                "reference": "cb17687e9f936acd7e7245ad3890f953770dec1b"
+                "reference": "a1aa51cf3ab838b83b0867b14e56fc20fbd55b3d"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/composer/spdx-licenses/zipball/cb17687e9f936acd7e7245ad3890f953770dec1b",
-                "reference": "cb17687e9f936acd7e7245ad3890f953770dec1b",
+                "url": "https://api.github.com/repos/composer/spdx-licenses/zipball/a1aa51cf3ab838b83b0867b14e56fc20fbd55b3d",
+                "reference": "a1aa51cf3ab838b83b0867b14e56fc20fbd55b3d",
                 "shasum": ""
             },
             "require": {
-                "php": "^5.3.2 || ^7.0"
+                "php": "^5.3.2 || ^7.0 || ^8.0"
             },
             "require-dev": {
-                "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.5",
-                "phpunit/phpunit-mock-objects": "2.3.0 || ^3.0"
+                "phpunit/phpunit": "^4.8.35 || ^5.7 || 6.5 - 7"
             },
             "type": "library",
             "extra": {
@@ -3883,20 +4193,20 @@
                 "spdx",
                 "validator"
             ],
-            "time": "2018-04-30T10:33:04+00:00"
+            "time": "2019-03-26T10:23:26+00:00"
         },
         {
             "name": "composer/xdebug-handler",
-            "version": "1.3.0",
+            "version": "1.3.2",
             "source": {
                 "type": "git",
                 "url": "https://github.com/composer/xdebug-handler.git",
-                "reference": "b8e9745fb9b06ea6664d8872c4505fb16df4611c"
+                "reference": "d17708133b6c276d6e42ef887a877866b909d892"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/composer/xdebug-handler/zipball/b8e9745fb9b06ea6664d8872c4505fb16df4611c",
-                "reference": "b8e9745fb9b06ea6664d8872c4505fb16df4611c",
+                "url": "https://api.github.com/repos/composer/xdebug-handler/zipball/d17708133b6c276d6e42ef887a877866b909d892",
+                "reference": "d17708133b6c276d6e42ef887a877866b909d892",
                 "shasum": ""
             },
             "require": {
@@ -3927,31 +4237,33 @@
                 "Xdebug",
                 "performance"
             ],
-            "time": "2018-08-31T19:07:57+00:00"
+            "time": "2019-01-28T20:25:53+00:00"
         },
         {
             "name": "doctrine/instantiator",
-            "version": "1.1.0",
+            "version": "1.2.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/doctrine/instantiator.git",
-                "reference": "185b8868aa9bf7159f5f953ed5afb2d7fcdc3bda"
+                "reference": "a2c590166b2133a4633738648b6b064edae0814a"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/doctrine/instantiator/zipball/185b8868aa9bf7159f5f953ed5afb2d7fcdc3bda",
-                "reference": "185b8868aa9bf7159f5f953ed5afb2d7fcdc3bda",
+                "url": "https://api.github.com/repos/doctrine/instantiator/zipball/a2c590166b2133a4633738648b6b064edae0814a",
+                "reference": "a2c590166b2133a4633738648b6b064edae0814a",
                 "shasum": ""
             },
             "require": {
                 "php": "^7.1"
             },
             "require-dev": {
-                "athletic/athletic": "~0.1.8",
+                "doctrine/coding-standard": "^6.0",
                 "ext-pdo": "*",
                 "ext-phar": "*",
-                "phpunit/phpunit": "^6.2.3",
-                "squizlabs/php_codesniffer": "^3.0.2"
+                "phpbench/phpbench": "^0.13",
+                "phpstan/phpstan-phpunit": "^0.11",
+                "phpstan/phpstan-shim": "^0.11",
+                "phpunit/phpunit": "^7.0"
             },
             "type": "library",
             "extra": {
@@ -3976,12 +4288,12 @@
                 }
             ],
             "description": "A small, lightweight utility to instantiate objects in PHP without invoking their constructors",
-            "homepage": "https://github.com/doctrine/instantiator",
+            "homepage": "https://www.doctrine-project.org/projects/instantiator.html",
             "keywords": [
                 "constructor",
                 "instantiate"
             ],
-            "time": "2017-07-22T11:58:36+00:00"
+            "time": "2019-03-17T17:37:11+00:00"
         },
         {
             "name": "filp/whoops",
@@ -4096,20 +4408,20 @@
         },
         {
             "name": "hamcrest/hamcrest-php",
-            "version": "v1.2.2",
+            "version": "v2.0.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/hamcrest/hamcrest-php.git",
-                "reference": "b37020aa976fa52d3de9aa904aa2522dc518f79c"
+                "reference": "776503d3a8e85d4f9a1148614f95b7a608b046ad"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/hamcrest/hamcrest-php/zipball/b37020aa976fa52d3de9aa904aa2522dc518f79c",
-                "reference": "b37020aa976fa52d3de9aa904aa2522dc518f79c",
+                "url": "https://api.github.com/repos/hamcrest/hamcrest-php/zipball/776503d3a8e85d4f9a1148614f95b7a608b046ad",
+                "reference": "776503d3a8e85d4f9a1148614f95b7a608b046ad",
                 "shasum": ""
             },
             "require": {
-                "php": ">=5.3.2"
+                "php": "^5.3|^7.0"
             },
             "replace": {
                 "cordoval/hamcrest-php": "*",
@@ -4118,15 +4430,18 @@
             },
             "require-dev": {
                 "phpunit/php-file-iterator": "1.3.3",
-                "satooshi/php-coveralls": "dev-master"
+                "phpunit/phpunit": "~4.0",
+                "satooshi/php-coveralls": "^1.0"
             },
             "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.0-dev"
+                }
+            },
             "autoload": {
                 "classmap": [
                     "hamcrest"
-                ],
-                "files": [
-                    "hamcrest/Hamcrest.php"
                 ]
             },
             "notification-url": "https://packagist.org/downloads/",
@@ -4137,27 +4452,27 @@
             "keywords": [
                 "test"
             ],
-            "time": "2015-05-11T14:41:42+00:00"
+            "time": "2016-01-20T08:20:44+00:00"
         },
         {
             "name": "justinrainbow/json-schema",
-            "version": "5.2.7",
+            "version": "5.2.8",
             "source": {
                 "type": "git",
                 "url": "https://github.com/justinrainbow/json-schema.git",
-                "reference": "8560d4314577199ba51bf2032f02cd1315587c23"
+                "reference": "dcb6e1006bb5fd1e392b4daa68932880f37550d4"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/justinrainbow/json-schema/zipball/8560d4314577199ba51bf2032f02cd1315587c23",
-                "reference": "8560d4314577199ba51bf2032f02cd1315587c23",
+                "url": "https://api.github.com/repos/justinrainbow/json-schema/zipball/dcb6e1006bb5fd1e392b4daa68932880f37550d4",
+                "reference": "dcb6e1006bb5fd1e392b4daa68932880f37550d4",
                 "shasum": ""
             },
             "require": {
                 "php": ">=5.3.3"
             },
             "require-dev": {
-                "friendsofphp/php-cs-fixer": "^2.1",
+                "friendsofphp/php-cs-fixer": "~2.2.20",
                 "json-schema/json-schema-test-suite": "1.2.0",
                 "phpunit/phpunit": "^4.8.35"
             },
@@ -4203,33 +4518,44 @@
                 "json",
                 "schema"
             ],
-            "time": "2018-02-14T22:26:30+00:00"
+            "time": "2019-01-14T23:55:14+00:00"
         },
         {
             "name": "laravel/browser-kit-testing",
-            "version": "v4.0.2",
+            "version": "v5.1.2",
             "source": {
                 "type": "git",
                 "url": "https://github.com/laravel/browser-kit-testing.git",
-                "reference": "efe038f40fb8ad06655ddfcb64e8b603e9e1f999"
+                "reference": "1189b899411a534f7f334db57a4966d08c568c73"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/laravel/browser-kit-testing/zipball/efe038f40fb8ad06655ddfcb64e8b603e9e1f999",
-                "reference": "efe038f40fb8ad06655ddfcb64e8b603e9e1f999",
+                "url": "https://api.github.com/repos/laravel/browser-kit-testing/zipball/1189b899411a534f7f334db57a4966d08c568c73",
+                "reference": "1189b899411a534f7f334db57a4966d08c568c73",
                 "shasum": ""
             },
             "require": {
-                "illuminate/support": "^5.6",
+                "ext-dom": "*",
+                "ext-json": "*",
+                "illuminate/database": "~5.7.0|~5.8.0",
+                "illuminate/http": "~5.7.0|~5.8.0",
+                "illuminate/support": "~5.7.0|~5.8.0",
+                "mockery/mockery": "^1.0",
                 "php": ">=7.1.3",
-                "phpunit/phpunit": "~7.0",
-                "symfony/css-selector": "~4.0",
-                "symfony/dom-crawler": "~4.0"
+                "phpunit/phpunit": "^7.0|^8.0",
+                "symfony/console": "^4.2",
+                "symfony/css-selector": "^4.2",
+                "symfony/dom-crawler": "^4.2",
+                "symfony/http-foundation": "^4.2",
+                "symfony/http-kernel": "^4.2"
+            },
+            "require-dev": {
+                "laravel/framework": "~5.7.0|~5.8.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.0-dev"
+                    "dev-master": "5.0-dev"
                 }
             },
             "autoload": {
@@ -4247,12 +4573,12 @@
                     "email": "taylor@laravel.com"
                 }
             ],
-            "description": "Provides backwards compatibility for BrowserKit testing in Laravel 5.4.",
+            "description": "Provides backwards compatibility for BrowserKit testing in the latest Laravel release.",
             "keywords": [
                 "laravel",
                 "testing"
             ],
-            "time": "2018-09-26T13:42:46+00:00"
+            "time": "2019-03-12T15:31:08+00:00"
         },
         {
             "name": "maximebf/debugbar",
@@ -4317,30 +4643,30 @@
         },
         {
             "name": "mockery/mockery",
-            "version": "0.9.9",
+            "version": "1.2.2",
             "source": {
                 "type": "git",
                 "url": "https://github.com/mockery/mockery.git",
-                "reference": "6fdb61243844dc924071d3404bb23994ea0b6856"
+                "reference": "0eb0b48c3f07b3b89f5169ce005b7d05b18cf1d2"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/mockery/mockery/zipball/6fdb61243844dc924071d3404bb23994ea0b6856",
-                "reference": "6fdb61243844dc924071d3404bb23994ea0b6856",
+                "url": "https://api.github.com/repos/mockery/mockery/zipball/0eb0b48c3f07b3b89f5169ce005b7d05b18cf1d2",
+                "reference": "0eb0b48c3f07b3b89f5169ce005b7d05b18cf1d2",
                 "shasum": ""
             },
             "require": {
-                "hamcrest/hamcrest-php": "~1.1",
+                "hamcrest/hamcrest-php": "~2.0",
                 "lib-pcre": ">=7.0",
-                "php": ">=5.3.2"
+                "php": ">=5.6.0"
             },
             "require-dev": {
-                "phpunit/phpunit": "~4.0"
+                "phpunit/phpunit": "~5.7.10|~6.5|~7.0|~8.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "0.9.x-dev"
+                    "dev-master": "1.0.x-dev"
                 }
             },
             "autoload": {
@@ -4364,8 +4690,8 @@
                     "homepage": "http://davedevelopment.co.uk"
                 }
             ],
-            "description": "Mockery is a simple yet flexible PHP mock object framework for use in unit testing with PHPUnit, PHPSpec or any other testing framework. Its core goal is to offer a test double framework with a succinct API capable of clearly defining all possible object operations and interactions using a human readable Domain Specific Language (DSL). Designed as a drop in alternative to PHPUnit's phpunit-mock-objects library, Mockery is easy to integrate with PHPUnit and can operate alongside phpunit-mock-objects without the World ending.",
-            "homepage": "http://github.com/padraic/mockery",
+            "description": "Mockery is a simple yet flexible PHP mock object framework",
+            "homepage": "https://github.com/mockery/mockery",
             "keywords": [
                 "BDD",
                 "TDD",
@@ -4378,7 +4704,7 @@
                 "test double",
                 "testing"
             ],
-            "time": "2017-02-28T12:52:32+00:00"
+            "time": "2019-02-13T09:37:52+00:00"
         },
         {
             "name": "myclabs/deep-copy",
@@ -4747,16 +5073,16 @@
         },
         {
             "name": "phpunit/php-code-coverage",
-            "version": "6.1.3",
+            "version": "6.1.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
-                "reference": "4d3ae9b21a7d7e440bd0cf65565533117976859f"
+                "reference": "807e6013b00af69b6c5d9ceb4282d0393dbb9d8d"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/4d3ae9b21a7d7e440bd0cf65565533117976859f",
-                "reference": "4d3ae9b21a7d7e440bd0cf65565533117976859f",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/807e6013b00af69b6c5d9ceb4282d0393dbb9d8d",
+                "reference": "807e6013b00af69b6c5d9ceb4282d0393dbb9d8d",
                 "shasum": ""
             },
             "require": {
@@ -4806,7 +5132,7 @@
                 "testing",
                 "xunit"
             ],
-            "time": "2018-10-23T05:59:32+00:00"
+            "time": "2018-10-31T16:06:48+00:00"
         },
         {
             "name": "phpunit/php-file-iterator",
@@ -4901,16 +5227,16 @@
         },
         {
             "name": "phpunit/php-timer",
-            "version": "2.0.0",
+            "version": "2.1.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/php-timer.git",
-                "reference": "8b8454ea6958c3dee38453d3bd571e023108c91f"
+                "reference": "8b389aebe1b8b0578430bda0c7c95a829608e059"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/8b8454ea6958c3dee38453d3bd571e023108c91f",
-                "reference": "8b8454ea6958c3dee38453d3bd571e023108c91f",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/8b389aebe1b8b0578430bda0c7c95a829608e059",
+                "reference": "8b389aebe1b8b0578430bda0c7c95a829608e059",
                 "shasum": ""
             },
             "require": {
@@ -4922,7 +5248,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "2.0-dev"
+                    "dev-master": "2.1-dev"
                 }
             },
             "autoload": {
@@ -4946,20 +5272,20 @@
             "keywords": [
                 "timer"
             ],
-            "time": "2018-02-01T13:07:23+00:00"
+            "time": "2019-02-20T10:12:59+00:00"
         },
         {
             "name": "phpunit/php-token-stream",
-            "version": "3.0.0",
+            "version": "3.0.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/php-token-stream.git",
-                "reference": "21ad88bbba7c3d93530d93994e0a33cd45f02ace"
+                "reference": "c99e3be9d3e85f60646f152f9002d46ed7770d18"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/php-token-stream/zipball/21ad88bbba7c3d93530d93994e0a33cd45f02ace",
-                "reference": "21ad88bbba7c3d93530d93994e0a33cd45f02ace",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-token-stream/zipball/c99e3be9d3e85f60646f152f9002d46ed7770d18",
+                "reference": "c99e3be9d3e85f60646f152f9002d46ed7770d18",
                 "shasum": ""
             },
             "require": {
@@ -4995,20 +5321,20 @@
             "keywords": [
                 "tokenizer"
             ],
-            "time": "2018-02-01T13:16:43+00:00"
+            "time": "2018-10-30T05:52:18+00:00"
         },
         {
             "name": "phpunit/phpunit",
-            "version": "7.4.3",
+            "version": "7.5.8",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/phpunit.git",
-                "reference": "c151651fb6ed264038d486ea262e243af72e5e64"
+                "reference": "c29c0525cf4572c11efe1db49a8b8aee9dfac58a"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/c151651fb6ed264038d486ea262e243af72e5e64",
-                "reference": "c151651fb6ed264038d486ea262e243af72e5e64",
+                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/c29c0525cf4572c11efe1db49a8b8aee9dfac58a",
+                "reference": "c29c0525cf4572c11efe1db49a8b8aee9dfac58a",
                 "shasum": ""
             },
             "require": {
@@ -5026,10 +5352,10 @@
                 "phpunit/php-code-coverage": "^6.0.7",
                 "phpunit/php-file-iterator": "^2.0.1",
                 "phpunit/php-text-template": "^1.2.1",
-                "phpunit/php-timer": "^2.0",
+                "phpunit/php-timer": "^2.1",
                 "sebastian/comparator": "^3.0",
                 "sebastian/diff": "^3.0",
-                "sebastian/environment": "^3.1 || ^4.0",
+                "sebastian/environment": "^4.0",
                 "sebastian/exporter": "^3.1",
                 "sebastian/global-state": "^2.0",
                 "sebastian/object-enumerator": "^3.0.3",
@@ -5053,7 +5379,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "7.4-dev"
+                    "dev-master": "7.5-dev"
                 }
             },
             "autoload": {
@@ -5079,7 +5405,7 @@
                 "testing",
                 "xunit"
             ],
-            "time": "2018-10-23T05:57:41+00:00"
+            "time": "2019-03-26T13:23:54+00:00"
         },
         {
             "name": "sebastian/code-unit-reverse-lookup",
@@ -5192,23 +5518,23 @@
         },
         {
             "name": "sebastian/diff",
-            "version": "3.0.1",
+            "version": "3.0.2",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/diff.git",
-                "reference": "366541b989927187c4ca70490a35615d3fef2dce"
+                "reference": "720fcc7e9b5cf384ea68d9d930d480907a0c1a29"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/366541b989927187c4ca70490a35615d3fef2dce",
-                "reference": "366541b989927187c4ca70490a35615d3fef2dce",
+                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/720fcc7e9b5cf384ea68d9d930d480907a0c1a29",
+                "reference": "720fcc7e9b5cf384ea68d9d930d480907a0c1a29",
                 "shasum": ""
             },
             "require": {
                 "php": "^7.1"
             },
             "require-dev": {
-                "phpunit/phpunit": "^7.0",
+                "phpunit/phpunit": "^7.5 || ^8.0",
                 "symfony/process": "^2 || ^3.3 || ^4"
             },
             "type": "library",
@@ -5244,32 +5570,35 @@
                 "unidiff",
                 "unified diff"
             ],
-            "time": "2018-06-10T07:54:39+00:00"
+            "time": "2019-02-04T06:01:07+00:00"
         },
         {
             "name": "sebastian/environment",
-            "version": "3.1.0",
+            "version": "4.1.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/environment.git",
-                "reference": "cd0871b3975fb7fc44d11314fd1ee20925fce4f5"
+                "reference": "6fda8ce1974b62b14935adc02a9ed38252eca656"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/cd0871b3975fb7fc44d11314fd1ee20925fce4f5",
-                "reference": "cd0871b3975fb7fc44d11314fd1ee20925fce4f5",
+                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/6fda8ce1974b62b14935adc02a9ed38252eca656",
+                "reference": "6fda8ce1974b62b14935adc02a9ed38252eca656",
                 "shasum": ""
             },
             "require": {
-                "php": "^7.0"
+                "php": "^7.1"
             },
             "require-dev": {
-                "phpunit/phpunit": "^6.1"
+                "phpunit/phpunit": "^7.5"
+            },
+            "suggest": {
+                "ext-posix": "*"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "3.1.x-dev"
+                    "dev-master": "4.1-dev"
                 }
             },
             "autoload": {
@@ -5294,7 +5623,7 @@
                 "environment",
                 "hhvm"
             ],
-            "time": "2017-07-01T08:51:00+00:00"
+            "time": "2019-02-01T05:27:49+00:00"
         },
         {
             "name": "sebastian/exporter",
@@ -5739,16 +6068,16 @@
         },
         {
             "name": "symfony/dom-crawler",
-            "version": "v4.1.6",
+            "version": "v4.2.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/dom-crawler.git",
-                "reference": "80e60271bb288de2a2259662cff125cff4f93f95"
+                "reference": "53c97769814c80a84a8403efcf3ae7ae966d53bb"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/dom-crawler/zipball/80e60271bb288de2a2259662cff125cff4f93f95",
-                "reference": "80e60271bb288de2a2259662cff125cff4f93f95",
+                "url": "https://api.github.com/repos/symfony/dom-crawler/zipball/53c97769814c80a84a8403efcf3ae7ae966d53bb",
+                "reference": "53c97769814c80a84a8403efcf3ae7ae966d53bb",
                 "shasum": ""
             },
             "require": {
@@ -5765,7 +6094,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.1-dev"
+                    "dev-master": "4.2-dev"
                 }
             },
             "autoload": {
@@ -5792,20 +6121,20 @@
             ],
             "description": "Symfony DomCrawler Component",
             "homepage": "https://symfony.com",
-            "time": "2018-10-02T12:40:59+00:00"
+            "time": "2019-02-23T15:17:42+00:00"
         },
         {
             "name": "symfony/filesystem",
-            "version": "v4.1.6",
+            "version": "v4.2.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/filesystem.git",
-                "reference": "596d12b40624055c300c8b619755b748ca5cf0b5"
+                "reference": "e16b9e471703b2c60b95f14d31c1239f68f11601"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/filesystem/zipball/596d12b40624055c300c8b619755b748ca5cf0b5",
-                "reference": "596d12b40624055c300c8b619755b748ca5cf0b5",
+                "url": "https://api.github.com/repos/symfony/filesystem/zipball/e16b9e471703b2c60b95f14d31c1239f68f11601",
+                "reference": "e16b9e471703b2c60b95f14d31c1239f68f11601",
                 "shasum": ""
             },
             "require": {
@@ -5815,7 +6144,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.1-dev"
+                    "dev-master": "4.2-dev"
                 }
             },
             "autoload": {
@@ -5842,7 +6171,7 @@
             ],
             "description": "Symfony Filesystem Component",
             "homepage": "https://symfony.com",
-            "time": "2018-10-02T12:40:59+00:00"
+            "time": "2019-02-07T11:40:08+00:00"
         },
         {
             "name": "theseer/tokenizer",
@@ -5886,20 +6215,21 @@
         },
         {
             "name": "webmozart/assert",
-            "version": "1.3.0",
+            "version": "1.4.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/webmozart/assert.git",
-                "reference": "0df1908962e7a3071564e857d86874dad1ef204a"
+                "reference": "83e253c8e0be5b0257b881e1827274667c5c17a9"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/webmozart/assert/zipball/0df1908962e7a3071564e857d86874dad1ef204a",
-                "reference": "0df1908962e7a3071564e857d86874dad1ef204a",
+                "url": "https://api.github.com/repos/webmozart/assert/zipball/83e253c8e0be5b0257b881e1827274667c5c17a9",
+                "reference": "83e253c8e0be5b0257b881e1827274667c5c17a9",
                 "shasum": ""
             },
             "require": {
-                "php": "^5.3.3 || ^7.0"
+                "php": "^5.3.3 || ^7.0",
+                "symfony/polyfill-ctype": "^1.8"
             },
             "require-dev": {
                 "phpunit/phpunit": "^4.6",
@@ -5932,7 +6262,7 @@
                 "check",
                 "validate"
             ],
-            "time": "2018-01-29T19:49:41+00:00"
+            "time": "2018-12-25T11:19:39+00:00"
         }
     ],
     "aliases": [],
diff --git a/config/app.php b/config/app.php
index a039089..f039ecc 100644
--- a/config/app.php
+++ b/config/app.php
@@ -23,7 +23,7 @@ return [
     | Vanguard Version
     |--------------------------------------------------------------------------
     */
-    'version' => '3.1.0',
+    'version' => '3.2.0',
 
     /*
     |--------------------------------------------------------------------------
diff --git a/config/cache.php b/config/cache.php
index 42c26c2..cebc37b 100644
--- a/config/cache.php
+++ b/config/cache.php
@@ -2,7 +2,15 @@
 
 return [
 
-    'ttl' => 60,
+    /*
+    |--------------------------------------------------------------------------
+    | Default Cache TTL
+    |--------------------------------------------------------------------------
+    |
+    | Default cache TTL (in seconds) used for caching roles and permissions.
+    |
+    */
+    'ttl' => 3600,
 
     /*
     |--------------------------------------------------------------------------
diff --git a/database/factories/PermissionFactory.php b/database/factories/PermissionFactory.php
index d7c8ea3..e811b0b 100644
--- a/database/factories/PermissionFactory.php
+++ b/database/factories/PermissionFactory.php
@@ -1,10 +1,11 @@
 <?php
 
 use Faker\Generator as Faker;
+use Illuminate\Support\Str;
 
 $factory->define(Vanguard\Permission::class, function (Faker $faker) {
     return [
-        'name' => str_random(5),
+        'name' => Str::random(5),
         'display_name' => implode(" ", $faker->words(2)),
         'description' => substr($faker->paragraph, 0, 191),
         'removable' => true
diff --git a/database/factories/RoleFactory.php b/database/factories/RoleFactory.php
index d85f880..e5f5ba8 100644
--- a/database/factories/RoleFactory.php
+++ b/database/factories/RoleFactory.php
@@ -1,10 +1,11 @@
 <?php
 
 use Faker\Generator as Faker;
+use Illuminate\Support\Str;
 
 $factory->define(Vanguard\Role::class, function (Faker $faker) {
     return [
-        'name' => str_random(5),
+        'name' => Str::random(5),
         'display_name' => implode(" ", $faker->words(2)),
         'description' => substr($faker->paragraph, 0, 191),
         'removable' => true,
diff --git a/database/factories/TokenFactory.php b/database/factories/TokenFactory.php
index a22d85a..007c03c 100644
--- a/database/factories/TokenFactory.php
+++ b/database/factories/TokenFactory.php
@@ -1,10 +1,11 @@
 <?php
 
 use Faker\Generator as Faker;
+use Illuminate\Support\Str;
 
 $factory->define(\Vanguard\Services\Auth\Api\Token::class, function (Faker $faker) {
     return [
-        'id' => str_random(40),
+        'id' => Str::random(40),
         'user_id' => function () {
             return factory(\Vanguard\User::class)->create()->id;
         },
diff --git a/database/factories/UserFactory.php b/database/factories/UserFactory.php
index fe8d2f0..2045b29 100644
--- a/database/factories/UserFactory.php
+++ b/database/factories/UserFactory.php
@@ -1,11 +1,12 @@
 <?php
 
 use Faker\Generator as Faker;
+use Illuminate\Support\Str;
 
 $factory->define(Vanguard\User::class, function (Faker $faker) {
     return [
         'email' => $faker->email,
-        'password' => bcrypt(str_random(10)),
+        'password' => bcrypt(Str::random(10)),
         'first_name' => $faker->firstName,
         'last_name' => $faker->lastName,
         'phone' => $faker->phoneNumber,
diff --git a/phpunit.xml b/phpunit.xml
index dc86736..984b508 100644
--- a/phpunit.xml
+++ b/phpunit.xml
@@ -30,5 +30,6 @@
         <env name="QUEUE_CONNECTION" value="sync"/>
         <env name="DB_CONNECTION" value="sqlite_memory"/>
         <env name="MAIL_DRIVER" value="log"/>
+        <env name="EXPOSE_API" value="true"/>
     </php>
 </phpunit>
diff --git a/resources/lang/de/passwords.php b/resources/lang/de/passwords.php
index d716f5f..a922350 100644
--- a/resources/lang/de/passwords.php
+++ b/resources/lang/de/passwords.php
@@ -13,7 +13,7 @@ return [
     |
     */
 
-    'password' => 'Passwörter müssen mindestens 6 Zeichen lang sein und korrekt bestätigt werden.',
+    'password' => 'Passwörter müssen mindestens 8 Zeichen lang sein und korrekt bestätigt werden.',
     'reset'    => 'Das Passwort wurde zurückgesetzt!',
     'sent'     => 'Passworterinnerung wurde gesendet!',
     'token'    => 'Der Passwort-Wiederherstellungs-Schlüssel ist ungültig oder abgelaufen.',
diff --git a/resources/lang/en/passwords.php b/resources/lang/en/passwords.php
index e6f3a67..b5d4b18 100644
--- a/resources/lang/en/passwords.php
+++ b/resources/lang/en/passwords.php
@@ -13,7 +13,7 @@ return [
     |
     */
 
-    'password' => 'Passwords must be at least six characters and match the confirmation.',
+    'password' => 'Passwords must be at least eight characters and match the confirmation.',
     'reset' => 'Your password has been reset!',
     'sent' => 'We have e-mailed your password reset link!',
     'token' => 'This password reset token is invalid.',
diff --git a/resources/lang/sr/passwords.php b/resources/lang/sr/passwords.php
index cb7f3d3..99f99d3 100644
--- a/resources/lang/sr/passwords.php
+++ b/resources/lang/sr/passwords.php
@@ -13,7 +13,7 @@ return [
     |
     */
 
-    'password' => 'Lozinka mora imati najmanje 6 karaktera i da odgovara potvrdi.',
+    'password' => 'Lozinka mora imati najmanje 8 karaktera i da odgovara potvrdi.',
     'reset'    => 'Lozinka je resetovana!',
     'sent'     => 'Poslali smo reset link za vašu lozinku!',
     'token'    => 'Ukucana oznaka za resetovanje lozinke nije važeća.',
diff --git a/tests/Feature/ApiTestCase.php b/tests/Feature/ApiTestCase.php
index 7d3f5e2..e474942 100644
--- a/tests/Feature/ApiTestCase.php
+++ b/tests/Feature/ApiTestCase.php
@@ -7,13 +7,6 @@ use Vanguard\User;
 
 class ApiTestCase extends FunctionalTestCase
 {
-    public function setUp()
-    {
-        putenv("EXPOSE_API=true");
-
-        parent::setUp();
-    }
-
     /**
      * @return mixed
      */
diff --git a/tests/Feature/FunctionalTestCase.php b/tests/Feature/FunctionalTestCase.php
index 742655f..01b3528 100644
--- a/tests/Feature/FunctionalTestCase.php
+++ b/tests/Feature/FunctionalTestCase.php
@@ -21,7 +21,7 @@ class FunctionalTestCase extends TestCase
 
     protected $settingsModified = [];
 
-    public function setUp()
+    protected function setUp(): void
     {
         $this->afterApplicationCreated(function () {
             if ($this->isSQLiteConnection()) {
diff --git a/tests/Feature/Http/Controllers/Api/Auth/Password/ResetControllerTest.php b/tests/Feature/Http/Controllers/Api/Auth/Password/ResetControllerTest.php
index ae9cdca..b71ac5b 100644
--- a/tests/Feature/Http/Controllers/Api/Auth/Password/ResetControllerTest.php
+++ b/tests/Feature/Http/Controllers/Api/Auth/Password/ResetControllerTest.php
@@ -33,7 +33,7 @@ class ResetControllerTest extends ApiTestCase
 
         $user = $user->fresh();
 
-        $this->assertTrue(Hash::check('123123', $user->password));
+        $this->assertTrue(Hash::check('123123123', $user->password));
     }
 
     public function test_password_reset_with_expired_token()
@@ -85,8 +85,8 @@ class ResetControllerTest extends ApiTestCase
         $this->postJson('api/password/reset', [
             'token' => $token,
             'email' => $email,
-            'password' => '123123',
-            'password_confirmation' => '123123'
+            'password' => '123123123',
+            'password_confirmation' => '123123123'
         ]);
     }
 
diff --git a/tests/Feature/Http/Controllers/Api/Auth/RegistrationControllerTest.php b/tests/Feature/Http/Controllers/Api/Auth/RegistrationControllerTest.php
index 0901dda..f670b80 100644
--- a/tests/Feature/Http/Controllers/Api/Auth/RegistrationControllerTest.php
+++ b/tests/Feature/Http/Controllers/Api/Auth/RegistrationControllerTest.php
@@ -32,8 +32,8 @@ class RegistrationControllerTest extends ApiTestCase
         $data = [
             'email' => 'john.doe@test.com',
             'username' => 'john.doe',
-            'password' => '123123',
-            'password_confirmation' => '123123'
+            'password' => '123123123',
+            'password_confirmation' => '123123123'
         ];
 
         $this->postJson("/api/register", $data);
@@ -61,8 +61,8 @@ class RegistrationControllerTest extends ApiTestCase
         $data = [
             'email' => 'john.doe@test.com',
             'username' => 'john.doe',
-            'password' => '123123',
-            'password_confirmation' => '123123'
+            'password' => '123123123',
+            'password_confirmation' => '123123123'
         ];
 
         $this->postJson("/api/register", $data);
@@ -106,8 +106,8 @@ class RegistrationControllerTest extends ApiTestCase
         $data = [
             'email' => 'john.doe@test.com',
             'username' => 'john.doe',
-            'password' => '123123',
-            'password_confirmation' => '123123'
+            'password' => '123123123',
+            'password_confirmation' => '123123123'
         ];
 
         $this->postJson("/api/register", $data);
diff --git a/tests/Feature/Http/Controllers/Api/Profile/AuthDetailsControllerTest.php b/tests/Feature/Http/Controllers/Api/Profile/AuthDetailsControllerTest.php
index 824365b..fe28ccb 100644
--- a/tests/Feature/Http/Controllers/Api/Profile/AuthDetailsControllerTest.php
+++ b/tests/Feature/Http/Controllers/Api/Profile/AuthDetailsControllerTest.php
@@ -16,13 +16,13 @@ class AuthDetailsControllerTest extends ApiTestCase
         $this->patch('/api/me/details/auth', [
             'email' => 'foo@example.com',
             'username' => 'john.doe',
-            'password' => '123123',
-            'password_confirmation' => '123123'
+            'password' => '12345678',
+            'password_confirmation' => '12345678'
         ]);
 
         $this->assertResponseOk()
             ->seeJsonContains(['email' => 'foo@example.com', 'username' => 'john.doe'])
-            ->assertTrue(password_verify('123123', $user->fresh()->password));
+            ->assertTrue(password_verify('12345678', $user->fresh()->password));
     }
 
     public function test_user_can_update_only_email_and_leave_other_fields_unchanged()
diff --git a/tests/Feature/Http/Controllers/Api/Profile/SessionsControllerTest.php b/tests/Feature/Http/Controllers/Api/Profile/SessionsControllerTest.php
index 2dafbdd..e7d1284 100644
--- a/tests/Feature/Http/Controllers/Api/Profile/SessionsControllerTest.php
+++ b/tests/Feature/Http/Controllers/Api/Profile/SessionsControllerTest.php
@@ -3,6 +3,7 @@
 namespace Tests\Feature\Http\Controllers\Api\Profile;
 
 use Carbon\Carbon;
+use Illuminate\Support\Str;
 use Tests\Feature\ApiTestCase;
 use Vanguard\Repositories\Session\SessionRepository;
 use Vanguard\Transformers\SessionTransformer;
@@ -18,9 +19,7 @@ class SessionsControllerTest extends ApiTestCase
 
     public function test_get_sessions_if_non_database_driver_is_used()
     {
-        putenv('SESSION_DRIVER=array');
-
-        $this->refreshApp();
+        config(['session.driver' => 'array']);
 
         $this->login();
 
@@ -30,9 +29,7 @@ class SessionsControllerTest extends ApiTestCase
 
     public function test_get_user_sessions()
     {
-        putenv('SESSION_DRIVER=database');
-
-        $this->refreshApp();
+        config(['session.driver' => 'database']);
 
         $user = $this->login();
 
@@ -52,11 +49,11 @@ class SessionsControllerTest extends ApiTestCase
 
         for ($i = 0; $i < $count; $i++) {
             array_push($sessions, [
-                'id' => str_random(40),
+                'id' => Str::random(40),
                 'user_id' => $user->id,
                 'ip_address' => $faker->ipv4,
                 'user_agent' => $faker->userAgent,
-                'payload' => str_random(),
+                'payload' => Str::random(),
                 'last_activity' => Carbon::now()->subMinute()->timestamp
             ]);
         }
diff --git a/tests/Feature/Http/Controllers/Api/SessionsControllerTest.php b/tests/Feature/Http/Controllers/Api/SessionsControllerTest.php
index 358a2eb..0befdd0 100644
--- a/tests/Feature/Http/Controllers/Api/SessionsControllerTest.php
+++ b/tests/Feature/Http/Controllers/Api/SessionsControllerTest.php
@@ -3,6 +3,7 @@
 namespace Tests\Feature\Http\Controllers\Api;
 
 use Carbon\Carbon;
+use Illuminate\Support\Str;
 use Tests\Feature\ApiTestCase;
 use Tests\Feature\FunctionalTestCase;
 use Vanguard\Repositories\Session\SessionRepository;
@@ -11,7 +12,7 @@ use Vanguard\User;
 
 class SessionsControllerTest extends ApiTestCase
 {
-    public function setUp()
+    protected function setUp(): void
     {
         parent::setUp();
 
@@ -97,14 +98,14 @@ class SessionsControllerTest extends ApiTestCase
 
     private function createSession(User $user)
     {
-        $sessionId = str_random(40);
+        $sessionId = Str::random(40);
 
         $data = [
             'id' => $sessionId,
             'user_id' => $user->id,
             'ip_address' => "127.0.0.1",
             'user_agent' => 'foo',
-            'payload' => str_random(),
+            'payload' => Str::random(),
             'last_activity' => Carbon::now()->timestamp
         ];
 
diff --git a/tests/Feature/Http/Controllers/Api/Users/SessionsControllerTest.php b/tests/Feature/Http/Controllers/Api/Users/SessionsControllerTest.php
index 1d8b1aa..502a38b 100644
--- a/tests/Feature/Http/Controllers/Api/Users/SessionsControllerTest.php
+++ b/tests/Feature/Http/Controllers/Api/Users/SessionsControllerTest.php
@@ -2,6 +2,7 @@
 
 namespace Tests\Feature\Http\Controllers\Api\Users;
 
+use Illuminate\Support\Str;
 use Tests\Feature\ApiTestCase;
 use Vanguard\Repositories\Session\SessionRepository;
 use Vanguard\Transformers\SessionTransformer;
@@ -28,9 +29,7 @@ class SessionsControllerTest extends ApiTestCase
 
     public function test_get_user_sessions()
     {
-        putenv('SESSION_DRIVER=database');
-
-        $this->refreshApp();
+        config(['session.driver' => 'database']);
 
         $user = $this->login();
 
@@ -53,11 +52,11 @@ class SessionsControllerTest extends ApiTestCase
 
         for ($i = 0; $i < $count; $i++) {
             array_push($sessions, [
-                'id' => str_random(40),
+                'id' => Str::random(40),
                 'user_id' => $user->id,
                 'ip_address' => $faker->ipv4,
                 'user_agent' => $faker->userAgent,
-                'payload' => str_random(),
+                'payload' => Str::random(),
                 'last_activity' => $faker->dateTimeBetween("-{$lifetime} minutes")->getTimestamp()
             ]);
         }
diff --git a/tests/Feature/Http/Controllers/Web/ActivityControllerTest.php b/tests/Feature/Http/Controllers/Web/ActivityControllerTest.php
index d8f8e1f..f52e657 100644
--- a/tests/Feature/Http/Controllers/Web/ActivityControllerTest.php
+++ b/tests/Feature/Http/Controllers/Web/ActivityControllerTest.php
@@ -14,7 +14,7 @@ class ActivityControllerTest extends FunctionalTestCase
      */
     public $logger;
 
-    public function setUp()
+    protected function setUp(): void
     {
         parent::setUp();
         $this->logger = app(\Vanguard\Services\Logging\UserActivity\Logger::class);
diff --git a/tests/Feature/Http/Controllers/Web/Auth/AuthControllerTest.php b/tests/Feature/Http/Controllers/Web/Auth/AuthControllerTest.php
index 7919caf..b827195 100644
--- a/tests/Feature/Http/Controllers/Web/Auth/AuthControllerTest.php
+++ b/tests/Feature/Http/Controllers/Web/Auth/AuthControllerTest.php
@@ -4,6 +4,7 @@ namespace Tests\Feature\Http\Controllers\Web\Auth;
 
 use Authy;
 use Carbon\Carbon;
+use Illuminate\Support\Arr;
 use Mockery;
 use Settings;
 use Tests\Feature\FunctionalTestCase;
@@ -176,7 +177,7 @@ class AuthControllerTest extends FunctionalTestCase
 
         $this->registerUser($data);
 
-        $expected = array_except($data, ['password', 'password_confirmation', 'tos']);
+        $expected = Arr::except($data, ['password', 'password_confirmation', 'tos']);
         $expected += ['status' => UserStatus::UNCONFIRMED];
 
         $this->seePageIs('login')
@@ -337,8 +338,8 @@ class AuthControllerTest extends FunctionalTestCase
         return [
             'email' => 'test@test.com',
             'username' => 'johndoe',
-            'password' => '123123',
-            'password_confirmation' => '123123',
+            'password' => '123123123',
+            'password_confirmation' => '123123123',
             'tos' => 1
         ];
     }
diff --git a/tests/Feature/Http/Controllers/Web/Auth/PasswordControllerTest.php b/tests/Feature/Http/Controllers/Web/Auth/PasswordControllerTest.php
index d2f83fc..9c4592b 100644
--- a/tests/Feature/Http/Controllers/Web/Auth/PasswordControllerTest.php
+++ b/tests/Feature/Http/Controllers/Web/Auth/PasswordControllerTest.php
@@ -68,7 +68,7 @@ class PasswordControllerTest extends FunctionalTestCase
 
         $user = $user->fresh();
 
-        $this->assertTrue(Hash::check('123123', $user->password));
+        $this->assertTrue(Hash::check('12345678', $user->password));
     }
 
     public function test_password_reset_with_expired_token()
@@ -119,8 +119,8 @@ class PasswordControllerTest extends FunctionalTestCase
     {
         $this->visit("password/reset/{$token}")
             ->type($email, 'email')
-            ->type('123123', 'password')
-            ->type('123123', 'password_confirmation')
+            ->type('12345678', 'password')
+            ->type('12345678', 'password_confirmation')
             ->press('Update Password');
     }
 
diff --git a/tests/Feature/Http/Controllers/Web/PermissionsControllerTest.php b/tests/Feature/Http/Controllers/Web/PermissionsControllerTest.php
index aadbdfa..e11675f 100644
--- a/tests/Feature/Http/Controllers/Web/PermissionsControllerTest.php
+++ b/tests/Feature/Http/Controllers/Web/PermissionsControllerTest.php
@@ -16,7 +16,7 @@ class PermissionsControllerTest extends FunctionalTestCase
 
     protected $seed = false;
 
-    public function setUp()
+    protected function setUp(): void
     {
         parent::setUp();
         $this->user = $this->createSuperUser();
diff --git a/tests/Feature/Http/Controllers/Web/ProfileControllerTest.php b/tests/Feature/Http/Controllers/Web/ProfileControllerTest.php
index 7acaf32..9504337 100644
--- a/tests/Feature/Http/Controllers/Web/ProfileControllerTest.php
+++ b/tests/Feature/Http/Controllers/Web/ProfileControllerTest.php
@@ -2,23 +2,19 @@
 
 namespace Tests\Feature\Http\Controllers\Web;
 
-use Authy;
 use Hash;
 use Input;
-use Settings;
 use Tests\Feature\FunctionalTestCase;
 use Vanguard\Events\User\ChangedAvatar;
 use Vanguard\Events\User\UpdatedProfileDetails;
-use Vanguard\Role;
 use Vanguard\Support\Enum\UserStatus;
 use Carbon\Carbon;
-use Vanguard\User;
 
 class ProfileControllerTest extends FunctionalTestCase
 {
     protected $user;
 
-    public function setUp()
+    protected function setUp(): void
     {
         parent::setUp();
 
@@ -45,12 +41,11 @@ class ProfileControllerTest extends FunctionalTestCase
             ->seeInDatabase('users', $data + ['id' => $this->user->id]);
     }
 
-    public function test_cannot_change_role_or_status()
+    public function test_cannot_change_status()
     {
         $data = $this->getStubDetailsData();
 
         $extendedData = $data + [
-            'role_id' => Role::whereName('Admin')->first()->id,
             'status' => UserStatus::BANNED,
         ];
 
@@ -65,6 +60,24 @@ class ProfileControllerTest extends FunctionalTestCase
             ]);
     }
 
+    public function test_cannot_change_role()
+    {
+        $data = $this->getStubDetailsData();
+
+        $extendedData = $data + ['status' => UserStatus::BANNED];
+
+        try {
+            $this->visit('profile')->submitForm('Update Details', $extendedData);
+            $this->fail('Form submitted with invalid data.');
+        } catch (\Exception $e) {
+            $this->seeInDatabase('users', $data + [
+                'id' => $this->user->id,
+                'status' => UserStatus::ACTIVE,
+                'role_id' => $this->user->role_id
+            ]);
+        }
+    }
+
     public function test_update_avatar()
     {
         $this->expectsEvents(ChangedAvatar::class);
@@ -207,13 +220,7 @@ class ProfileControllerTest extends FunctionalTestCase
 
     public function test_session_invalidation()
     {
-        putenv('SESSION_DRIVER=database');
-
-        $this->refreshApplication();
-
-        if ($this->isSQLiteConnection()) {
-            $this->executeCallbacks();
-        }
+        config(['session.driver' => 'database']);
 
         Carbon::setTestNow(Carbon::now());
 
diff --git a/tests/Feature/Http/Controllers/Web/RolesControllerTest.php b/tests/Feature/Http/Controllers/Web/RolesControllerTest.php
index c824149..e8e5b77 100644
--- a/tests/Feature/Http/Controllers/Web/RolesControllerTest.php
+++ b/tests/Feature/Http/Controllers/Web/RolesControllerTest.php
@@ -13,7 +13,7 @@ class RolesControllerTest extends FunctionalTestCase
 
     protected $seed = false;
 
-    public function setUp()
+    protected function setUp(): void
     {
         parent::setUp();
         $this->user = $this->createSuperUser();
diff --git a/tests/Feature/Http/Controllers/Web/UsersControllerTest.php b/tests/Feature/Http/Controllers/Web/UsersControllerTest.php
index cf613e0..ceb0f8e 100644
--- a/tests/Feature/Http/Controllers/Web/UsersControllerTest.php
+++ b/tests/Feature/Http/Controllers/Web/UsersControllerTest.php
@@ -4,6 +4,7 @@ namespace Tests\Feature\Http\Controllers\Web;
 
 use Authy;
 use Hash;
+use Illuminate\Support\Str;
 use Input;
 use Settings;
 use Tests\Feature\FunctionalTestCase;
@@ -215,17 +216,17 @@ class UsersControllerTest extends FunctionalTestCase
         $this->createAndLoginAdminUser();
 
         $user = $this->createUser([
-            'remember_token' => str_random(60)
+            'remember_token' => Str::random(60)
         ]);
 
         $user = $this->setRoleForUser($user, 'User');
 
         \DB::table('sessions')->insert([
-            'id' => str_random(40),
+            'id' => Str::random(40),
             'user_id' => $user->id,
             'ip_address' => "127.0.0.1",
             'user_agent' => 'Foo',
-            'payload' => str_random(),
+            'payload' => Str::random(),
             'last_activity' => Carbon::now()->subMinute()->timestamp
         ]);
 
@@ -258,8 +259,8 @@ class UsersControllerTest extends FunctionalTestCase
         $data = [
             'email' => 'john@doe.com',
             'username' => 'milos',
-            'password' => '123123',
-            'password_confirmation' => '123123'
+            'password' => '123123123',
+            'password_confirmation' => '123123123'
         ];
 
         $this->visit("user/{$user->id}/edit")
@@ -366,9 +367,7 @@ class UsersControllerTest extends FunctionalTestCase
      */
     public function test_session_page_is_not_available_for_non_database_driver()
     {
-        putenv('SESSION_DRIVER=array');
-
-        $this->refreshApp();
+        config(['session.driver' => 'array']);
 
         $user = $this->createAndLoginAdminUser();
 
@@ -382,9 +381,7 @@ class UsersControllerTest extends FunctionalTestCase
 
     public function test_invalidate_session()
     {
-        putenv('SESSION_DRIVER=database');
-
-        $this->refreshApp();
+        config(['session.driver' => 'database']);
 
         Carbon::setTestNow(Carbon::now());
 
@@ -395,8 +392,7 @@ class UsersControllerTest extends FunctionalTestCase
         $platform = $agent->platform() ?: 'Unknown';
 
         $this->visit('user')
-            ->clickOn('a:contains("User Sessions")')
-            ->seePageIs("user/{$user->id}/sessions")
+            ->visit("user/{$user->id}/sessions")
             ->seeInTable('table', Input::ip(), 1, 1)
             ->seeInTable('table', "{$device} ({$platform})", 1, 2)
             ->seeInTable('table', $agent->browser(), 1, 3)
@@ -409,8 +405,7 @@ class UsersControllerTest extends FunctionalTestCase
         $this->delete($url)
             ->followRedirects()
             ->dontSeeInDatabase('sessions', ['user_id' => $user->id])
-            ->seePageIs("user/{$user->id}/sessions")
-            ->see('Session invalidated successfully.');
+            ->seePageIs("user/{$user->id}/sessions");
     }
 
     public function test_delete_user()
diff --git a/tests/Feature/Listeners/BaseListenerTestCase.php b/tests/Feature/Listeners/BaseListenerTestCase.php
index 24398a3..a202155 100644
--- a/tests/Feature/Listeners/BaseListenerTestCase.php
+++ b/tests/Feature/Listeners/BaseListenerTestCase.php
@@ -10,7 +10,7 @@ class BaseListenerTestCase extends FunctionalTestCase
 {
     protected $user;
 
-    public function setUp()
+    protected function setUp(): void
     {
         parent::setUp();
         $this->user = factory(User::class)->create();
diff --git a/tests/Feature/Listeners/PermissionEventsSubscriberTest.php b/tests/Feature/Listeners/PermissionEventsSubscriberTest.php
index 019289e..4fb04e0 100644
--- a/tests/Feature/Listeners/PermissionEventsSubscriberTest.php
+++ b/tests/Feature/Listeners/PermissionEventsSubscriberTest.php
@@ -11,7 +11,7 @@ class PermissionEventsSubscriberTest extends BaseListenerTestCase
 {
     protected $perm;
 
-    public function setUp()
+    protected function setUp(): void
     {
         parent::setUp();
         $this->perm = factory(\Vanguard\Permission::class)->create();
diff --git a/tests/Feature/Listeners/RoleEventsSubscriberTest.php b/tests/Feature/Listeners/RoleEventsSubscriberTest.php
index ff9a2d8..8fcb1ee 100644
--- a/tests/Feature/Listeners/RoleEventsSubscriberTest.php
+++ b/tests/Feature/Listeners/RoleEventsSubscriberTest.php
@@ -11,7 +11,7 @@ class RoleEventsSubscriberTest extends BaseListenerTestCase
 {
     protected $role;
 
-    public function setUp()
+    protected function setUp(): void
     {
         parent::setUp();
         $this->role = factory(\Vanguard\Role::class)->create();
diff --git a/tests/Feature/Listeners/UserEventsSubscriberTest.php b/tests/Feature/Listeners/UserEventsSubscriberTest.php
index 0cb1bfa..81263d6 100644
--- a/tests/Feature/Listeners/UserEventsSubscriberTest.php
+++ b/tests/Feature/Listeners/UserEventsSubscriberTest.php
@@ -6,7 +6,7 @@ class UserEventsSubscriberTest extends BaseListenerTestCase
 {
     protected $theUser;
 
-    public function setUp()
+    protected function setUp(): void
     {
         parent::setUp();
         $this->theUser = factory(\Vanguard\User::class)->create();
diff --git a/tests/Feature/Repositories/Activity/EloquentActivityTest.php b/tests/Feature/Repositories/Activity/EloquentActivityTest.php
index 748a42e..ad79f54 100644
--- a/tests/Feature/Repositories/Activity/EloquentActivityTest.php
+++ b/tests/Feature/Repositories/Activity/EloquentActivityTest.php
@@ -16,7 +16,7 @@ class EloquentActivityTest extends FunctionalTestCase
      */
     protected $repo;
 
-    public function setUp()
+    protected function setUp(): void
     {
         parent::setUp();
         $this->repo = app(EloquentActivity::class);
diff --git a/tests/Feature/Repositories/Country/EloquentCountryTest.php b/tests/Feature/Repositories/Country/EloquentCountryTest.php
index a42bfdb..8917b31 100644
--- a/tests/Feature/Repositories/Country/EloquentCountryTest.php
+++ b/tests/Feature/Repositories/Country/EloquentCountryTest.php
@@ -16,7 +16,7 @@ class EloquentCountryTest extends FunctionalTestCase
 
     protected $seed = false;
 
-    public function setUp()
+    protected function setUp(): void
     {
         parent::setUp();
         $this->repo = app(EloquentCountry::class);
diff --git a/tests/Feature/Repositories/Permission/EloquentPermissionTest.php b/tests/Feature/Repositories/Permission/EloquentPermissionTest.php
index 0aa2326..333639e 100644
--- a/tests/Feature/Repositories/Permission/EloquentPermissionTest.php
+++ b/tests/Feature/Repositories/Permission/EloquentPermissionTest.php
@@ -3,6 +3,7 @@
 namespace Tests\Feature\Repositories\Permission;
 
 use Cache;
+use Illuminate\Support\Str;
 use Tests\Feature\FunctionalTestCase;
 use Vanguard\Events\Permission\Created;
 use Vanguard\Permission;
@@ -17,7 +18,7 @@ class EloquentPermissionTest extends FunctionalTestCase
 
     protected $seed = false;
 
-    public function setUp()
+    protected function setUp(): void
     {
         parent::setUp();
         $this->repo = app(EloquentPermission::class);
@@ -77,10 +78,10 @@ class EloquentPermissionTest extends FunctionalTestCase
     private function getPermissionStubData()
     {
         return [
-            'name'         => str_random(5),
-            'display_name' => str_random(5),
-            'description'  => 'foo',
-            'removable'    => true
+            'name' => Str::random(5),
+            'display_name' => Str::random(5),
+            'description' => 'foo',
+            'removable' => true
         ];
     }
 }
diff --git a/tests/Feature/Repositories/Role/EloquentRoleTest.php b/tests/Feature/Repositories/Role/EloquentRoleTest.php
index cbc833c..135a678 100644
--- a/tests/Feature/Repositories/Role/EloquentRoleTest.php
+++ b/tests/Feature/Repositories/Role/EloquentRoleTest.php
@@ -18,7 +18,7 @@ class EloquentRoleTest extends FunctionalTestCase
 
     protected $seed = false;
 
-    public function setUp()
+    protected function setUp(): void
     {
         parent::setUp();
         $this->repo = app(EloquentRole::class);
diff --git a/tests/Feature/Repositories/Session/DbSessionTest.php b/tests/Feature/Repositories/Session/DbSessionTest.php
index 626190a..084bc6c 100644
--- a/tests/Feature/Repositories/Session/DbSessionTest.php
+++ b/tests/Feature/Repositories/Session/DbSessionTest.php
@@ -4,6 +4,7 @@ namespace Tests\Feature\Repositories\Session;
 
 use Carbon\Carbon;
 use DB;
+use Illuminate\Support\Str;
 use Mockery as m;
 use Tests\Feature\FunctionalTestCase;
 use Vanguard\Repositories\Session\DbSession;
@@ -18,7 +19,7 @@ class DbSessionTest extends FunctionalTestCase
 
     protected $seed = false;
 
-    public function setUp()
+    protected function setUp(): void
     {
         parent::setUp();
         $this->repo = app(DbSession::class);
@@ -93,7 +94,7 @@ class DbSessionTest extends FunctionalTestCase
     public function test_invalidateUserSession()
     {
         $user = factory(User::class)->create([
-            'remember_token' => str_random(60)
+            'remember_token' => Str::random(60)
         ]);
 
         $data = $this->getSessionStubData($user);
@@ -108,7 +109,7 @@ class DbSessionTest extends FunctionalTestCase
     public function test_invalidate_all_sessions_for_user()
     {
         $user = factory(User::class)->create([
-            'remember_token' => str_random(60)
+            'remember_token' => Str::random(60)
         ]);
 
         $data = $this->getSessionStubData($user);
@@ -125,7 +126,7 @@ class DbSessionTest extends FunctionalTestCase
         $faker = app(\Faker\Generator::class);
 
         return [
-            'id' => str_random(),
+            'id' => Str::random(),
             'user_id' => $user->id,
             'ip_address' => $faker->ipv4,
             'user_agent' => $faker->userAgent,
diff --git a/tests/Feature/Repositories/User/EloquentUserTest.php b/tests/Feature/Repositories/User/EloquentUserTest.php
index cf4eac9..c6b3ff7 100644
--- a/tests/Feature/Repositories/User/EloquentUserTest.php
+++ b/tests/Feature/Repositories/User/EloquentUserTest.php
@@ -3,6 +3,7 @@
 namespace Tests\Feature\Repositories\User;
 
 use DB;
+use Illuminate\Support\Str;
 use Tests\Feature\FunctionalTestCase;
 use Vanguard\Repositories\User\EloquentUser;
 use Vanguard\Role;
@@ -18,7 +19,7 @@ class EloquentUserTest extends FunctionalTestCase
      */
     protected $repo;
 
-    public function setUp()
+    protected function setUp(): void
     {
         parent::setUp();
         $this->repo = app(EloquentUser::class);
@@ -72,14 +73,14 @@ class EloquentUserTest extends FunctionalTestCase
     {
         $user = factory(User::class)->create();
 
-        $sessionId = str_random(40);
+        $sessionId = Str::random(40);
 
         DB::table('sessions')->insert([
             'id' => $sessionId,
             'user_id' => $user->id,
             'ip_address' => "127.0.0.1",
             'user_agent' => "foo",
-            'payload' => str_random(),
+            'payload' => Str::random(),
             'last_activity' => Carbon::now()
         ]);
 
@@ -266,7 +267,7 @@ class EloquentUserTest extends FunctionalTestCase
 
     public function test_newUsersCount()
     {
-        Carbon::setTestNow(Carbon::now()->subMonth());
+        Carbon::setTestNow(Carbon::now()->startOfMonth()->subMonth());
         factory(User::class)->times(3)->create();
 
         Carbon::setTestNow(null);
diff --git a/tests/unit/Presenters/UserPresenterTest.php b/tests/unit/Presenters/UserPresenterTest.php
index b4661bc..00d8b9b 100644
--- a/tests/unit/Presenters/UserPresenterTest.php
+++ b/tests/unit/Presenters/UserPresenterTest.php
@@ -11,7 +11,7 @@ class UserPresenterTest extends TestCase
 {
     protected $user;
 
-    public function setUp()
+    protected function setUp(): void
     {
         parent::setUp();
         $this->user = new PresentableUser;
